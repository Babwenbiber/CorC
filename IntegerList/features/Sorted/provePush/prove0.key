\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 27 14:15:52 CEST 2021
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=20000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "C:/Users/tbord/Documents/Forschung/VarCorCxFeatureIDE/IntegerList";\include "helper.key";\programVariables {int[] data; int[] old_data; int newTop;  Heap heapAtPre;}\problem {
     \exists int z;
       (  leq(Z(0(#)), z)
        & lt(z, length(data))
        & int::select(heap, data, arr(z)) = newTop)
   & \forall int k;
       (   leq(Z(0(#)), k) & lt(k, length(old_data))
        -> \exists int z;
             (  leq(Z(0(#)), z)
              & lt(z, length(data))
              &   int::select(heap, data, arr(z))
                = int::select(heap, old_data, arr(k))))
   & !data = null
   & geq(length(data), Z(0(#)))
   & !old_data = null
   & geq(length(old_data), Z(0(#)))
   & old_data = data
   &   boolean::select(heap,
                       data,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       old_data,
                       java.lang.Object::<created>)
     = TRUE
   & wellFormed(heap)
-> {heapAtPre:=heap}
     \<{
         data=Generated_IntegerList.generated_increasing(data,old_data);
       }\> (  \forall int k;
                (     leq(Z(0(#)), k)
                    & lt(k, length(old_data))
                 -> \exists int z;
                      (  leq(Z(0(#)), z)
                       & lt(z, length(data))
                       &   int::select(heap,
                                       data,
                                       arr(z))
                         = int::select(heap,
                                       old_data,
                                       arr(k))))
            & (  \forall int k;
                   (     leq(Z(0(#)), k)
                       & lt(k,
                            sub(length(data), Z(1(#))))
                    -> geq(int::select(heap,
                                       data,
                                       arr(k)),
                           int::select(heap,
                                       data,
                                       arr(add(k,
                                               Z(1(#)))))))
               | \forall int k;
                   (     leq(Z(0(#)), k)
                       & lt(k,
                            sub(length(data), Z(1(#))))
                    -> leq(int::select(heap,
                                       data,
                                       arr(k)),
                           int::select(heap,
                                       data,
                                       arr(add(k,
                                               Z(1(#)))))))))

}

\proof {
(keyLog "0" (keyUser "tbord" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "753")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "exLeft" (formula "1") (inst "sk=z_0"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0,1,0"))
(rule "mul_literals" (formula "13") (term "1,1,1,0,0,0,1,0"))
(rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,1,1,0"))
(rule "mul_literals" (formula "13") (term "1,1,1,0,0,1,1,0"))
(rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,0,0,1,0"))
(rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,0,1,1,0"))
(rule "polySimp_addComm0" (formula "13") (term "1,1,0,0,0,1,0"))
(rule "polySimp_addComm0" (formula "13") (term "1,1,0,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,1,0"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,1,0"))
(rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,1,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,1,0"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,1,0"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,1,0"))
(rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "1"))
(rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,0"))
(rule "applyEq" (formula "9") (term "1,0") (ifseqformula "7"))
(rule "applyEq" (formula "4") (term "1,1,1,0,1,0") (ifseqformula "7"))
(rule "applyEq" (formula "11") (term "0") (ifseqformula "7"))
(rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
(rule "applyEq" (formula "4") (term "0,0,1,0,0,1,0,0") (ifseqformula "6"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,0"))
(rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "polySimp_elimOne" (formula "2") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "10") (term "0,0,0"))
(rule "nnf_imp2or" (formula "4") (term "0"))
(rule "nnf_notAnd" (formula "4") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
(rule "mul_literals" (formula "4") (term "1,0,0,0"))
(rule "nnf_imp2or" (formula "10") (term "0,0,1,0"))
(rule "nnf_imp2or" (formula "10") (term "0,1,1,0"))
(rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0"))
(rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0"))
(rule "nnf_notAnd" (formula "10") (term "0,0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,0"))
(rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,0"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0"))
(rule "nnf_notAnd" (formula "10") (term "0,0,1,1,0"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,1,0"))
(rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,1,1,0"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,1,0"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,1,1,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,1,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,1,0"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,1,0"))
(rule "ex_pull_out3" (formula "4") (term "0"))
(rule "cnf_rightDist" (formula "4") (term "0,0"))
(rule "commute_or" (formula "4") (term "1,0,0"))
(rule "cnf_rightDist" (formula "4") (term "0,0,0"))
(rule "commute_or" (formula "4") (term "1,0,0,0"))
(rule "arrayLengthNotNegative" (formula "5") (term "0"))
(rule "arrayLengthIsAnInt" (formula "5") (term "0"))
(builtin "One Step Simplification" (formula "5"))
(rule "true_left" (formula "5"))
(builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_generated_increasing,result,exc,heapAfter_generated_increasing,anon_heap_generated_increasing") (contract "Generated_IntegerList[Generated_IntegerList::generated_increasing([I,[I)].JML normal_behavior operation contract.0"))
(branch "Post (generated_increasing)"
   (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaAddInt" (formula "10") (term "0,2,1,1,0,1,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0,1,0,0,1,1"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "14"))
   (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "15"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0"))
   (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,0"))
   (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
   (rule "assignment" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "applyEq" (formula "12") (term "0,0,1,0,0,1,0,0") (ifseqformula "6"))
   (rule "applyEq" (formula "12") (term "1,1,1,0,1,0") (ifseqformula "6"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "13") (term "0"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_notAnd" (formula "13") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
   (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
   (rule "mul_literals" (formula "13") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
   (rule "emptyModality" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")))
   (rule "allRight" (formula "17") (inst "sk=k_0"))
   (rule "orRight" (formula "17"))
   (rule "orRight" (formula "17"))
   (rule "inEqSimp_leqRight" (formula "17"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_geqRight" (formula "18"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "8"))
   (rule "applyEq" (formula "19") (term "1,1,1,0") (ifseqformula "8"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "pullOutSelect" (formula "19") (term "1,1,0") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "10")))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "10")))
   (rule "applyEqReverse" (formula "20") (term "1,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "nnf_ex2all" (formula "19"))
   (rule "nnf_notAnd" (formula "1") (term "0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0"))
   (rule "commute_and_2" (formula "7") (term "0,0"))
   (rule "ex_pull_out3" (formula "15") (term "0"))
   (rule "cnf_rightDist" (formula "15") (term "0,0"))
   (rule "commute_or" (formula "15") (term "1,0,0"))
   (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
   (rule "commute_or" (formula "15") (term "1,0,0,0"))
   (rule "cut_direct" (formula "14") (term "0"))
   (branch "CUT: result.<created> = TRUE TRUE"
      (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "commute_and_2" (formula "15") (term "0,0"))
      (rule "commute_and" (formula "7") (term "0,0,0"))
      (rule "commute_and" (formula "15") (term "0,0,0"))
      (rule "allLeft" (formula "7") (inst "t=z_0"))
      (rule "exLeft" (formula "7") (inst "sk=z_5"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "9") (term "1"))
      (rule "polySimp_addComm1" (formula "9") (term "0,1"))
      (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "6"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1"))
      (rule "mul_literals" (formula "9") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "7") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
      (rule "leq_literals" (formula "8") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "9") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0"))
      (rule "leq_literals" (formula "7") (term "0,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "8") (term "0,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
      (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,0"))
      (rule "leq_literals" (formula "9") (term "0,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "allLeft" (formula "10") (inst "t=k_0"))
      (rule "exLeft" (formula "10") (inst "sk=z_6"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
      (rule "polySimp_addComm1" (formula "12") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1"))
      (rule "mul_literals" (formula "12") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "10") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
      (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
      (rule "leq_literals" (formula "11") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0"))
      (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,1,0"))
      (rule "leq_literals" (formula "12") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0"))
      (rule "leq_literals" (formula "10") (term "0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "11") (term "0,0"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "12") (term "0,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "allLeft" (formula "21") (inst "t=z_0"))
      (rule "exLeft" (formula "21") (inst "sk=z_7"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "23") (term "1"))
      (rule "polySimp_addComm1" (formula "23") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1"))
      (rule "mul_literals" (formula "23") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "21") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0"))
      (rule "add_literals" (formula "22") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "22") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "22") (term "0,0,1,0"))
      (rule "leq_literals" (formula "22") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "22"))
      (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0"))
      (rule "add_literals" (formula "23") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "23") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "23") (term "0,0,1,0"))
      (rule "leq_literals" (formula "23") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "23"))
      (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "21") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0"))
      (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "21") (term "0,0,0"))
      (rule "leq_literals" (formula "21") (term "0,0"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "22") (term "0,0"))
      (builtin "One Step Simplification" (formula "22"))
      (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "23") (term "0,0"))
      (builtin "One Step Simplification" (formula "23"))
      (rule "pullOutSelect" (formula "21") (term "1") (inst "selectSK=arr_8"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "28")) (ifInst ""  (formula "20")))
      (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "29")) (ifInst ""  (formula "16")))
      (rule "applyEq" (formula "21") (term "2,0") (ifseqformula "6"))
      (rule "elementOfSetMinus" (formula "22") (term "0,0"))
      (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "28")) (ifInst ""  (formula "20")))
      (rule "applyEqReverse" (formula "21") (term "1") (ifseqformula "22"))
      (rule "hideAuxiliaryEq" (formula "22"))
      (rule "elementOfSetMinus" (formula "21") (term "0,0"))
      (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "28")) (ifInst ""  (formula "16")))
      (rule "eqSymm" (formula "21"))
      (rule "allLeft" (formula "24") (inst "t=k_0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "24") (term "1,1,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "24") (term "1,1,0,0,0"))
      (rule "exLeft" (formula "24") (inst "sk=z_8"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
      (rule "polySimp_addComm1" (formula "26") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1"))
      (rule "mul_literals" (formula "26") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "25") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "25"))
      (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1,0"))
      (rule "add_literals" (formula "26") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "26") (term "0,0,1,0"))
      (rule "leq_literals" (formula "26") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0"))
      (rule "add_literals" (formula "24") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "24") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "24") (term "0,0,1,0"))
      (rule "leq_literals" (formula "24") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0"))
      (rule "add_literals" (formula "25") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "25") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "25") (term "0,0,0"))
      (rule "leq_literals" (formula "25") (term "0,0"))
      (builtin "One Step Simplification" (formula "25"))
      (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "24") (term "0,0"))
      (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "26") (term "0,0"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=arr_9"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "31")) (ifInst ""  (formula "20")))
      (rule "eqSymm" (formula "25"))
      (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "25"))
      (rule "hideAuxiliaryEq" (formula "25"))
      (rule "elementOfSetMinus" (formula "24") (term "0,0"))
      (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")) (ifInst ""  (formula "20")))
      (rule "arrayLengthIsAnInt" (formula "28") (term "1,1,1,0,0"))
      (builtin "One Step Simplification" (formula "28"))
      (rule "true_left" (formula "28"))
      (rule "arrayLengthNotNegative" (formula "28") (term "1,1,1,0,0"))
      (rule "allLeft" (formula "13") (inst "t=z_5"))
      (rule "exLeft" (formula "13") (inst "sk=z_9"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "15") (term "1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1"))
      (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "7"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0") (ifseqformula "8"))
      (rule "qeq_literals" (formula "15") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0") (ifseqformula "8"))
      (rule "qeq_literals" (formula "14") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0") (ifseqformula "8"))
      (rule "qeq_literals" (formula "13") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0"))
      (rule "leq_literals" (formula "13") (term "0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
      (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "15") (term "0,0,0"))
      (rule "leq_literals" (formula "15") (term "0,0"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
      (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0"))
      (rule "leq_literals" (formula "14") (term "0,0"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "allLeft" (formula "30") (inst "t=z_5"))
      (rule "exLeft" (formula "30") (inst "sk=z_10"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "30"))
      (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "31") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "32") (term "1"))
      (rule "polySimp_addComm1" (formula "32") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1"))
      (rule "polySimp_mulComm0" (formula "32") (term "1,1"))
      (rule "polySimp_rightDist" (formula "32") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1"))
      (rule "mul_literals" (formula "32") (term "0,1,1"))
      (rule "polySimp_elimOne" (formula "32") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0") (ifseqformula "8"))
      (rule "qeq_literals" (formula "31") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "31"))
      (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "8"))
      (rule "qeq_literals" (formula "32") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "32"))
      (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "8"))
      (rule "qeq_literals" (formula "30") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "30"))
      (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq1" (formula "31") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0"))
      (rule "add_literals" (formula "31") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "31") (term "0,0,0"))
      (rule "leq_literals" (formula "31") (term "0,0"))
      (builtin "One Step Simplification" (formula "31"))
      (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0"))
      (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "32") (term "0,0,0"))
      (rule "leq_literals" (formula "32") (term "0,0"))
      (builtin "One Step Simplification" (formula "32"))
      (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0"))
      (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "30") (term "0,0,0"))
      (rule "leq_literals" (formula "30") (term "0,0"))
      (builtin "One Step Simplification" (formula "30"))
      (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_10"))
      (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "38")) (ifInst ""  (formula "23")))
      (rule "eqSymm" (formula "31"))
      (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "39")) (ifInst ""  (formula "19")))
      (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "7"))
      (rule "elementOfSetMinus" (formula "30") (term "0,0"))
      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "38")) (ifInst ""  (formula "23")))
      (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "30"))
      (rule "hideAuxiliaryEq" (formula "30"))
      (rule "elementOfSetMinus" (formula "30") (term "0,0"))
      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "38")) (ifInst ""  (formula "19")))
      (rule "eqSymm" (formula "30"))
      (rule "allLeft" (formula "35") (inst "t=z_0"))
      (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
      (rule "polySimp_addComm1" (formula "35") (term "0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "35") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "35") (term "1,1,0"))
      (rule "mul_literals" (formula "35") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0"))
      (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0"))
      (rule "inEqSimp_contradInEq1" (formula "35") (term "0,0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "35") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "35"))
      (rule "pullOutSelect" (formula "35") (term "0,1") (inst "selectSK=arr_11"))
      (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "39")) (ifInst ""  (formula "23")))
      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
      (rule "elementOfSetMinus" (formula "35") (term "0,0"))
      (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "39")) (ifInst ""  (formula "23")))
      (rule "applyEqReverse" (formula "36") (term "1,1") (ifseqformula "35"))
      (rule "hideAuxiliaryEq" (formula "35"))
      (rule "pullOutSelect" (formula "35") (term "0,1") (inst "selectSK=arr_12"))
      (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "39")) (ifInst ""  (formula "23")))
      (rule "inEqSimp_commuteLeq" (formula "36") (term "1"))
      (rule "elementOfSetMinus" (formula "35") (term "0,0"))
      (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "39")) (ifInst ""  (formula "23")))
      (rule "applyEqReverse" (formula "36") (term "1,1") (ifseqformula "35"))
      (rule "hideAuxiliaryEq" (formula "35"))
      (rule "allLeft" (formula "36") (inst "t=k_0"))
      (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
      (rule "polySimp_addComm1" (formula "36") (term "0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "36") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "36") (term "1,1,0"))
      (rule "mul_literals" (formula "36") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0"))
      (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0"))
      (rule "inEqSimp_contradInEq1" (formula "36") (term "0,0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "36") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "36"))
      (rule "pullOutSelect" (formula "36") (term "1,1") (inst "selectSK=arr_13"))
      (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "40")) (ifInst ""  (formula "23")))
      (rule "elementOfSetMinus" (formula "36") (term "0,0"))
      (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "40")) (ifInst ""  (formula "23")))
      (rule "applyEqReverse" (formula "37") (term "1,1") (ifseqformula "36"))
      (rule "hideAuxiliaryEq" (formula "36"))
      (rule "pullOutSelect" (formula "36") (term "0,1") (inst "selectSK=arr_14"))
      (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "40")) (ifInst ""  (formula "23")))
      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
      (rule "elementOfSetMinus" (formula "36") (term "0,0"))
      (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "40")) (ifInst ""  (formula "23")))
      (rule "applyEqReverse" (formula "37") (term "1,1") (ifseqformula "36"))
      (rule "hideAuxiliaryEq" (formula "36"))
      (rule "inEqSimp_commuteLeq" (formula "36") (term "1"))
      (rule "allLeft" (formula "1") (inst "t=z_0"))
      (rule "replaceKnownSelect_taclet00_12" (formula "1") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_13" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "5"))
      (rule "qeq_literals" (formula "1") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "allLeft" (formula "2") (inst "t=k_0"))
      (rule "replaceKnownSelect_taclet00_14" (formula "2") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_15" (formula "2") (term "0,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
      (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "5"))
      (rule "qeq_literals" (formula "2") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "allLeft" (formula "3") (inst "t=z_8"))
      (rule "replaceKnownSelect_taclet00_5" (formula "3") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_6" (formula "3") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "32"))
      (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
      (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "3") (term "0,0,1"))
      (rule "leq_literals" (formula "3") (term "0,1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "31"))
      (rule "qeq_literals" (formula "3") (term "0"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
   (branch "CUT: result.<created> = TRUE FALSE"
      (builtin "One Step Simplification" (formula "14"))
      (rule "commute_and_2" (formula "15") (term "0,0"))
      (rule "commute_and" (formula "7") (term "0,0,0"))
      (rule "allLeft" (formula "15") (inst "t=z_0"))
      (rule "exLeft" (formula "15") (inst "sk=z_1"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "17") (term "1"))
      (rule "polySimp_addComm1" (formula "17") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "16") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
      (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "17") (term "0,0,1,0"))
      (rule "leq_literals" (formula "17") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0"))
      (rule "add_literals" (formula "15") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "15") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "15") (term "0,0,1,0"))
      (rule "leq_literals" (formula "15") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0"))
      (rule "add_literals" (formula "16") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0"))
      (rule "leq_literals" (formula "16") (term "0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "17") (term "0,0"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "15") (term "0,0"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=arr_1"))
      (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "23")) (ifInst ""  (formula "22")))
      (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "16"))
      (rule "hideAuxiliaryEq" (formula "16"))
      (rule "eqSymm" (formula "16"))
      (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=arr_2"))
      (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "24")) (ifInst ""  (formula "10")))
      (rule "eqSymm" (formula "17"))
      (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "17"))
      (rule "hideAuxiliaryEq" (formula "17"))
      (rule "applyEq" (formula "16") (term "2,0") (ifseqformula "6"))
      (rule "elementOfSetMinus" (formula "16") (term "0,0"))
      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "23")) (ifInst ""  (formula "10")))
      (rule "eqSymm" (formula "16"))
      (rule "allLeft" (formula "18") (inst "t=k_0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "18") (term "1,1,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "18") (term "1,1,1,0,0"))
      (rule "exLeft" (formula "18") (inst "sk=z_2"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
      (rule "polySimp_addComm1" (formula "20") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,1"))
      (rule "mul_literals" (formula "20") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "19") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
      (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
      (rule "leq_literals" (formula "20") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
      (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
      (rule "leq_literals" (formula "18") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0"))
      (rule "add_literals" (formula "19") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "19") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "19") (term "0,0,0"))
      (rule "leq_literals" (formula "19") (term "0,0"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "20") (term "0,0"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "18") (term "0,0"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=arr_3"))
      (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "26")) (ifInst ""  (formula "25")))
      (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "19"))
      (rule "hideAuxiliaryEq" (formula "19"))
      (rule "commute_and" (formula "21") (term "0,0,0"))
      (rule "allLeft" (formula "7") (inst "t=z_0"))
      (rule "exLeft" (formula "7") (inst "sk=z_3"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "9") (term "1"))
      (rule "polySimp_addComm1" (formula "9") (term "0,1"))
      (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "6"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1"))
      (rule "mul_literals" (formula "9") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "7") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "9") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "8") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0"))
      (rule "leq_literals" (formula "7") (term "0,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
      (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,0"))
      (rule "leq_literals" (formula "9") (term "0,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0"))
      (rule "leq_literals" (formula "8") (term "0,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "allLeft" (formula "10") (inst "t=k_0"))
      (rule "exLeft" (formula "10") (inst "sk=z_4"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
      (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
      (rule "polySimp_addComm1" (formula "12") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1"))
      (rule "mul_literals" (formula "12") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "10") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "12") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "11") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0"))
      (rule "leq_literals" (formula "10") (term "0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
      (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0"))
      (rule "leq_literals" (formula "11") (term "0,0"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0"))
      (rule "add_literals" (formula "12") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0"))
      (rule "leq_literals" (formula "12") (term "0,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "arrayLengthIsAnInt" (formula "28") (term "1,1,1,0,0"))
      (builtin "One Step Simplification" (formula "28"))
      (rule "true_left" (formula "28"))
      (rule "arrayLengthNotNegative" (formula "28") (term "1,1,1,0,0"))
      (rule "allLeft" (formula "1") (inst "t=z_1"))
      (rule "replaceKnownSelect_taclet10_2" (formula "1") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_3" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
      (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "23"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "22"))
      (rule "qeq_literals" (formula "1") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "24"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "allLeft" (formula "29") (inst "t=z_0"))
      (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
      (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "29") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "29") (term "1,1,0"))
      (rule "mul_literals" (formula "29") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0"))
      (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0"))
      (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "29") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "29"))
      (rule "pullOutSelect" (formula "29") (term "0,1") (inst "selectSK=arr_4"))
      (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "35")) (ifInst ""  (formula "34")))
      (rule "applyEqReverse" (formula "30") (term "0,1") (ifseqformula "29"))
      (rule "hideAuxiliaryEq" (formula "29"))
      (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
      (rule "pullOutSelect" (formula "29") (term "0,1") (inst "selectSK=arr_5"))
      (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "35")) (ifInst ""  (formula "34")))
      (rule "applyEqReverse" (formula "30") (term "0,1") (ifseqformula "29"))
      (rule "hideAuxiliaryEq" (formula "29"))
      (rule "inEqSimp_commuteLeq" (formula "29") (term "1"))
      (rule "allLeft" (formula "30") (inst "t=k_0"))
      (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
      (rule "polySimp_addComm1" (formula "30") (term "0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "30") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "30") (term "1,1,0"))
      (rule "mul_literals" (formula "30") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0"))
      (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0"))
      (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "30") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "30"))
      (rule "pullOutSelect" (formula "30") (term "1,1") (inst "selectSK=arr_6"))
      (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "36")) (ifInst ""  (formula "35")))
      (rule "applyEqReverse" (formula "31") (term "1,1") (ifseqformula "30"))
      (rule "hideAuxiliaryEq" (formula "30"))
      (rule "pullOutSelect" (formula "30") (term "0,1") (inst "selectSK=arr_7"))
      (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "19"))
      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "36")) (ifInst ""  (formula "35")))
      (rule "applyEqReverse" (formula "31") (term "0,1") (ifseqformula "30"))
      (rule "hideAuxiliaryEq" (formula "30"))
      (rule "allLeft" (formula "1") (inst "t=z_0"))
      (rule "replaceKnownSelect_taclet10_10" (formula "1") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "5"))
      (rule "qeq_literals" (formula "1") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "allLeft" (formula "2") (inst "t=k_0"))
      (rule "replaceKnownSelect_taclet10_12" (formula "2") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_13" (formula "2") (term "0,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
      (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "5"))
      (rule "qeq_literals" (formula "2") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "allLeft" (formula "3") (inst "t=z_2"))
      (rule "replaceKnownSelect_taclet10_6" (formula "3") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_7" (formula "3") (term "0,0,1"))
      (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "28"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "27"))
      (rule "qeq_literals" (formula "3") (term "0,0"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "29"))
      (rule "andLeft" (formula "3"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "1,1,0"))
      (rule "times_zero_1" (formula "3") (term "1,0"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "leq_literals" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
)
(branch "Exceptional Post (generated_increasing)"
   (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaAddInt" (formula "10") (term "0,2,1,1,0,1,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0,1,0,0,1,1"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "11"))
   (rule "close" (formula "15") (ifseqformula "14"))
)
(branch "Pre (generated_increasing)"
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "7")))
   (rule "eqSymm" (formula "10") (term "0,0"))
   (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "6"))
   (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "orRight" (formula "10"))
   (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "6"))
   (rule "close" (formula "11") (ifseqformula "7"))
)
)

}
