\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 27 14:15:05 CEST 2021
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=20000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "C:/Users/tbord/Documents/Forschung/VarCorCxFeatureIDE/IntegerList";\include "helper.key";\programVariables {int[] data; int i; int j; int tmp; int[] old_data;  Heap heapAtPre;}\problem {
     \forall int k;
       (   leq(Z(0(#)), k) & lt(k, i)
        -> \forall int m;
             (   lt(k, m) & lt(m, length(data))
              -> geq(int::select(heap, data, arr(k)),
                     int::select(heap, data, arr(m)))))
   & !lt(i, length(data))
   & !data = null
   & geq(i, Z(0(#)))
   & leq(i, length(data))
   & leq(j, sub(length(data), Z(2(#))))
   & geq(j, sub(i, Z(1(#))))
-> {heapAtPre:=heap}
     (  \forall int k;
          (   leq(Z(0(#)), k) & lt(k, length(old_data))
           -> \exists int z;
                (  leq(Z(0(#)), z)
                 & lt(z, length(data))
                 &   int::select(heap, data, arr(z))
                   = int::select(heap,
                                 old_data,
                                 arr(k))))
      & \forall int k;
          (     leq(Z(0(#)), k)
              & lt(k, sub(length(data), Z(1(#))))
           -> geq(int::select(heap, data, arr(k)),
                  int::select(heap,
                              data,
                              arr(add(k, Z(1(#))))))))

}

\proof {
(keyLog "0" (keyUser "tbord" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "41")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,1,1,0,0,1"))
(rule "polySimp_elimSub" (formula "5") (term "1"))
(rule "mul_literals" (formula "5") (term "1,1"))
(rule "polySimp_elimSub" (formula "4") (term "1"))
(rule "mul_literals" (formula "4") (term "1,1"))
(rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "1,1,0,0,1"))
(rule "polySimp_addComm0" (formula "5") (term "1"))
(rule "polySimp_addComm0" (formula "4") (term "1"))
(rule "inEqSimp_ltRight" (formula "6"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0"))
(rule "polySimp_addComm0" (formula "1") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
(rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,1,0"))
(rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,1"))
(rule "inEqSimp_homoInEq0" (formula "5"))
(rule "polySimp_addComm1" (formula "5") (term "0"))
(rule "inEqSimp_sepNegMonomial1" (formula "1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0"))
(rule "polySimp_elimOne" (formula "1") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1"))
(rule "polySimp_rightDist" (formula "5") (term "1"))
(rule "mul_literals" (formula "5") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1"))
(rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
(rule "applyEq" (formula "9") (term "1,1,1,0,0,1,0,0") (ifseqformula "4"))
(rule "applyEq" (formula "9") (term "1,1,1,0,0,1") (ifseqformula "4"))
(rule "applyEq" (formula "2") (term "1,1,1,0,0,1,0") (ifseqformula "4"))
(rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
(rule "inEqSimp_homoInEq0" (formula "1"))
(rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
(rule "add_literals" (formula "1") (term "1,0"))
(rule "times_zero_1" (formula "1") (term "0"))
(rule "qeq_literals" (formula "1"))
(rule "true_left" (formula "1"))
(rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
(rule "inEqSimp_homoInEq1" (formula "4"))
(rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
(rule "add_literals" (formula "4") (term "1,0"))
(rule "times_zero_1" (formula "4") (term "0"))
(rule "leq_literals" (formula "4"))
(rule "true_left" (formula "4"))
(rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
(rule "inEqSimp_homoInEq1" (formula "4"))
(rule "polySimp_addComm1" (formula "4") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4"))
(rule "polySimp_mulComm0" (formula "4") (term "1"))
(rule "polySimp_rightDist" (formula "4") (term "1"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
(rule "mul_literals" (formula "4") (term "0,1"))
(rule "polySimp_elimOne" (formula "4") (term "1,1"))
(rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "5"))
(rule "andLeft" (formula "4"))
(rule "inEqSimp_homoInEq1" (formula "4"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,0"))
(rule "mul_literals" (formula "4") (term "0,1,0"))
(rule "polySimp_addAssoc" (formula "4") (term "0"))
(rule "polySimp_addComm1" (formula "4") (term "0,0"))
(rule "add_literals" (formula "4") (term "0,0,0"))
(rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
(rule "add_literals" (formula "4") (term "1,1,0"))
(rule "times_zero_1" (formula "4") (term "1,0"))
(rule "add_zero_right" (formula "4") (term "0"))
(rule "leq_literals" (formula "4"))
(rule "closeFalse" (formula "4"))
)

}
