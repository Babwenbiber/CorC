/*
 * generated by Xtext 2.25.0
 */
package de.tu_bs.cs.isf.cbc.textual.tool.serializer;

import com.google.inject.Inject;
import de.tu_bs.cs.isf.cbc.cbcmodel.AbstractStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.Addition;
import de.tu_bs.cs.isf.cbc.cbcmodel.And;
import de.tu_bs.cs.isf.cbc.cbcmodel.ArrayElement;
import de.tu_bs.cs.isf.cbc.cbcmodel.BlockStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.CbCFormula;
import de.tu_bs.cs.isf.cbc.cbcmodel.CbCProblem;
import de.tu_bs.cs.isf.cbc.cbcmodel.CbcmodelPackage;
import de.tu_bs.cs.isf.cbc.cbcmodel.CompositionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.Condition;
import de.tu_bs.cs.isf.cbc.cbcmodel.Division;
import de.tu_bs.cs.isf.cbc.cbcmodel.Equal;
import de.tu_bs.cs.isf.cbc.cbcmodel.Expression;
import de.tu_bs.cs.isf.cbc.cbcmodel.FunctionCall;
import de.tu_bs.cs.isf.cbc.cbcmodel.GlobalConditions;
import de.tu_bs.cs.isf.cbc.cbcmodel.Greater;
import de.tu_bs.cs.isf.cbc.cbcmodel.GreaterEqual;
import de.tu_bs.cs.isf.cbc.cbcmodel.Impl;
import de.tu_bs.cs.isf.cbc.cbcmodel.InlineBlockStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.JMLAnnotation;
import de.tu_bs.cs.isf.cbc.cbcmodel.JavaStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.JavaVariable;
import de.tu_bs.cs.isf.cbc.cbcmodel.JavaVariables;
import de.tu_bs.cs.isf.cbc.cbcmodel.Lower;
import de.tu_bs.cs.isf.cbc.cbcmodel.LowerEqual;
import de.tu_bs.cs.isf.cbc.cbcmodel.MethodStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.Modulo;
import de.tu_bs.cs.isf.cbc.cbcmodel.Multiplication;
import de.tu_bs.cs.isf.cbc.cbcmodel.NotEqual;
import de.tu_bs.cs.isf.cbc.cbcmodel.Or;
import de.tu_bs.cs.isf.cbc.cbcmodel.Qualifier;
import de.tu_bs.cs.isf.cbc.cbcmodel.Rename;
import de.tu_bs.cs.isf.cbc.cbcmodel.Renaming;
import de.tu_bs.cs.isf.cbc.cbcmodel.ReturnStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.SelectionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.SmallRepetitionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.StrengthWeakStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.Subtraction;
import de.tu_bs.cs.isf.cbc.cbcmodel.VariableOrMethodName;
import de.tu_bs.cs.isf.cbc.cbcmodel.Variant;
import de.tu_bs.cs.isf.cbc.textual.tool.services.DslGrammarAccess;
import java.util.Set;
import jbase.jbase.JbasePackage;
import jbase.jbase.XJAdditionalXVariableDeclaration;
import jbase.jbase.XJArrayAccessExpression;
import jbase.jbase.XJArrayConstructorCall;
import jbase.jbase.XJArrayDimension;
import jbase.jbase.XJArrayLiteral;
import jbase.jbase.XJAssignment;
import jbase.jbase.XJBreakStatement;
import jbase.jbase.XJCharLiteral;
import jbase.jbase.XJClassObject;
import jbase.jbase.XJConditionalExpression;
import jbase.jbase.XJConstructorCall;
import jbase.jbase.XJContinueStatement;
import jbase.jbase.XJJvmFormalParameter;
import jbase.jbase.XJPrefixOperation;
import jbase.jbase.XJSemicolonStatement;
import jbase.jbase.XJSwitchStatements;
import jbase.jbase.XJTryWithResourcesStatement;
import jbase.jbase.XJTryWithResourcesVariableDeclaration;
import jbase.jbase.XJVariableDeclaration;
import jbase.serializer.JbaseSemanticSequencer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationElementValuePair;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationsPackage;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class DslSemanticSequencer extends JbaseSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CbcmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CbcmodelPackage.ABSTRACT_STATEMENT:
				if (rule == grammarAccess.getAbstractStatement_ImplRule()) {
					sequence_AbstractStatement_Impl(context, (AbstractStatement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAbstractStatementRule()) {
					sequence_AbstractStatement_Impl_SkipStatement(context, (AbstractStatement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSkipStatementRule()) {
					sequence_SkipStatement(context, (AbstractStatement) semanticObject); 
					return; 
				}
				else break;
			case CbcmodelPackage.ADDITION:
				sequence_AddMathOperation(context, (Addition) semanticObject); 
				return; 
			case CbcmodelPackage.AND:
				sequence_Concat(context, (And) semanticObject); 
				return; 
			case CbcmodelPackage.ARRAY_ELEMENT:
				sequence_PrimaryExpression(context, (ArrayElement) semanticObject); 
				return; 
			case CbcmodelPackage.BLOCK_STATEMENT:
				sequence_BlockStatement(context, (BlockStatement) semanticObject); 
				return; 
			case CbcmodelPackage.CB_CFORMULA:
				sequence_CbCFormula(context, (CbCFormula) semanticObject); 
				return; 
			case CbcmodelPackage.CB_CPROBLEM:
				sequence_CbCProblem(context, (CbCProblem) semanticObject); 
				return; 
			case CbcmodelPackage.COMPOSITION_STATEMENT:
				sequence_CompositionStatement(context, (CompositionStatement) semanticObject); 
				return; 
			case CbcmodelPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case CbcmodelPackage.DIVISION:
				sequence_MultiMathOperation(context, (Division) semanticObject); 
				return; 
			case CbcmodelPackage.EQUAL:
				sequence_Relation(context, (Equal) semanticObject); 
				return; 
			case CbcmodelPackage.EXPRESSION:
				sequence_Exists_Foreach_PrimaryExpression(context, (Expression) semanticObject); 
				return; 
			case CbcmodelPackage.FUNCTION_CALL:
				sequence_PrimaryExpression(context, (FunctionCall) semanticObject); 
				return; 
			case CbcmodelPackage.GLOBAL_CONDITIONS:
				sequence_GlobalConditions(context, (GlobalConditions) semanticObject); 
				return; 
			case CbcmodelPackage.GREATER:
				sequence_Relation(context, (Greater) semanticObject); 
				return; 
			case CbcmodelPackage.GREATER_EQUAL:
				sequence_Relation(context, (GreaterEqual) semanticObject); 
				return; 
			case CbcmodelPackage.IMPL:
				sequence_Implication(context, (Impl) semanticObject); 
				return; 
			case CbcmodelPackage.INLINE_BLOCK_STATEMENT:
				sequence_InlineBlockStatement(context, (InlineBlockStatement) semanticObject); 
				return; 
			case CbcmodelPackage.JML_ANNOTATION:
				sequence_JMLAnnotation(context, (JMLAnnotation) semanticObject); 
				return; 
			case CbcmodelPackage.JAVA_STATEMENT:
				sequence_JavaStatement(context, (JavaStatement) semanticObject); 
				return; 
			case CbcmodelPackage.JAVA_VARIABLE:
				sequence_JavaVariable(context, (JavaVariable) semanticObject); 
				return; 
			case CbcmodelPackage.JAVA_VARIABLES:
				sequence_JavaVariables(context, (JavaVariables) semanticObject); 
				return; 
			case CbcmodelPackage.LOWER:
				sequence_Relation(context, (Lower) semanticObject); 
				return; 
			case CbcmodelPackage.LOWER_EQUAL:
				sequence_Relation(context, (LowerEqual) semanticObject); 
				return; 
			case CbcmodelPackage.METHOD_STATEMENT:
				sequence_MethodStatement(context, (MethodStatement) semanticObject); 
				return; 
			case CbcmodelPackage.MODULO:
				sequence_MultiMathOperation(context, (Modulo) semanticObject); 
				return; 
			case CbcmodelPackage.MULTIPLICATION:
				sequence_MultiMathOperation(context, (Multiplication) semanticObject); 
				return; 
			case CbcmodelPackage.NOT_EQUAL:
				sequence_Relation(context, (NotEqual) semanticObject); 
				return; 
			case CbcmodelPackage.OR:
				sequence_Concat(context, (Or) semanticObject); 
				return; 
			case CbcmodelPackage.QUALIFIER:
				sequence_QualifiedExpression(context, (Qualifier) semanticObject); 
				return; 
			case CbcmodelPackage.RENAME:
				sequence_Rename(context, (Rename) semanticObject); 
				return; 
			case CbcmodelPackage.RENAMING:
				sequence_Renaming(context, (Renaming) semanticObject); 
				return; 
			case CbcmodelPackage.RETURN_STATEMENT:
				sequence_ReturnStatement(context, (ReturnStatement) semanticObject); 
				return; 
			case CbcmodelPackage.SELECTION_STATEMENT:
				sequence_SelectionStatement(context, (SelectionStatement) semanticObject); 
				return; 
			case CbcmodelPackage.SMALL_REPETITION_STATEMENT:
				sequence_SmallRepetitionStatement(context, (SmallRepetitionStatement) semanticObject); 
				return; 
			case CbcmodelPackage.STRENGTH_WEAK_STATEMENT:
				sequence_StrengthWeakStatement(context, (StrengthWeakStatement) semanticObject); 
				return; 
			case CbcmodelPackage.SUBTRACTION:
				sequence_AddMathOperation(context, (Subtraction) semanticObject); 
				return; 
			case CbcmodelPackage.VARIABLE_OR_METHOD_NAME:
				sequence_VariableOrMethodName(context, (VariableOrMethodName) semanticObject); 
				return; 
			case CbcmodelPackage.VARIANT:
				sequence_Variant(context, (Variant) semanticObject); 
				return; 
			}
		else if (epackage == JbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JbasePackage.XJ_ADDITIONAL_XVARIABLE_DECLARATION:
				sequence_XJAdditionalXVariableDeclaration(context, (XJAdditionalXVariableDeclaration) semanticObject); 
				return; 
			case JbasePackage.XJ_ARRAY_ACCESS_EXPRESSION:
				if (rule == grammarAccess.getXJFeatureCallWithArrayAccessRule()) {
					sequence_XJFeatureCallWithArrayAccess(context, (XJArrayAccessExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXJConditionalExpressionIfAction_2_1_0_0_0_0()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0_0()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_1_0_0_0()
						|| action == grammarAccess.getXPostfixOperationAccess().getXJArrayAccessExpressionArrayAction_1_1_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXJClassObjectTypeExpressionAction_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseInclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseInclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseExclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseExclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseAndExpressionRule()
						|| action == grammarAccess.getXBitwiseAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()
						|| rule == grammarAccess.getXAnnotationElementValueRule()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XJFeatureCallWithArrayAccess_XPostfixOperation(context, (XJArrayAccessExpression) semanticObject); 
					return; 
				}
				else break;
			case JbasePackage.XJ_ARRAY_CONSTRUCTOR_CALL:
				sequence_XJArrayConstructorCall(context, (XJArrayConstructorCall) semanticObject); 
				return; 
			case JbasePackage.XJ_ARRAY_DIMENSION:
				sequence_XJArrayDimension(context, (XJArrayDimension) semanticObject); 
				return; 
			case JbasePackage.XJ_ARRAY_LITERAL:
				if (rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()) {
					sequence_XAnnotationElementValueOrCommaList_XJArrayLiteral(context, (XJArrayLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXAnnotationElementValueRule()) {
					sequence_XAnnotationElementValue_XJArrayLiteral(context, (XJArrayLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXJConditionalExpressionIfAction_2_1_0_0_0_0()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0_0()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_1_0_0_0()
						|| action == grammarAccess.getXPostfixOperationAccess().getXJArrayAccessExpressionArrayAction_1_1_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXJClassObjectTypeExpressionAction_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXJArrayLiteralRule()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseInclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseInclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseExclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseExclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseAndExpressionRule()
						|| action == grammarAccess.getXBitwiseAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XJArrayLiteral(context, (XJArrayLiteral) semanticObject); 
					return; 
				}
				else break;
			case JbasePackage.XJ_ASSIGNMENT:
				sequence_XAssignment(context, (XJAssignment) semanticObject); 
				return; 
			case JbasePackage.XJ_BREAK_STATEMENT:
				sequence_XJBranchingStatement(context, (XJBreakStatement) semanticObject); 
				return; 
			case JbasePackage.XJ_CHAR_LITERAL:
				sequence_XCharLiteral(context, (XJCharLiteral) semanticObject); 
				return; 
			case JbasePackage.XJ_CLASS_OBJECT:
				sequence_XMemberFeatureCall(context, (XJClassObject) semanticObject); 
				return; 
			case JbasePackage.XJ_CONDITIONAL_EXPRESSION:
				sequence_XAssignment(context, (XJConditionalExpression) semanticObject); 
				return; 
			case JbasePackage.XJ_CONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XJConstructorCall) semanticObject); 
				return; 
			case JbasePackage.XJ_CONTINUE_STATEMENT:
				sequence_XJBranchingStatement(context, (XJContinueStatement) semanticObject); 
				return; 
			case JbasePackage.XJ_JVM_FORMAL_PARAMETER:
				sequence_FullJvmFormalParameter(context, (XJJvmFormalParameter) semanticObject); 
				return; 
			case JbasePackage.XJ_PREFIX_OPERATION:
				sequence_XPostfixOperation(context, (XJPrefixOperation) semanticObject); 
				return; 
			case JbasePackage.XJ_SEMICOLON_STATEMENT:
				if (rule == grammarAccess.getXJEmptyStatementRule()) {
					sequence_XJEmptyStatement(context, (XJSemicolonStatement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXJStatementOrBlockRule()
						|| rule == grammarAccess.getXJSingleStatementRule()) {
					sequence_XJEmptyStatement_XJSemicolonStatement(context, (XJSemicolonStatement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXJSemicolonStatementRule()) {
					sequence_XJSemicolonStatement(context, (XJSemicolonStatement) semanticObject); 
					return; 
				}
				else break;
			case JbasePackage.XJ_SWITCH_STATEMENTS:
				sequence_XJSwitchStatements(context, (XJSwitchStatements) semanticObject); 
				return; 
			case JbasePackage.XJ_TRY_WITH_RESOURCES_STATEMENT:
				sequence_XJTryWithResourcesStatement(context, (XJTryWithResourcesStatement) semanticObject); 
				return; 
			case JbasePackage.XJ_TRY_WITH_RESOURCES_VARIABLE_DECLARATION:
				sequence_XJTryWithResourcesVariableDeclaration(context, (XJTryWithResourcesVariableDeclaration) semanticObject); 
				return; 
			case JbasePackage.XJ_VARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XJVariableDeclaration) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XAnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XAnnotationsPackage.XANNOTATION:
				sequence_XAnnotation(context, (XAnnotation) semanticObject); 
				return; 
			case XAnnotationsPackage.XANNOTATION_ELEMENT_VALUE_PAIR:
				sequence_XAnnotationElementValuePair(context, (XAnnotationElementValuePair) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XBitwiseAndExpression_XBitwiseExclusiveOrExpression_XBitwiseInclusiveOrExpression_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXJStatementOrBlockRule()
						|| rule == grammarAccess.getXBlockExpressionRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXClosureRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AbstractStatement_Impl returns AbstractStatement
	 *
	 * Constraint:
	 *     name=CodeString
	 */
	protected void sequence_AbstractStatement_Impl(ISerializationContext context, AbstractStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.ABSTRACT_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.ABSTRACT_STATEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAbstractStatement_ImplAccess().getNameCodeStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractStatement returns AbstractStatement
	 *
	 * Constraint:
	 *     (name=CodeString | name=';')
	 */
	protected void sequence_AbstractStatement_Impl_SkipStatement(ISerializationContext context, AbstractStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Addition
	 *     Implication returns Addition
	 *     Implication.Impl_1_0_0 returns Addition
	 *     Concat returns Addition
	 *     Concat.And_1_0_0_0 returns Addition
	 *     Concat.Or_1_0_1_0 returns Addition
	 *     Foreach returns Addition
	 *     Exists returns Addition
	 *     Relation returns Addition
	 *     Relation.Lower_1_0_0_0 returns Addition
	 *     Relation.Greater_1_0_1_0 returns Addition
	 *     Relation.Equal_1_0_2_0 returns Addition
	 *     Relation.NotEqual_1_0_3_0 returns Addition
	 *     Relation.LowerEqual_1_0_4_0 returns Addition
	 *     Relation.GreaterEqual_1_0_5_0 returns Addition
	 *     MultiMathOperation returns Addition
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Addition
	 *     MultiMathOperation.Division_1_0_1_0 returns Addition
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Addition
	 *     AddMathOperation returns Addition
	 *     AddMathOperation.Addition_1_0_0_0 returns Addition
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Addition
	 *     QualifiedExpression returns Addition
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Addition
	 *     PrimaryExpression returns Addition
	 *
	 * Constraint:
	 *     (left=AddMathOperation_Addition_1_0_0_0 right=QualifiedExpression)
	 */
	protected void sequence_AddMathOperation(ISerializationContext context, Addition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.ADDITION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.ADDITION__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddMathOperationAccess().getAdditionLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAddMathOperationAccess().getRightQualifiedExpressionParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Subtraction
	 *     Implication returns Subtraction
	 *     Implication.Impl_1_0_0 returns Subtraction
	 *     Concat returns Subtraction
	 *     Concat.And_1_0_0_0 returns Subtraction
	 *     Concat.Or_1_0_1_0 returns Subtraction
	 *     Foreach returns Subtraction
	 *     Exists returns Subtraction
	 *     Relation returns Subtraction
	 *     Relation.Lower_1_0_0_0 returns Subtraction
	 *     Relation.Greater_1_0_1_0 returns Subtraction
	 *     Relation.Equal_1_0_2_0 returns Subtraction
	 *     Relation.NotEqual_1_0_3_0 returns Subtraction
	 *     Relation.LowerEqual_1_0_4_0 returns Subtraction
	 *     Relation.GreaterEqual_1_0_5_0 returns Subtraction
	 *     MultiMathOperation returns Subtraction
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Subtraction
	 *     MultiMathOperation.Division_1_0_1_0 returns Subtraction
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Subtraction
	 *     AddMathOperation returns Subtraction
	 *     AddMathOperation.Addition_1_0_0_0 returns Subtraction
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Subtraction
	 *     QualifiedExpression returns Subtraction
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Subtraction
	 *     PrimaryExpression returns Subtraction
	 *
	 * Constraint:
	 *     (left=AddMathOperation_Subtraction_1_0_1_0 right=QualifiedExpression)
	 */
	protected void sequence_AddMathOperation(ISerializationContext context, Subtraction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.SUBTRACTION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.SUBTRACTION__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddMathOperationAccess().getSubtractionLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAddMathOperationAccess().getRightQualifiedExpressionParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CbCProblem returns BlockStatement
	 *     BlockStatement returns BlockStatement
	 *
	 * Constraint:
	 *     (name=EString jmlAnnotation=JMLAnnotation? javaStatement=JavaStatement)
	 */
	protected void sequence_BlockStatement(ISerializationContext context, BlockStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CbCFormula returns CbCFormula
	 *
	 * Constraint:
	 *     (name=EString preCondition=Condition statement=AbstractStatement postCondition=Condition)
	 */
	protected void sequence_CbCFormula(ISerializationContext context, CbCFormula semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.CB_CFORMULA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.CB_CFORMULA__NAME));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.CB_CFORMULA__PRE_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.CB_CFORMULA__PRE_CONDITION));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.CB_CFORMULA__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.CB_CFORMULA__STATEMENT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.CB_CFORMULA__POST_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.CB_CFORMULA__POST_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCbCFormulaAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCbCFormulaAccess().getPreConditionConditionParserRuleCall_4_0(), semanticObject.getPreCondition());
		feeder.accept(grammarAccess.getCbCFormulaAccess().getStatementAbstractStatementParserRuleCall_7_0(), semanticObject.getStatement());
		feeder.accept(grammarAccess.getCbCFormulaAccess().getPostConditionConditionParserRuleCall_11_0(), semanticObject.getPostCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CbCProblem returns CbCProblem
	 *
	 * Constraint:
	 *     (cbcformula=CbCFormula | globalcondition=GlobalConditions | javaVariable=JavaVariables | renaming=Renaming)+
	 */
	protected void sequence_CbCProblem(ISerializationContext context, CbCProblem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractStatement returns CompositionStatement
	 *     CompositionStatement returns CompositionStatement
	 *
	 * Constraint:
	 *     (firstStatement=AbstractStatement intermediateCondition=Condition secondStatement=AbstractStatement)
	 */
	protected void sequence_CompositionStatement(ISerializationContext context, CompositionStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.COMPOSITION_STATEMENT__FIRST_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.COMPOSITION_STATEMENT__FIRST_STATEMENT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.COMPOSITION_STATEMENT__INTERMEDIATE_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.COMPOSITION_STATEMENT__INTERMEDIATE_CONDITION));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.COMPOSITION_STATEMENT__SECOND_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.COMPOSITION_STATEMENT__SECOND_STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompositionStatementAccess().getFirstStatementAbstractStatementParserRuleCall_2_0(), semanticObject.getFirstStatement());
		feeder.accept(grammarAccess.getCompositionStatementAccess().getIntermediateConditionConditionParserRuleCall_6_0(), semanticObject.getIntermediateCondition());
		feeder.accept(grammarAccess.getCompositionStatementAccess().getSecondStatementAbstractStatementParserRuleCall_9_0(), semanticObject.getSecondStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns And
	 *     Implication returns And
	 *     Implication.Impl_1_0_0 returns And
	 *     Concat returns And
	 *     Concat.And_1_0_0_0 returns And
	 *     Concat.Or_1_0_1_0 returns And
	 *     Foreach returns And
	 *     Exists returns And
	 *     Relation returns And
	 *     Relation.Lower_1_0_0_0 returns And
	 *     Relation.Greater_1_0_1_0 returns And
	 *     Relation.Equal_1_0_2_0 returns And
	 *     Relation.NotEqual_1_0_3_0 returns And
	 *     Relation.LowerEqual_1_0_4_0 returns And
	 *     Relation.GreaterEqual_1_0_5_0 returns And
	 *     MultiMathOperation returns And
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns And
	 *     MultiMathOperation.Division_1_0_1_0 returns And
	 *     MultiMathOperation.Modulo_1_0_2_0 returns And
	 *     AddMathOperation returns And
	 *     AddMathOperation.Addition_1_0_0_0 returns And
	 *     AddMathOperation.Subtraction_1_0_1_0 returns And
	 *     QualifiedExpression returns And
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns And
	 *     PrimaryExpression returns And
	 *
	 * Constraint:
	 *     (left=Concat_And_1_0_0_0 right=Foreach)
	 */
	protected void sequence_Concat(ISerializationContext context, And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcatAccess().getAndLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getConcatAccess().getRightForeachParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Or
	 *     Implication returns Or
	 *     Implication.Impl_1_0_0 returns Or
	 *     Concat returns Or
	 *     Concat.And_1_0_0_0 returns Or
	 *     Concat.Or_1_0_1_0 returns Or
	 *     Foreach returns Or
	 *     Exists returns Or
	 *     Relation returns Or
	 *     Relation.Lower_1_0_0_0 returns Or
	 *     Relation.Greater_1_0_1_0 returns Or
	 *     Relation.Equal_1_0_2_0 returns Or
	 *     Relation.NotEqual_1_0_3_0 returns Or
	 *     Relation.LowerEqual_1_0_4_0 returns Or
	 *     Relation.GreaterEqual_1_0_5_0 returns Or
	 *     MultiMathOperation returns Or
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Or
	 *     MultiMathOperation.Division_1_0_1_0 returns Or
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Or
	 *     AddMathOperation returns Or
	 *     AddMathOperation.Addition_1_0_0_0 returns Or
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Or
	 *     QualifiedExpression returns Or
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Or
	 *     PrimaryExpression returns Or
	 *
	 * Constraint:
	 *     (left=Concat_Or_1_0_1_0 right=Foreach)
	 */
	protected void sequence_Concat(ISerializationContext context, Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcatAccess().getOrLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getConcatAccess().getRightForeachParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     condition=Expression
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.CONDITION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.CONDITION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getConditionExpressionParserRuleCall_1_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *     Implication returns Expression
	 *     Implication.Impl_1_0_0 returns Expression
	 *     Concat returns Expression
	 *     Concat.And_1_0_0_0 returns Expression
	 *     Concat.Or_1_0_1_0 returns Expression
	 *     Foreach returns Expression
	 *     Exists returns Expression
	 *     Relation returns Expression
	 *     Relation.Lower_1_0_0_0 returns Expression
	 *     Relation.Greater_1_0_1_0 returns Expression
	 *     Relation.Equal_1_0_2_0 returns Expression
	 *     Relation.NotEqual_1_0_3_0 returns Expression
	 *     Relation.LowerEqual_1_0_4_0 returns Expression
	 *     Relation.GreaterEqual_1_0_5_0 returns Expression
	 *     MultiMathOperation returns Expression
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Expression
	 *     MultiMathOperation.Division_1_0_1_0 returns Expression
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Expression
	 *     AddMathOperation returns Expression
	 *     AddMathOperation.Addition_1_0_0_0 returns Expression
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Expression
	 *     QualifiedExpression returns Expression
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Expression
	 *     PrimaryExpression returns Expression
	 *
	 * Constraint:
	 *     (
	 *         (foreach='(\forall' type=JvmTypeReference var=VariableOrMethodName right=Exists) | 
	 *         (exists='(\exists' type=JvmTypeReference var=VariableOrMethodName right=Relation) | 
	 *         isTrue?='true'
	 *     )?
	 */
	protected void sequence_Exists_Foreach_PrimaryExpression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GlobalConditions returns GlobalConditions
	 *
	 * Constraint:
	 *     (conditions+=Condition conditions+=Condition*)?
	 */
	protected void sequence_GlobalConditions(ISerializationContext context, GlobalConditions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Impl
	 *     Implication returns Impl
	 *     Implication.Impl_1_0_0 returns Impl
	 *     Concat returns Impl
	 *     Concat.And_1_0_0_0 returns Impl
	 *     Concat.Or_1_0_1_0 returns Impl
	 *     Foreach returns Impl
	 *     Exists returns Impl
	 *     Relation returns Impl
	 *     Relation.Lower_1_0_0_0 returns Impl
	 *     Relation.Greater_1_0_1_0 returns Impl
	 *     Relation.Equal_1_0_2_0 returns Impl
	 *     Relation.NotEqual_1_0_3_0 returns Impl
	 *     Relation.LowerEqual_1_0_4_0 returns Impl
	 *     Relation.GreaterEqual_1_0_5_0 returns Impl
	 *     MultiMathOperation returns Impl
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Impl
	 *     MultiMathOperation.Division_1_0_1_0 returns Impl
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Impl
	 *     AddMathOperation returns Impl
	 *     AddMathOperation.Addition_1_0_0_0 returns Impl
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Impl
	 *     QualifiedExpression returns Impl
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Impl
	 *     PrimaryExpression returns Impl
	 *
	 * Constraint:
	 *     (left=Implication_Impl_1_0_0 right=Concat)
	 */
	protected void sequence_Implication(ISerializationContext context, Impl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.IMPL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.IMPL__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImplicationAccess().getImplLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getImplicationAccess().getRightConcatParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractStatement returns InlineBlockStatement
	 *     InlineBlockStatement returns InlineBlockStatement
	 *
	 * Constraint:
	 *     (block=BlockStatement | references=[BlockStatement|ID])
	 */
	protected void sequence_InlineBlockStatement(ISerializationContext context, InlineBlockStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JMLAnnotation returns JMLAnnotation
	 *
	 * Constraint:
	 *     (requires=Condition | ensures=Condition)+
	 */
	protected void sequence_JMLAnnotation(ISerializationContext context, JMLAnnotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JavaStatement returns JavaStatement
	 *
	 * Constraint:
	 *     statement+=XJStatementOrBlock+
	 */
	protected void sequence_JavaStatement(ISerializationContext context, JavaStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JavaVariable returns JavaVariable
	 *
	 * Constraint:
	 *     (type=JvmTypeReference var=VariableOrMethodName)
	 */
	protected void sequence_JavaVariable(ISerializationContext context, JavaVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.JAVA_VARIABLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.JAVA_VARIABLE__TYPE));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.JAVA_VARIABLE__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.JAVA_VARIABLE__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJavaVariableAccess().getTypeJvmTypeReferenceParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getJavaVariableAccess().getVarVariableOrMethodNameParserRuleCall_2_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JavaVariables returns JavaVariables
	 *
	 * Constraint:
	 *     (variables+=JavaVariable variables+=JavaVariable*)?
	 */
	protected void sequence_JavaVariables(ISerializationContext context, JavaVariables semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractStatement returns MethodStatement
	 *     MethodStatement returns MethodStatement
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_MethodStatement(ISerializationContext context, MethodStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.ABSTRACT_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.ABSTRACT_STATEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMethodStatementAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Division
	 *     Implication returns Division
	 *     Implication.Impl_1_0_0 returns Division
	 *     Concat returns Division
	 *     Concat.And_1_0_0_0 returns Division
	 *     Concat.Or_1_0_1_0 returns Division
	 *     Foreach returns Division
	 *     Exists returns Division
	 *     Relation returns Division
	 *     Relation.Lower_1_0_0_0 returns Division
	 *     Relation.Greater_1_0_1_0 returns Division
	 *     Relation.Equal_1_0_2_0 returns Division
	 *     Relation.NotEqual_1_0_3_0 returns Division
	 *     Relation.LowerEqual_1_0_4_0 returns Division
	 *     Relation.GreaterEqual_1_0_5_0 returns Division
	 *     MultiMathOperation returns Division
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Division
	 *     MultiMathOperation.Division_1_0_1_0 returns Division
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Division
	 *     AddMathOperation returns Division
	 *     AddMathOperation.Addition_1_0_0_0 returns Division
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Division
	 *     QualifiedExpression returns Division
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Division
	 *     PrimaryExpression returns Division
	 *
	 * Constraint:
	 *     (left=MultiMathOperation_Division_1_0_1_0 right=AddMathOperation)
	 */
	protected void sequence_MultiMathOperation(ISerializationContext context, Division semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.DIVISION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.DIVISION__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiMathOperationAccess().getDivisionLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiMathOperationAccess().getRightAddMathOperationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Modulo
	 *     Implication returns Modulo
	 *     Implication.Impl_1_0_0 returns Modulo
	 *     Concat returns Modulo
	 *     Concat.And_1_0_0_0 returns Modulo
	 *     Concat.Or_1_0_1_0 returns Modulo
	 *     Foreach returns Modulo
	 *     Exists returns Modulo
	 *     Relation returns Modulo
	 *     Relation.Lower_1_0_0_0 returns Modulo
	 *     Relation.Greater_1_0_1_0 returns Modulo
	 *     Relation.Equal_1_0_2_0 returns Modulo
	 *     Relation.NotEqual_1_0_3_0 returns Modulo
	 *     Relation.LowerEqual_1_0_4_0 returns Modulo
	 *     Relation.GreaterEqual_1_0_5_0 returns Modulo
	 *     MultiMathOperation returns Modulo
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Modulo
	 *     MultiMathOperation.Division_1_0_1_0 returns Modulo
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Modulo
	 *     AddMathOperation returns Modulo
	 *     AddMathOperation.Addition_1_0_0_0 returns Modulo
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Modulo
	 *     QualifiedExpression returns Modulo
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Modulo
	 *     PrimaryExpression returns Modulo
	 *
	 * Constraint:
	 *     (left=MultiMathOperation_Modulo_1_0_2_0 right=AddMathOperation)
	 */
	protected void sequence_MultiMathOperation(ISerializationContext context, Modulo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.MODULO__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.MODULO__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiMathOperationAccess().getModuloLeftAction_1_0_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiMathOperationAccess().getRightAddMathOperationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Multiplication
	 *     Implication returns Multiplication
	 *     Implication.Impl_1_0_0 returns Multiplication
	 *     Concat returns Multiplication
	 *     Concat.And_1_0_0_0 returns Multiplication
	 *     Concat.Or_1_0_1_0 returns Multiplication
	 *     Foreach returns Multiplication
	 *     Exists returns Multiplication
	 *     Relation returns Multiplication
	 *     Relation.Lower_1_0_0_0 returns Multiplication
	 *     Relation.Greater_1_0_1_0 returns Multiplication
	 *     Relation.Equal_1_0_2_0 returns Multiplication
	 *     Relation.NotEqual_1_0_3_0 returns Multiplication
	 *     Relation.LowerEqual_1_0_4_0 returns Multiplication
	 *     Relation.GreaterEqual_1_0_5_0 returns Multiplication
	 *     MultiMathOperation returns Multiplication
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Multiplication
	 *     MultiMathOperation.Division_1_0_1_0 returns Multiplication
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Multiplication
	 *     AddMathOperation returns Multiplication
	 *     AddMathOperation.Addition_1_0_0_0 returns Multiplication
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Multiplication
	 *     QualifiedExpression returns Multiplication
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Multiplication
	 *     PrimaryExpression returns Multiplication
	 *
	 * Constraint:
	 *     (left=MultiMathOperation_Multiplication_1_0_0_0 right=AddMathOperation)
	 */
	protected void sequence_MultiMathOperation(ISerializationContext context, Multiplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.MULTIPLICATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.MULTIPLICATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiMathOperationAccess().getMultiplicationLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiMathOperationAccess().getRightAddMathOperationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ArrayElement
	 *     Implication returns ArrayElement
	 *     Implication.Impl_1_0_0 returns ArrayElement
	 *     Concat returns ArrayElement
	 *     Concat.And_1_0_0_0 returns ArrayElement
	 *     Concat.Or_1_0_1_0 returns ArrayElement
	 *     Foreach returns ArrayElement
	 *     Exists returns ArrayElement
	 *     Relation returns ArrayElement
	 *     Relation.Lower_1_0_0_0 returns ArrayElement
	 *     Relation.Greater_1_0_1_0 returns ArrayElement
	 *     Relation.Equal_1_0_2_0 returns ArrayElement
	 *     Relation.NotEqual_1_0_3_0 returns ArrayElement
	 *     Relation.LowerEqual_1_0_4_0 returns ArrayElement
	 *     Relation.GreaterEqual_1_0_5_0 returns ArrayElement
	 *     MultiMathOperation returns ArrayElement
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns ArrayElement
	 *     MultiMathOperation.Division_1_0_1_0 returns ArrayElement
	 *     MultiMathOperation.Modulo_1_0_2_0 returns ArrayElement
	 *     AddMathOperation returns ArrayElement
	 *     AddMathOperation.Addition_1_0_0_0 returns ArrayElement
	 *     AddMathOperation.Subtraction_1_0_1_0 returns ArrayElement
	 *     QualifiedExpression returns ArrayElement
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns ArrayElement
	 *     PrimaryExpression returns ArrayElement
	 *
	 * Constraint:
	 *     (array=VariableOrMethodName (element+=Expression element+=Expression*)?)
	 */
	protected void sequence_PrimaryExpression(ISerializationContext context, ArrayElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns FunctionCall
	 *     Implication returns FunctionCall
	 *     Implication.Impl_1_0_0 returns FunctionCall
	 *     Concat returns FunctionCall
	 *     Concat.And_1_0_0_0 returns FunctionCall
	 *     Concat.Or_1_0_1_0 returns FunctionCall
	 *     Foreach returns FunctionCall
	 *     Exists returns FunctionCall
	 *     Relation returns FunctionCall
	 *     Relation.Lower_1_0_0_0 returns FunctionCall
	 *     Relation.Greater_1_0_1_0 returns FunctionCall
	 *     Relation.Equal_1_0_2_0 returns FunctionCall
	 *     Relation.NotEqual_1_0_3_0 returns FunctionCall
	 *     Relation.LowerEqual_1_0_4_0 returns FunctionCall
	 *     Relation.GreaterEqual_1_0_5_0 returns FunctionCall
	 *     MultiMathOperation returns FunctionCall
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns FunctionCall
	 *     MultiMathOperation.Division_1_0_1_0 returns FunctionCall
	 *     MultiMathOperation.Modulo_1_0_2_0 returns FunctionCall
	 *     AddMathOperation returns FunctionCall
	 *     AddMathOperation.Addition_1_0_0_0 returns FunctionCall
	 *     AddMathOperation.Subtraction_1_0_1_0 returns FunctionCall
	 *     QualifiedExpression returns FunctionCall
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns FunctionCall
	 *     PrimaryExpression returns FunctionCall
	 *
	 * Constraint:
	 *     (func=VariableOrMethodName (args+=Expression args+=Expression*)?)
	 */
	protected void sequence_PrimaryExpression(ISerializationContext context, FunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Qualifier
	 *     Implication returns Qualifier
	 *     Implication.Impl_1_0_0 returns Qualifier
	 *     Concat returns Qualifier
	 *     Concat.And_1_0_0_0 returns Qualifier
	 *     Concat.Or_1_0_1_0 returns Qualifier
	 *     Foreach returns Qualifier
	 *     Exists returns Qualifier
	 *     Relation returns Qualifier
	 *     Relation.Lower_1_0_0_0 returns Qualifier
	 *     Relation.Greater_1_0_1_0 returns Qualifier
	 *     Relation.Equal_1_0_2_0 returns Qualifier
	 *     Relation.NotEqual_1_0_3_0 returns Qualifier
	 *     Relation.LowerEqual_1_0_4_0 returns Qualifier
	 *     Relation.GreaterEqual_1_0_5_0 returns Qualifier
	 *     MultiMathOperation returns Qualifier
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Qualifier
	 *     MultiMathOperation.Division_1_0_1_0 returns Qualifier
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Qualifier
	 *     AddMathOperation returns Qualifier
	 *     AddMathOperation.Addition_1_0_0_0 returns Qualifier
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Qualifier
	 *     QualifiedExpression returns Qualifier
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Qualifier
	 *     PrimaryExpression returns Qualifier
	 *
	 * Constraint:
	 *     (left=QualifiedExpression_Qualifier_1_0_0_0 right=PrimaryExpression)
	 */
	protected void sequence_QualifiedExpression(ISerializationContext context, Qualifier semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.QUALIFIER__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.QUALIFIER__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQualifiedExpressionAccess().getQualifierLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getQualifiedExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Equal
	 *     Implication returns Equal
	 *     Implication.Impl_1_0_0 returns Equal
	 *     Concat returns Equal
	 *     Concat.And_1_0_0_0 returns Equal
	 *     Concat.Or_1_0_1_0 returns Equal
	 *     Foreach returns Equal
	 *     Exists returns Equal
	 *     Relation returns Equal
	 *     Relation.Lower_1_0_0_0 returns Equal
	 *     Relation.Greater_1_0_1_0 returns Equal
	 *     Relation.Equal_1_0_2_0 returns Equal
	 *     Relation.NotEqual_1_0_3_0 returns Equal
	 *     Relation.LowerEqual_1_0_4_0 returns Equal
	 *     Relation.GreaterEqual_1_0_5_0 returns Equal
	 *     MultiMathOperation returns Equal
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Equal
	 *     MultiMathOperation.Division_1_0_1_0 returns Equal
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Equal
	 *     AddMathOperation returns Equal
	 *     AddMathOperation.Addition_1_0_0_0 returns Equal
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Equal
	 *     QualifiedExpression returns Equal
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Equal
	 *     PrimaryExpression returns Equal
	 *
	 * Constraint:
	 *     (left=Relation_Equal_1_0_2_0 right=MultiMathOperation)
	 */
	protected void sequence_Relation(ISerializationContext context, Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getEqualLeftAction_1_0_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getRelationAccess().getRightMultiMathOperationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Greater
	 *     Implication returns Greater
	 *     Implication.Impl_1_0_0 returns Greater
	 *     Concat returns Greater
	 *     Concat.And_1_0_0_0 returns Greater
	 *     Concat.Or_1_0_1_0 returns Greater
	 *     Foreach returns Greater
	 *     Exists returns Greater
	 *     Relation returns Greater
	 *     Relation.Lower_1_0_0_0 returns Greater
	 *     Relation.Greater_1_0_1_0 returns Greater
	 *     Relation.Equal_1_0_2_0 returns Greater
	 *     Relation.NotEqual_1_0_3_0 returns Greater
	 *     Relation.LowerEqual_1_0_4_0 returns Greater
	 *     Relation.GreaterEqual_1_0_5_0 returns Greater
	 *     MultiMathOperation returns Greater
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Greater
	 *     MultiMathOperation.Division_1_0_1_0 returns Greater
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Greater
	 *     AddMathOperation returns Greater
	 *     AddMathOperation.Addition_1_0_0_0 returns Greater
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Greater
	 *     QualifiedExpression returns Greater
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Greater
	 *     PrimaryExpression returns Greater
	 *
	 * Constraint:
	 *     (left=Relation_Greater_1_0_1_0 right=MultiMathOperation)
	 */
	protected void sequence_Relation(ISerializationContext context, Greater semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.GREATER__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.GREATER__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getGreaterLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getRelationAccess().getRightMultiMathOperationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns GreaterEqual
	 *     Implication returns GreaterEqual
	 *     Implication.Impl_1_0_0 returns GreaterEqual
	 *     Concat returns GreaterEqual
	 *     Concat.And_1_0_0_0 returns GreaterEqual
	 *     Concat.Or_1_0_1_0 returns GreaterEqual
	 *     Foreach returns GreaterEqual
	 *     Exists returns GreaterEqual
	 *     Relation returns GreaterEqual
	 *     Relation.Lower_1_0_0_0 returns GreaterEqual
	 *     Relation.Greater_1_0_1_0 returns GreaterEqual
	 *     Relation.Equal_1_0_2_0 returns GreaterEqual
	 *     Relation.NotEqual_1_0_3_0 returns GreaterEqual
	 *     Relation.LowerEqual_1_0_4_0 returns GreaterEqual
	 *     Relation.GreaterEqual_1_0_5_0 returns GreaterEqual
	 *     MultiMathOperation returns GreaterEqual
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns GreaterEqual
	 *     MultiMathOperation.Division_1_0_1_0 returns GreaterEqual
	 *     MultiMathOperation.Modulo_1_0_2_0 returns GreaterEqual
	 *     AddMathOperation returns GreaterEqual
	 *     AddMathOperation.Addition_1_0_0_0 returns GreaterEqual
	 *     AddMathOperation.Subtraction_1_0_1_0 returns GreaterEqual
	 *     QualifiedExpression returns GreaterEqual
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns GreaterEqual
	 *     PrimaryExpression returns GreaterEqual
	 *
	 * Constraint:
	 *     (left=Relation_GreaterEqual_1_0_5_0 right=MultiMathOperation)
	 */
	protected void sequence_Relation(ISerializationContext context, GreaterEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.GREATER_EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.GREATER_EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getGreaterEqualLeftAction_1_0_5_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getRelationAccess().getRightMultiMathOperationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Lower
	 *     Implication returns Lower
	 *     Implication.Impl_1_0_0 returns Lower
	 *     Concat returns Lower
	 *     Concat.And_1_0_0_0 returns Lower
	 *     Concat.Or_1_0_1_0 returns Lower
	 *     Foreach returns Lower
	 *     Exists returns Lower
	 *     Relation returns Lower
	 *     Relation.Lower_1_0_0_0 returns Lower
	 *     Relation.Greater_1_0_1_0 returns Lower
	 *     Relation.Equal_1_0_2_0 returns Lower
	 *     Relation.NotEqual_1_0_3_0 returns Lower
	 *     Relation.LowerEqual_1_0_4_0 returns Lower
	 *     Relation.GreaterEqual_1_0_5_0 returns Lower
	 *     MultiMathOperation returns Lower
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns Lower
	 *     MultiMathOperation.Division_1_0_1_0 returns Lower
	 *     MultiMathOperation.Modulo_1_0_2_0 returns Lower
	 *     AddMathOperation returns Lower
	 *     AddMathOperation.Addition_1_0_0_0 returns Lower
	 *     AddMathOperation.Subtraction_1_0_1_0 returns Lower
	 *     QualifiedExpression returns Lower
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns Lower
	 *     PrimaryExpression returns Lower
	 *
	 * Constraint:
	 *     (left=Relation_Lower_1_0_0_0 right=MultiMathOperation)
	 */
	protected void sequence_Relation(ISerializationContext context, Lower semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.LOWER__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.LOWER__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getLowerLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getRelationAccess().getRightMultiMathOperationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LowerEqual
	 *     Implication returns LowerEqual
	 *     Implication.Impl_1_0_0 returns LowerEqual
	 *     Concat returns LowerEqual
	 *     Concat.And_1_0_0_0 returns LowerEqual
	 *     Concat.Or_1_0_1_0 returns LowerEqual
	 *     Foreach returns LowerEqual
	 *     Exists returns LowerEqual
	 *     Relation returns LowerEqual
	 *     Relation.Lower_1_0_0_0 returns LowerEqual
	 *     Relation.Greater_1_0_1_0 returns LowerEqual
	 *     Relation.Equal_1_0_2_0 returns LowerEqual
	 *     Relation.NotEqual_1_0_3_0 returns LowerEqual
	 *     Relation.LowerEqual_1_0_4_0 returns LowerEqual
	 *     Relation.GreaterEqual_1_0_5_0 returns LowerEqual
	 *     MultiMathOperation returns LowerEqual
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns LowerEqual
	 *     MultiMathOperation.Division_1_0_1_0 returns LowerEqual
	 *     MultiMathOperation.Modulo_1_0_2_0 returns LowerEqual
	 *     AddMathOperation returns LowerEqual
	 *     AddMathOperation.Addition_1_0_0_0 returns LowerEqual
	 *     AddMathOperation.Subtraction_1_0_1_0 returns LowerEqual
	 *     QualifiedExpression returns LowerEqual
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns LowerEqual
	 *     PrimaryExpression returns LowerEqual
	 *
	 * Constraint:
	 *     (left=Relation_LowerEqual_1_0_4_0 right=MultiMathOperation)
	 */
	protected void sequence_Relation(ISerializationContext context, LowerEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.LOWER_EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.LOWER_EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getLowerEqualLeftAction_1_0_4_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getRelationAccess().getRightMultiMathOperationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns NotEqual
	 *     Implication returns NotEqual
	 *     Implication.Impl_1_0_0 returns NotEqual
	 *     Concat returns NotEqual
	 *     Concat.And_1_0_0_0 returns NotEqual
	 *     Concat.Or_1_0_1_0 returns NotEqual
	 *     Foreach returns NotEqual
	 *     Exists returns NotEqual
	 *     Relation returns NotEqual
	 *     Relation.Lower_1_0_0_0 returns NotEqual
	 *     Relation.Greater_1_0_1_0 returns NotEqual
	 *     Relation.Equal_1_0_2_0 returns NotEqual
	 *     Relation.NotEqual_1_0_3_0 returns NotEqual
	 *     Relation.LowerEqual_1_0_4_0 returns NotEqual
	 *     Relation.GreaterEqual_1_0_5_0 returns NotEqual
	 *     MultiMathOperation returns NotEqual
	 *     MultiMathOperation.Multiplication_1_0_0_0 returns NotEqual
	 *     MultiMathOperation.Division_1_0_1_0 returns NotEqual
	 *     MultiMathOperation.Modulo_1_0_2_0 returns NotEqual
	 *     AddMathOperation returns NotEqual
	 *     AddMathOperation.Addition_1_0_0_0 returns NotEqual
	 *     AddMathOperation.Subtraction_1_0_1_0 returns NotEqual
	 *     QualifiedExpression returns NotEqual
	 *     QualifiedExpression.Qualifier_1_0_0_0 returns NotEqual
	 *     PrimaryExpression returns NotEqual
	 *
	 * Constraint:
	 *     (left=Relation_NotEqual_1_0_3_0 right=MultiMathOperation)
	 */
	protected void sequence_Relation(ISerializationContext context, NotEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.NOT_EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.NOT_EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getNotEqualLeftAction_1_0_3_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getRelationAccess().getRightMultiMathOperationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rename returns Rename
	 *
	 * Constraint:
	 *     (type=EString function=EString newName=EString)
	 */
	protected void sequence_Rename(ISerializationContext context, Rename semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.RENAME__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.RENAME__TYPE));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.RENAME__FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.RENAME__FUNCTION));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.RENAME__NEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.RENAME__NEW_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRenameAccess().getTypeEStringParserRuleCall_3_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRenameAccess().getFunctionEStringParserRuleCall_5_0(), semanticObject.getFunction());
		feeder.accept(grammarAccess.getRenameAccess().getNewNameEStringParserRuleCall_7_0(), semanticObject.getNewName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Renaming returns Renaming
	 *
	 * Constraint:
	 *     (rename+=Rename rename+=Rename*)?
	 */
	protected void sequence_Renaming(ISerializationContext context, Renaming semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractStatement returns ReturnStatement
	 *     ReturnStatement returns ReturnStatement
	 *
	 * Constraint:
	 *     name=CodeString
	 */
	protected void sequence_ReturnStatement(ISerializationContext context, ReturnStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.ABSTRACT_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.ABSTRACT_STATEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReturnStatementAccess().getNameCodeStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractStatement returns SelectionStatement
	 *     SelectionStatement returns SelectionStatement
	 *
	 * Constraint:
	 *     (guards+=Condition commands+=AbstractStatement (guards+=Condition commands+=AbstractStatement)*)
	 */
	protected void sequence_SelectionStatement(ISerializationContext context, SelectionStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SkipStatement returns AbstractStatement
	 *
	 * Constraint:
	 *     name=';'
	 */
	protected void sequence_SkipStatement(ISerializationContext context, AbstractStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.ABSTRACT_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.ABSTRACT_STATEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSkipStatementAccess().getNameSemicolonKeyword_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractStatement returns SmallRepetitionStatement
	 *     SmallRepetitionStatement returns SmallRepetitionStatement
	 *
	 * Constraint:
	 *     (guard=Condition invariant=Condition variant=Variant loopStatement=AbstractStatement)
	 */
	protected void sequence_SmallRepetitionStatement(ISerializationContext context, SmallRepetitionStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.SMALL_REPETITION_STATEMENT__GUARD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.SMALL_REPETITION_STATEMENT__GUARD));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.SMALL_REPETITION_STATEMENT__INVARIANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.SMALL_REPETITION_STATEMENT__INVARIANT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.SMALL_REPETITION_STATEMENT__VARIANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.SMALL_REPETITION_STATEMENT__VARIANT));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.SMALL_REPETITION_STATEMENT__LOOP_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.SMALL_REPETITION_STATEMENT__LOOP_STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSmallRepetitionStatementAccess().getGuardConditionParserRuleCall_3_0(), semanticObject.getGuard());
		feeder.accept(grammarAccess.getSmallRepetitionStatementAccess().getInvariantConditionParserRuleCall_8_0(), semanticObject.getInvariant());
		feeder.accept(grammarAccess.getSmallRepetitionStatementAccess().getVariantVariantParserRuleCall_12_0(), semanticObject.getVariant());
		feeder.accept(grammarAccess.getSmallRepetitionStatementAccess().getLoopStatementAbstractStatementParserRuleCall_15_0(), semanticObject.getLoopStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractStatement returns StrengthWeakStatement
	 *     StrengthWeakStatement returns StrengthWeakStatement
	 *
	 * Constraint:
	 *     (weakPreCondition=Condition name=CodeString strongPostCondition=Condition)
	 */
	protected void sequence_StrengthWeakStatement(ISerializationContext context, StrengthWeakStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.STRENGTH_WEAK_STATEMENT__WEAK_PRE_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.STRENGTH_WEAK_STATEMENT__WEAK_PRE_CONDITION));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.ABSTRACT_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.ABSTRACT_STATEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.STRENGTH_WEAK_STATEMENT__STRONG_POST_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.STRENGTH_WEAK_STATEMENT__STRONG_POST_CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStrengthWeakStatementAccess().getWeakPreConditionConditionParserRuleCall_3_0(), semanticObject.getWeakPreCondition());
		feeder.accept(grammarAccess.getStrengthWeakStatementAccess().getNameCodeStringParserRuleCall_6_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStrengthWeakStatementAccess().getStrongPostConditionConditionParserRuleCall_10_0(), semanticObject.getStrongPostCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableOrMethodName returns VariableOrMethodName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_VariableOrMethodName(ISerializationContext context, VariableOrMethodName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.VARIABLE_OR_METHOD_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.VARIABLE_OR_METHOD_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableOrMethodNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variant returns Variant
	 *
	 * Constraint:
	 *     var=MultiMathOperation
	 */
	protected void sequence_Variant(ISerializationContext context, Variant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CbcmodelPackage.Literals.VARIANT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CbcmodelPackage.Literals.VARIANT__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariantAccess().getVarMultiMathOperationParserRuleCall_1_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
}
