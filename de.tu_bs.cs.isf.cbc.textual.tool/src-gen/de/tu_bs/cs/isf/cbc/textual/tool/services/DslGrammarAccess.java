/*
 * generated by Xtext 2.25.0
 */
package de.tu_bs.cs.isf.cbc.textual.tool.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import jbase.services.JbaseGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CbCProblemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.CbCProblem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cAlternatives.eContents().get(0);
		private final Assignment cCbcformulaAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cCbcformulaCbCFormulaParserRuleCall_0_0_0 = (RuleCall)cCbcformulaAssignment_0_0.eContents().get(0);
		private final Assignment cGlobalconditionAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final RuleCall cGlobalconditionGlobalConditionsParserRuleCall_0_1_0 = (RuleCall)cGlobalconditionAssignment_0_1.eContents().get(0);
		private final Assignment cJavaVariableAssignment_0_2 = (Assignment)cUnorderedGroup_0.eContents().get(2);
		private final RuleCall cJavaVariableJavaVariablesParserRuleCall_0_2_0 = (RuleCall)cJavaVariableAssignment_0_2.eContents().get(0);
		private final Assignment cRenamingAssignment_0_3 = (Assignment)cUnorderedGroup_0.eContents().get(3);
		private final RuleCall cRenamingRenamingParserRuleCall_0_3_0 = (RuleCall)cRenamingAssignment_0_3.eContents().get(0);
		private final RuleCall cBlockStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////import "http://www.eclipse.org/xtext/xbase/Xbase"
		////import "http://www.eclipse.org/xtext/common/JavaVMTypes"
		//CbCProblem returns CbCProblem:
		//        (cbcformula=CbCFormula
		//        & (globalcondition=GlobalConditions)?
		//        & (javaVariable=JavaVariables)?
		//        & (renaming=Renaming)?)
		//        | BlockStatement
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//(cbcformula=CbCFormula
		//& (globalcondition=GlobalConditions)?
		//& (javaVariable=JavaVariables)?
		//& (renaming=Renaming)?)
		//| BlockStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(cbcformula=CbCFormula
		//& (globalcondition=GlobalConditions)?
		//& (javaVariable=JavaVariables)?
		//& (renaming=Renaming)?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//cbcformula=CbCFormula
		public Assignment getCbcformulaAssignment_0_0() { return cCbcformulaAssignment_0_0; }
		
		//CbCFormula
		public RuleCall getCbcformulaCbCFormulaParserRuleCall_0_0_0() { return cCbcformulaCbCFormulaParserRuleCall_0_0_0; }
		
		//(globalcondition=GlobalConditions)?
		public Assignment getGlobalconditionAssignment_0_1() { return cGlobalconditionAssignment_0_1; }
		
		//GlobalConditions
		public RuleCall getGlobalconditionGlobalConditionsParserRuleCall_0_1_0() { return cGlobalconditionGlobalConditionsParserRuleCall_0_1_0; }
		
		//(javaVariable=JavaVariables)?
		public Assignment getJavaVariableAssignment_0_2() { return cJavaVariableAssignment_0_2; }
		
		//JavaVariables
		public RuleCall getJavaVariableJavaVariablesParserRuleCall_0_2_0() { return cJavaVariableJavaVariablesParserRuleCall_0_2_0; }
		
		//(renaming=Renaming)?
		public Assignment getRenamingAssignment_0_3() { return cRenamingAssignment_0_3; }
		
		//Renaming
		public RuleCall getRenamingRenamingParserRuleCall_0_3_0() { return cRenamingRenamingParserRuleCall_0_3_0; }
		
		//BlockStatement
		public RuleCall getBlockStatementParserRuleCall_1() { return cBlockStatementParserRuleCall_1; }
	}
	public class CbCFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.CbCFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormulaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPreKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPreConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPreConditionConditionParserRuleCall_4_0 = (RuleCall)cPreConditionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementAbstractStatementParserRuleCall_7_0 = (RuleCall)cStatementAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cPostKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPostConditionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPostConditionConditionParserRuleCall_11_0 = (RuleCall)cPostConditionAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//CbCFormula returns CbCFormula:
		//    'Formula'
		//    name=EString
		//        'Pre:' '(' preCondition=Condition ')'
		//        '{' statement=AbstractStatement '}'
		//        'Post:' '(' postCondition=Condition ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Formula'
		//name=EString
		//    'Pre:' '(' preCondition=Condition ')'
		//    '{' statement=AbstractStatement '}'
		//    'Post:' '(' postCondition=Condition ')'
		public Group getGroup() { return cGroup; }
		
		//'Formula'
		public Keyword getFormulaKeyword_0() { return cFormulaKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'Pre:'
		public Keyword getPreKeyword_2() { return cPreKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//preCondition=Condition
		public Assignment getPreConditionAssignment_4() { return cPreConditionAssignment_4; }
		
		//Condition
		public RuleCall getPreConditionConditionParserRuleCall_4_0() { return cPreConditionConditionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//statement=AbstractStatement
		public Assignment getStatementAssignment_7() { return cStatementAssignment_7; }
		
		//AbstractStatement
		public RuleCall getStatementAbstractStatementParserRuleCall_7_0() { return cStatementAbstractStatementParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'Post:'
		public Keyword getPostKeyword_9() { return cPostKeyword_9; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10() { return cLeftParenthesisKeyword_10; }
		
		//postCondition=Condition
		public Assignment getPostConditionAssignment_11() { return cPostConditionAssignment_11; }
		
		//Condition
		public RuleCall getPostConditionConditionParserRuleCall_11_0() { return cPostConditionConditionParserRuleCall_11_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class AbstractStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.AbstractStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractStatement_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInlineBlockStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSkipStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSelectionStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSmallRepetitionStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMethodStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReturnStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cStrengthWeakStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//AbstractStatement returns AbstractStatement:
		//    AbstractStatement_Impl | InlineBlockStatement | CompositionStatement | SkipStatement | SelectionStatement | SmallRepetitionStatement | MethodStatement | ReturnStatement | StrengthWeakStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractStatement_Impl | InlineBlockStatement | CompositionStatement | SkipStatement | SelectionStatement | SmallRepetitionStatement | MethodStatement | ReturnStatement | StrengthWeakStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractStatement_Impl
		public RuleCall getAbstractStatement_ImplParserRuleCall_0() { return cAbstractStatement_ImplParserRuleCall_0; }
		
		//InlineBlockStatement
		public RuleCall getInlineBlockStatementParserRuleCall_1() { return cInlineBlockStatementParserRuleCall_1; }
		
		//CompositionStatement
		public RuleCall getCompositionStatementParserRuleCall_2() { return cCompositionStatementParserRuleCall_2; }
		
		//SkipStatement
		public RuleCall getSkipStatementParserRuleCall_3() { return cSkipStatementParserRuleCall_3; }
		
		//SelectionStatement
		public RuleCall getSelectionStatementParserRuleCall_4() { return cSelectionStatementParserRuleCall_4; }
		
		//SmallRepetitionStatement
		public RuleCall getSmallRepetitionStatementParserRuleCall_5() { return cSmallRepetitionStatementParserRuleCall_5; }
		
		//MethodStatement
		public RuleCall getMethodStatementParserRuleCall_6() { return cMethodStatementParserRuleCall_6; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_7() { return cReturnStatementParserRuleCall_7; }
		
		//StrengthWeakStatement
		public RuleCall getStrengthWeakStatementParserRuleCall_8() { return cStrengthWeakStatementParserRuleCall_8; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class CodeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.CodeString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cVariableStringParserRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cOperationParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_5_2 = (Alternatives)cGroup_5.eContents().get(2);
		private final RuleCall cVariableStringParserRuleCall_5_2_0 = (RuleCall)cAlternatives_5_2.eContents().get(0);
		private final Group cGroup_5_2_1 = (Group)cAlternatives_5_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_5_2_1_0 = (Keyword)cGroup_5_2_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_5_2_1_1 = (RuleCall)cGroup_5_2_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CodeString returns ecore::EString:
		//            (ID ('[' (ID | INT) ']')? '=' '('? (VariableString | '-'? INT) (Operation '('* ( VariableString | '-'? INT ) ')'*)* ';')+
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID ('[' (ID | INT) ']')? '=' '('? (VariableString | '-'? INT) (Operation '('* ( VariableString | '-'? INT ) ')'*)* ';')+
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('[' (ID | INT) ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//(ID | INT)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0() { return cIDTerminalRuleCall_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'('?
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(VariableString | '-'? INT)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_4_0() { return cVariableStringParserRuleCall_4_0; }
		
		//'-'? INT
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1_0() { return cHyphenMinusKeyword_4_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_1_1() { return cINTTerminalRuleCall_4_1_1; }
		
		//(Operation '('* ( VariableString | '-'? INT ) ')'*)*
		public Group getGroup_5() { return cGroup_5; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_5_0() { return cOperationParserRuleCall_5_0; }
		
		//'('*
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//( VariableString | '-'? INT )
		public Alternatives getAlternatives_5_2() { return cAlternatives_5_2; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_5_2_0() { return cVariableStringParserRuleCall_5_2_0; }
		
		//'-'? INT
		public Group getGroup_5_2_1() { return cGroup_5_2_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_5_2_1_0() { return cHyphenMinusKeyword_5_2_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5_2_1_1() { return cINTTerminalRuleCall_5_2_1_1; }
		
		//')'*
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class VariableStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.VariableString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_0_1 = (Group)cGroup_2_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_0_0_1_0 = (Alternatives)cGroup_2_0_0_1.eContents().get(0);
		private final RuleCall cVariableStringParserRuleCall_2_0_0_1_0_0 = (RuleCall)cAlternatives_2_0_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_0_1_0_1 = (Group)cAlternatives_2_0_0_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_0_0_1_0_1_0 = (Keyword)cGroup_2_0_0_1_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_0_0_1_0_1_1 = (RuleCall)cGroup_2_0_0_1_0_1.eContents().get(1);
		private final Group cGroup_2_0_0_1_1 = (Group)cGroup_2_0_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_0_1_1_0 = (Keyword)cGroup_2_0_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0_1_1_1 = (Alternatives)cGroup_2_0_0_1_1.eContents().get(1);
		private final RuleCall cVariableStringParserRuleCall_2_0_0_1_1_1_0 = (RuleCall)cAlternatives_2_0_0_1_1_1.eContents().get(0);
		private final Group cGroup_2_0_0_1_1_1_1 = (Group)cAlternatives_2_0_0_1_1_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_0_0_1_1_1_1_0 = (Keyword)cGroup_2_0_0_1_1_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_0_0_1_1_1_1_1 = (RuleCall)cGroup_2_0_0_1_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_0_0_2 = (Keyword)cGroup_2_0_0.eContents().get(2);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cVariableStringParserRuleCall_2_0_1_1 = (RuleCall)cGroup_2_0_1.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_0_1 = (Alternatives)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cVariableStringParserRuleCall_2_1_0_1_0 = (RuleCall)cAlternatives_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_0_1_1 = (Group)cAlternatives_2_1_0_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_1_0_1_1_0 = (Keyword)cGroup_2_1_0_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1_0_1_1_1 = (RuleCall)cGroup_2_1_0_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_1_0_2 = (Keyword)cGroup_2_1_0.eContents().get(2);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cVariableStringParserRuleCall_2_1_1_1 = (RuleCall)cGroup_2_1_1.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cFullStopKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final RuleCall cVariableStringParserRuleCall_2_2_1 = (RuleCall)cGroup_2_2.eContents().get(1);
		
		////CodeString returns ecore::EString:
		////            (ID ('[' (ID | INT) ']')? '=' TermString ';')+
		////        ;
		////
		////TermString returns ecore::EString:
		////    '('? (VariableString | '-'? INT | TermString2) Operation TermString ')'?
		////;
		////
		////TermString2 returns ecore::EString:
		////    '('? (VariableString | '-'? INT | TermString) Operation TermString ')'?
		////;
		//VariableString returns ecore::EString:
		//    '-'? ID (
		//            ('(' ( (VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)? |
		//            ('[' (VariableString | '-'? INT)? ']') ('.' VariableString)? |
		//            ('.' VariableString)
		//        )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? ID (
		//        ('(' ( (VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)? |
		//        ('[' (VariableString | '-'? INT)? ']') ('.' VariableString)? |
		//        ('.' VariableString)
		//    )?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//(
		//           ('(' ( (VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)? |
		//           ('[' (VariableString | '-'? INT)? ']') ('.' VariableString)? |
		//           ('.' VariableString)
		//       )?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('(' ( (VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//('(' ( (VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')')
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0_0() { return cLeftParenthesisKeyword_2_0_0_0; }
		
		//( (VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)?
		public Group getGroup_2_0_0_1() { return cGroup_2_0_0_1; }
		
		//(VariableString | '-'? INT)
		public Alternatives getAlternatives_2_0_0_1_0() { return cAlternatives_2_0_0_1_0; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_0_0_1_0_0() { return cVariableStringParserRuleCall_2_0_0_1_0_0; }
		
		//'-'? INT
		public Group getGroup_2_0_0_1_0_1() { return cGroup_2_0_0_1_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2_0_0_1_0_1_0() { return cHyphenMinusKeyword_2_0_0_1_0_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0_0_1_0_1_1() { return cINTTerminalRuleCall_2_0_0_1_0_1_1; }
		
		//(',' (VariableString | '-'? INT))*
		public Group getGroup_2_0_0_1_1() { return cGroup_2_0_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_0_1_1_0() { return cCommaKeyword_2_0_0_1_1_0; }
		
		//(VariableString | '-'? INT)
		public Alternatives getAlternatives_2_0_0_1_1_1() { return cAlternatives_2_0_0_1_1_1; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_0_0_1_1_1_0() { return cVariableStringParserRuleCall_2_0_0_1_1_1_0; }
		
		//'-'? INT
		public Group getGroup_2_0_0_1_1_1_1() { return cGroup_2_0_0_1_1_1_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2_0_0_1_1_1_1_0() { return cHyphenMinusKeyword_2_0_0_1_1_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0_0_1_1_1_1_1() { return cINTTerminalRuleCall_2_0_0_1_1_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_0_2() { return cRightParenthesisKeyword_2_0_0_2; }
		
		//('.' VariableString)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_1_0() { return cFullStopKeyword_2_0_1_0; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_0_1_1() { return cVariableStringParserRuleCall_2_0_1_1; }
		
		//('[' (VariableString | '-'? INT)? ']') ('.' VariableString)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//('[' (VariableString | '-'? INT)? ']')
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_0_0() { return cLeftSquareBracketKeyword_2_1_0_0; }
		
		//(VariableString | '-'? INT)?
		public Alternatives getAlternatives_2_1_0_1() { return cAlternatives_2_1_0_1; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_1_0_1_0() { return cVariableStringParserRuleCall_2_1_0_1_0; }
		
		//'-'? INT
		public Group getGroup_2_1_0_1_1() { return cGroup_2_1_0_1_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2_1_0_1_1_0() { return cHyphenMinusKeyword_2_1_0_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1_0_1_1_1() { return cINTTerminalRuleCall_2_1_0_1_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_0_2() { return cRightSquareBracketKeyword_2_1_0_2; }
		
		//('.' VariableString)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1_1_0() { return cFullStopKeyword_2_1_1_0; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_1_1_1() { return cVariableStringParserRuleCall_2_1_1_1; }
		
		//('.' VariableString)
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_2_0() { return cFullStopKeyword_2_2_0; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_2_1() { return cVariableStringParserRuleCall_2_2_1; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//        //ID( ('[' | '(') ( (VariableString | INT) (',' (VariableString | INT))*)? (']' | ')'))?
		//Operation:
		//    '+' | '-' | '*' | '/' | '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
	}
	public class AbstractStatement_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.AbstractStatement_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbstractStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCodeStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AbstractStatement_Impl returns AbstractStatement:
		//    {AbstractStatement}
		//        name=CodeString;
		@Override public ParserRule getRule() { return rule; }
		
		//{AbstractStatement}
		//    name=CodeString
		public Group getGroup() { return cGroup; }
		
		//{AbstractStatement}
		public Action getAbstractStatementAction_0() { return cAbstractStatementAction_0; }
		
		//name=CodeString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CodeString
		public RuleCall getNameCodeStringParserRuleCall_1_0() { return cNameCodeStringParserRuleCall_1_0; }
	}
	public class MethodStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.MethodStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//MethodStatement returns AbstractStatement:
		//    {MethodStatement}
		//        name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodStatement}
		//    name=EString
		public Group getGroup() { return cGroup; }
		
		//{MethodStatement}
		public Action getMethodStatementAction_0() { return cMethodStatementAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCodeStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ReturnStatement returns AbstractStatement:
		//    {ReturnStatement}
		//        'Return' name=CodeString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStatement}
		//    'Return' name=CodeString
		public Group getGroup() { return cGroup; }
		
		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }
		
		//'Return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//name=CodeString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//CodeString
		public RuleCall getNameCodeStringParserRuleCall_2_0() { return cNameCodeStringParserRuleCall_2_0; }
	}
	public class StrengthWeakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.StrengthWeakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStrengthWeakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWeakPreConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeakPreConditionConditionParserRuleCall_3_0 = (RuleCall)cWeakPreConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameCodeStringParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cPostKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cStrongPostConditionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStrongPostConditionConditionParserRuleCall_10_0 = (RuleCall)cStrongPostConditionAssignment_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//StrengthWeakStatement returns AbstractStatement:
		//    {StrengthWeakStatement}
		//    'Pre:' '(' weakPreCondition=Condition ')'
		//        '{' name=CodeString '}'
		//        'Post:' '(' strongPostCondition=Condition ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StrengthWeakStatement}
		//'Pre:' '(' weakPreCondition=Condition ')'
		//    '{' name=CodeString '}'
		//    'Post:' '(' strongPostCondition=Condition ')'
		public Group getGroup() { return cGroup; }
		
		//{StrengthWeakStatement}
		public Action getStrengthWeakStatementAction_0() { return cStrengthWeakStatementAction_0; }
		
		//'Pre:'
		public Keyword getPreKeyword_1() { return cPreKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//weakPreCondition=Condition
		public Assignment getWeakPreConditionAssignment_3() { return cWeakPreConditionAssignment_3; }
		
		//Condition
		public RuleCall getWeakPreConditionConditionParserRuleCall_3_0() { return cWeakPreConditionConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//name=CodeString
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//CodeString
		public RuleCall getNameCodeStringParserRuleCall_6_0() { return cNameCodeStringParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'Post:'
		public Keyword getPostKeyword_8() { return cPostKeyword_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9() { return cLeftParenthesisKeyword_9; }
		
		//strongPostCondition=Condition
		public Assignment getStrongPostConditionAssignment_10() { return cStrongPostConditionAssignment_10; }
		
		//Condition
		public RuleCall getStrongPostConditionConditionParserRuleCall_10_0() { return cStrongPostConditionConditionParserRuleCall_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//Condition:
		//    {Condition} condition=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition} condition=Expression
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
	}
	public class SkipStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.SkipStatement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameSemicolonKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//SkipStatement returns AbstractStatement:
		//         name=';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=';'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//';'
		public Keyword getNameSemicolonKeyword_0() { return cNameSemicolonKeyword_0; }
	}
	public class CompositionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.CompositionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstStatementAbstractStatementParserRuleCall_2_0 = (RuleCall)cFirstStatementAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIntmKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIntermediateConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIntermediateConditionConditionParserRuleCall_6_0 = (RuleCall)cIntermediateConditionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSecondStatementAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSecondStatementAbstractStatementParserRuleCall_9_0 = (RuleCall)cSecondStatementAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//CompositionStatement returns AbstractStatement:
		//    {CompositionStatement}
		//        '{' firstStatement=AbstractStatement '}'
		//        'Intm:' '(' intermediateCondition=Condition ')'
		//        '{' secondStatement=AbstractStatement '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositionStatement}
		//    '{' firstStatement=AbstractStatement '}'
		//    'Intm:' '(' intermediateCondition=Condition ')'
		//    '{' secondStatement=AbstractStatement '}'
		public Group getGroup() { return cGroup; }
		
		//{CompositionStatement}
		public Action getCompositionStatementAction_0() { return cCompositionStatementAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//firstStatement=AbstractStatement
		public Assignment getFirstStatementAssignment_2() { return cFirstStatementAssignment_2; }
		
		//AbstractStatement
		public RuleCall getFirstStatementAbstractStatementParserRuleCall_2_0() { return cFirstStatementAbstractStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//'Intm:'
		public Keyword getIntmKeyword_4() { return cIntmKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//intermediateCondition=Condition
		public Assignment getIntermediateConditionAssignment_6() { return cIntermediateConditionAssignment_6; }
		
		//Condition
		public RuleCall getIntermediateConditionConditionParserRuleCall_6_0() { return cIntermediateConditionConditionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//secondStatement=AbstractStatement
		public Assignment getSecondStatementAssignment_9() { return cSecondStatementAssignment_9; }
		
		//AbstractStatement
		public RuleCall getSecondStatementAbstractStatementParserRuleCall_9_0() { return cSecondStatementAbstractStatementParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class JavaStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.JavaStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJavaStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementXJStatementOrBlockParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//JavaStatement returns AbstractStatement:
		//    {JavaStatement}
		//    (statement+=XJStatementOrBlock)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JavaStatement}
		//(statement+=XJStatementOrBlock)+
		public Group getGroup() { return cGroup; }
		
		//{JavaStatement}
		public Action getJavaStatementAction_0() { return cJavaStatementAction_0; }
		
		//(statement+=XJStatementOrBlock)+
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//XJStatementOrBlock
		public RuleCall getStatementXJStatementOrBlockParserRuleCall_1_0() { return cStatementXJStatementOrBlockParserRuleCall_1_0; }
	}
	public class JMLAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.JMLAnnotation");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cPreKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRequiresAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRequiresConditionParserRuleCall_0_2_0 = (RuleCall)cRequiresAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cPostKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEnsuresAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEnsuresConditionParserRuleCall_1_2_0 = (RuleCall)cEnsuresAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//JMLAnnotation returns JMLAnnotation:
		//    "Pre:" "(" requires=Condition ")" &
		//    "Post:" "(" ensures=Condition  ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Pre:" "(" requires=Condition ")" &
		//"Post:" "(" ensures=Condition  ")"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//"Pre:" "(" requires=Condition ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"Pre:"
		public Keyword getPreKeyword_0_0() { return cPreKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//requires=Condition
		public Assignment getRequiresAssignment_0_2() { return cRequiresAssignment_0_2; }
		
		//Condition
		public RuleCall getRequiresConditionParserRuleCall_0_2_0() { return cRequiresConditionParserRuleCall_0_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//"Post:" "(" ensures=Condition  ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"Post:"
		public Keyword getPostKeyword_1_0() { return cPostKeyword_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//ensures=Condition
		public Assignment getEnsuresAssignment_1_2() { return cEnsuresAssignment_1_2; }
		
		//Condition
		public RuleCall getEnsuresConditionParserRuleCall_1_2_0() { return cEnsuresConditionParserRuleCall_1_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class InlineBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.InlineBlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInlineBlockStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cBlockAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBlockBlockStatementParserRuleCall_0_1_0 = (RuleCall)cBlockAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInlineBlockStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBlockKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cReferencesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cReferencesBlockStatementCrossReference_1_2_0 = (CrossReference)cReferencesAssignment_1_2.eContents().get(0);
		private final RuleCall cReferencesBlockStatementIDTerminalRuleCall_1_2_0_1 = (RuleCall)cReferencesBlockStatementCrossReference_1_2_0.eContents().get(1);
		
		//InlineBlockStatement returns AbstractStatement:
		//    {InlineBlockStatement}
		//    block=BlockStatement | {InlineBlockStatement} "Block" references=[BlockStatement]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{InlineBlockStatement}
		//block=BlockStatement | {InlineBlockStatement} "Block" references=[BlockStatement]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{InlineBlockStatement}
		//block=BlockStatement
		public Group getGroup_0() { return cGroup_0; }
		
		//{InlineBlockStatement}
		public Action getInlineBlockStatementAction_0_0() { return cInlineBlockStatementAction_0_0; }
		
		//block=BlockStatement
		public Assignment getBlockAssignment_0_1() { return cBlockAssignment_0_1; }
		
		//BlockStatement
		public RuleCall getBlockBlockStatementParserRuleCall_0_1_0() { return cBlockBlockStatementParserRuleCall_0_1_0; }
		
		//{InlineBlockStatement} "Block" references=[BlockStatement]
		public Group getGroup_1() { return cGroup_1; }
		
		//{InlineBlockStatement}
		public Action getInlineBlockStatementAction_1_0() { return cInlineBlockStatementAction_1_0; }
		
		//"Block"
		public Keyword getBlockKeyword_1_1() { return cBlockKeyword_1_1; }
		
		//references=[BlockStatement]
		public Assignment getReferencesAssignment_1_2() { return cReferencesAssignment_1_2; }
		
		//[BlockStatement]
		public CrossReference getReferencesBlockStatementCrossReference_1_2_0() { return cReferencesBlockStatementCrossReference_1_2_0; }
		
		//ID
		public RuleCall getReferencesBlockStatementIDTerminalRuleCall_1_2_0_1() { return cReferencesBlockStatementIDTerminalRuleCall_1_2_0_1; }
	}
	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.BlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBlockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJmlAnnotationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJmlAnnotationJMLAnnotationParserRuleCall_4_0 = (RuleCall)cJmlAnnotationAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cJavaStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cJavaStatementJavaStatementParserRuleCall_6_0 = (RuleCall)cJavaStatementAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BlockStatement returns AbstractStatement:
		//{BlockStatement}
		//        'Block' name=EString ':'
		//            (jmlAnnotation=JMLAnnotation)?
		//            '{' javaStatement=JavaStatement '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BlockStatement}
		//        'Block' name=EString ':'
		//            (jmlAnnotation=JMLAnnotation)?
		//            '{' javaStatement=JavaStatement '}'
		public Group getGroup() { return cGroup; }
		
		//{BlockStatement}
		public Action getBlockStatementAction_0() { return cBlockStatementAction_0; }
		
		//'Block'
		public Keyword getBlockKeyword_1() { return cBlockKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(jmlAnnotation=JMLAnnotation)?
		public Assignment getJmlAnnotationAssignment_4() { return cJmlAnnotationAssignment_4; }
		
		//JMLAnnotation
		public RuleCall getJmlAnnotationJMLAnnotationParserRuleCall_4_0() { return cJmlAnnotationJMLAnnotationParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//javaStatement=JavaStatement
		public Assignment getJavaStatementAssignment_6() { return cJavaStatementAssignment_6; }
		
		//JavaStatement
		public RuleCall getJavaStatementJavaStatementParserRuleCall_6_0() { return cJavaStatementJavaStatementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SelectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.SelectionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGuardsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGuardsConditionParserRuleCall_3_0 = (RuleCall)cGuardsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCommandsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommandsAbstractStatementParserRuleCall_7_0 = (RuleCall)cCommandsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cElseifKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cGuardsAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cGuardsConditionParserRuleCall_9_2_0 = (RuleCall)cGuardsAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Keyword cThenKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_9_5 = (Keyword)cGroup_9.eContents().get(5);
		private final Assignment cCommandsAssignment_9_6 = (Assignment)cGroup_9.eContents().get(6);
		private final RuleCall cCommandsAbstractStatementParserRuleCall_9_6_0 = (RuleCall)cCommandsAssignment_9_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_7 = (Keyword)cGroup_9.eContents().get(7);
		private final Keyword cFiKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//SelectionStatement returns AbstractStatement:
		//    {SelectionStatement}
		//        'If' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}'
		//        ('Elseif' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}')* 'Fi'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectionStatement}
		//    'If' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}'
		//    ('Elseif' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}')* 'Fi'
		public Group getGroup() { return cGroup; }
		
		//{SelectionStatement}
		public Action getSelectionStatementAction_0() { return cSelectionStatementAction_0; }
		
		//'If'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//guards+=Condition
		public Assignment getGuardsAssignment_3() { return cGuardsAssignment_3; }
		
		//Condition
		public RuleCall getGuardsConditionParserRuleCall_3_0() { return cGuardsConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'Then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//commands+=AbstractStatement
		public Assignment getCommandsAssignment_7() { return cCommandsAssignment_7; }
		
		//AbstractStatement
		public RuleCall getCommandsAbstractStatementParserRuleCall_7_0() { return cCommandsAbstractStatementParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//('Elseif' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}')*
		public Group getGroup_9() { return cGroup_9; }
		
		//'Elseif'
		public Keyword getElseifKeyword_9_0() { return cElseifKeyword_9_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }
		
		//guards+=Condition
		public Assignment getGuardsAssignment_9_2() { return cGuardsAssignment_9_2; }
		
		//Condition
		public RuleCall getGuardsConditionParserRuleCall_9_2_0() { return cGuardsConditionParserRuleCall_9_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }
		
		//'Then'
		public Keyword getThenKeyword_9_4() { return cThenKeyword_9_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_5() { return cLeftCurlyBracketKeyword_9_5; }
		
		//commands+=AbstractStatement
		public Assignment getCommandsAssignment_9_6() { return cCommandsAssignment_9_6; }
		
		//AbstractStatement
		public RuleCall getCommandsAbstractStatementParserRuleCall_9_6_0() { return cCommandsAbstractStatementParserRuleCall_9_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_7() { return cRightCurlyBracketKeyword_9_7; }
		
		//'Fi'
		public Keyword getFiKeyword_10() { return cFiKeyword_10; }
	}
	public class SmallRepetitionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.SmallRepetitionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSmallRepetitionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGuardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGuardConditionParserRuleCall_3_0 = (RuleCall)cGuardAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDoKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cInvKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cInvariantAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInvariantConditionParserRuleCall_8_0 = (RuleCall)cInvariantAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cVarKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cVariantAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cVariantVariantParserRuleCall_12_0 = (RuleCall)cVariantAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cLeftCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cLoopStatementAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cLoopStatementAbstractStatementParserRuleCall_15_0 = (RuleCall)cLoopStatementAssignment_15.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cOdKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//SmallRepetitionStatement returns AbstractStatement:
		//    {SmallRepetitionStatement}
		//        'While' '(' guard=Condition ')' 'Do'
		//        'Inv:' '(' invariant=Condition ')'
		//        'Var:' '(' variant=Variant ')'
		//        '{' loopStatement=AbstractStatement '}' 'Od'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{SmallRepetitionStatement}
		//    'While' '(' guard=Condition ')' 'Do'
		//    'Inv:' '(' invariant=Condition ')'
		//    'Var:' '(' variant=Variant ')'
		//    '{' loopStatement=AbstractStatement '}' 'Od'
		public Group getGroup() { return cGroup; }
		
		//{SmallRepetitionStatement}
		public Action getSmallRepetitionStatementAction_0() { return cSmallRepetitionStatementAction_0; }
		
		//'While'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//guard=Condition
		public Assignment getGuardAssignment_3() { return cGuardAssignment_3; }
		
		//Condition
		public RuleCall getGuardConditionParserRuleCall_3_0() { return cGuardConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'Do'
		public Keyword getDoKeyword_5() { return cDoKeyword_5; }
		
		//'Inv:'
		public Keyword getInvKeyword_6() { return cInvKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//invariant=Condition
		public Assignment getInvariantAssignment_8() { return cInvariantAssignment_8; }
		
		//Condition
		public RuleCall getInvariantConditionParserRuleCall_8_0() { return cInvariantConditionParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//'Var:'
		public Keyword getVarKeyword_10() { return cVarKeyword_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }
		
		//variant=Variant
		public Assignment getVariantAssignment_12() { return cVariantAssignment_12; }
		
		//Variant
		public RuleCall getVariantVariantParserRuleCall_12_0() { return cVariantVariantParserRuleCall_12_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_14() { return cLeftCurlyBracketKeyword_14; }
		
		//loopStatement=AbstractStatement
		public Assignment getLoopStatementAssignment_15() { return cLoopStatementAssignment_15; }
		
		//AbstractStatement
		public RuleCall getLoopStatementAbstractStatementParserRuleCall_15_0() { return cLoopStatementAbstractStatementParserRuleCall_15_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
		
		//'Od'
		public Keyword getOdKeyword_17() { return cOdKeyword_17; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Variant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variant returns Variant:
		//    {Variant}
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variant}
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class JavaVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.JavaVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJavaVariablesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJavaVariablesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVariablesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cVariablesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cVariablesJavaVariableParserRuleCall_2_2_0 = (RuleCall)cVariablesAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cVariablesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cVariablesJavaVariableParserRuleCall_2_3_1_0 = (RuleCall)cVariablesAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//JavaVariables returns JavaVariables:
		//    {JavaVariables}
		//    'JavaVariables'
		//    ('Variables' '[' variables+=JavaVariable ( "," variables+=JavaVariable)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{JavaVariables}
		//'JavaVariables'
		//('Variables' '[' variables+=JavaVariable ( "," variables+=JavaVariable)* ']')?
		public Group getGroup() { return cGroup; }
		
		//{JavaVariables}
		public Action getJavaVariablesAction_0() { return cJavaVariablesAction_0; }
		
		//'JavaVariables'
		public Keyword getJavaVariablesKeyword_1() { return cJavaVariablesKeyword_1; }
		
		//('Variables' '[' variables+=JavaVariable ( "," variables+=JavaVariable)* ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Variables'
		public Keyword getVariablesKeyword_2_0() { return cVariablesKeyword_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//variables+=JavaVariable
		public Assignment getVariablesAssignment_2_2() { return cVariablesAssignment_2_2; }
		
		//JavaVariable
		public RuleCall getVariablesJavaVariableParserRuleCall_2_2_0() { return cVariablesJavaVariableParserRuleCall_2_2_0; }
		
		//( "," variables+=JavaVariable)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//variables+=JavaVariable
		public Assignment getVariablesAssignment_2_3_1() { return cVariablesAssignment_2_3_1; }
		
		//JavaVariable
		public RuleCall getVariablesJavaVariableParserRuleCall_2_3_1_0() { return cVariablesJavaVariableParserRuleCall_2_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}
	public class JavaVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.JavaVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJavaVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVariableOrMethodNameParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		
		//JavaVariable returns JavaVariable:
		//    {JavaVariable}
		//    type=JvmTypeReference var=VariableOrMethodName;
		@Override public ParserRule getRule() { return rule; }
		
		//{JavaVariable}
		//type=JvmTypeReference var=VariableOrMethodName
		public Group getGroup() { return cGroup; }
		
		//{JavaVariable}
		public Action getJavaVariableAction_0() { return cJavaVariableAction_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//var=VariableOrMethodName
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//VariableOrMethodName
		public RuleCall getVarVariableOrMethodNameParserRuleCall_2_0() { return cVarVariableOrMethodNameParserRuleCall_2_0; }
	}
	public class GlobalConditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.GlobalConditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalConditionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGlobalConditionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConditionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConditionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_2_2_0 = (RuleCall)cConditionsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cConditionsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_2_3_1_0 = (RuleCall)cConditionsAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//GlobalConditions returns GlobalConditions:
		//    {GlobalConditions}
		//    'GlobalConditions'
		//    ('Conditions' '[' conditions+=Condition ( "," conditions+=Condition)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GlobalConditions}
		//'GlobalConditions'
		//('Conditions' '[' conditions+=Condition ( "," conditions+=Condition)* ']')?
		public Group getGroup() { return cGroup; }
		
		//{GlobalConditions}
		public Action getGlobalConditionsAction_0() { return cGlobalConditionsAction_0; }
		
		//'GlobalConditions'
		public Keyword getGlobalConditionsKeyword_1() { return cGlobalConditionsKeyword_1; }
		
		//('Conditions' '[' conditions+=Condition ( "," conditions+=Condition)* ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Conditions'
		public Keyword getConditionsKeyword_2_0() { return cConditionsKeyword_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_2_2() { return cConditionsAssignment_2_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_2_0() { return cConditionsConditionParserRuleCall_2_2_0; }
		
		//( "," conditions+=Condition)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_2_3_1() { return cConditionsAssignment_2_3_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_3_1_0() { return cConditionsConditionParserRuleCall_2_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}
	public class RenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Renaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRenamingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRenamingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRenamesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRenameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRenameRenameParserRuleCall_2_2_0 = (RuleCall)cRenameAssignment_2_2.eContents().get(0);
		private final Assignment cRenameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRenameRenameParserRuleCall_2_3_0 = (RuleCall)cRenameAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Renaming returns Renaming:
		//    {Renaming}
		//    'Renaming'
		//    ('Renames' '[' rename+=Rename (rename+=Rename)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Renaming}
		//'Renaming'
		//('Renames' '[' rename+=Rename (rename+=Rename)* ']')?
		public Group getGroup() { return cGroup; }
		
		//{Renaming}
		public Action getRenamingAction_0() { return cRenamingAction_0; }
		
		//'Renaming'
		public Keyword getRenamingKeyword_1() { return cRenamingKeyword_1; }
		
		//('Renames' '[' rename+=Rename (rename+=Rename)* ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Renames'
		public Keyword getRenamesKeyword_2_0() { return cRenamesKeyword_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//rename+=Rename
		public Assignment getRenameAssignment_2_2() { return cRenameAssignment_2_2; }
		
		//Rename
		public RuleCall getRenameRenameParserRuleCall_2_2_0() { return cRenameRenameParserRuleCall_2_2_0; }
		
		//(rename+=Rename)*
		public Assignment getRenameAssignment_2_3() { return cRenameAssignment_2_3; }
		
		//Rename
		public RuleCall getRenameRenameParserRuleCall_2_3_0() { return cRenameRenameParserRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}
	public class RenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Rename");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRenameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeEStringParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cFunctionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionEStringParserRuleCall_5_0 = (RuleCall)cFunctionAssignment_5.eContents().get(0);
		private final Keyword cNewNameKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNewNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNewNameEStringParserRuleCall_7_0 = (RuleCall)cNewNameAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Rename returns Rename:
		//    {Rename}
		//    '{'
		//    'Type' type=EString
		//    'Function' function=EString
		//    'NewName' newName=EString
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Rename}
		//'{'
		//'Type' type=EString
		//'Function' function=EString
		//'NewName' newName=EString
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Rename}
		public Action getRenameAction_0() { return cRenameAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=EString
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_3_0() { return cTypeEStringParserRuleCall_3_0; }
		
		//'Function'
		public Keyword getFunctionKeyword_4() { return cFunctionKeyword_4; }
		
		//function=EString
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }
		
		//EString
		public RuleCall getFunctionEStringParserRuleCall_5_0() { return cFunctionEStringParserRuleCall_5_0; }
		
		//'NewName'
		public Keyword getNewNameKeyword_6() { return cNewNameKeyword_6; }
		
		//newName=EString
		public Assignment getNewNameAssignment_7() { return cNewNameAssignment_7; }
		
		//EString
		public RuleCall getNewNameEStringParserRuleCall_7_0() { return cNewNameEStringParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Expression");
		private final RuleCall cForeachParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//    Foreach;
		@Override public ParserRule getRule() { return rule; }
		
		//Foreach
		public RuleCall getForeachParserRuleCall() { return cForeachParserRuleCall; }
	}
	public class VariableOrMethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.VariableOrMethodName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableOrMethodName:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Foreach");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cForeachAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cForeachForeachKeyword_1_0_0 = (Keyword)cForeachAssignment_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cVarAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cVarVariableOrMethodNameParserRuleCall_1_2_0 = (RuleCall)cVarAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightExistsParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Foreach returns Expression:
		//    Exists | (foreach="(\\foreach" type=JvmTypeReference var=VariableOrMethodName ";" right=Exists ")")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Exists | (foreach="(\\foreach" type=JvmTypeReference var=VariableOrMethodName ";" right=Exists ")")
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Exists
		public RuleCall getExistsParserRuleCall_0() { return cExistsParserRuleCall_0; }
		
		//(foreach="(\\foreach" type=JvmTypeReference var=VariableOrMethodName ";" right=Exists ")")
		public Group getGroup_1() { return cGroup_1; }
		
		//foreach="(\\foreach"
		public Assignment getForeachAssignment_1_0() { return cForeachAssignment_1_0; }
		
		//"(\\foreach"
		public Keyword getForeachForeachKeyword_1_0_0() { return cForeachForeachKeyword_1_0_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_1_0; }
		
		//var=VariableOrMethodName
		public Assignment getVarAssignment_1_2() { return cVarAssignment_1_2; }
		
		//VariableOrMethodName
		public RuleCall getVarVariableOrMethodNameParserRuleCall_1_2_0() { return cVarVariableOrMethodNameParserRuleCall_1_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
		
		//right=Exists
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }
		
		//Exists
		public RuleCall getRightExistsParserRuleCall_1_4_0() { return cRightExistsParserRuleCall_1_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}
	public class ExistsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Exists");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExistsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cExistsExistsKeyword_1_0_0 = (Keyword)cExistsAssignment_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cVarAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cVarVariableOrMethodNameParserRuleCall_1_2_0 = (RuleCall)cVarAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightRelationParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Exists returns Expression:
		//    Relation | (exists="(\\exists" type=JvmTypeReference var=VariableOrMethodName ";" right=Relation ")")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Relation | (exists="(\\exists" type=JvmTypeReference var=VariableOrMethodName ";" right=Relation ")")
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_0() { return cRelationParserRuleCall_0; }
		
		//(exists="(\\exists" type=JvmTypeReference var=VariableOrMethodName ";" right=Relation ")")
		public Group getGroup_1() { return cGroup_1; }
		
		//exists="(\\exists"
		public Assignment getExistsAssignment_1_0() { return cExistsAssignment_1_0; }
		
		//"(\\exists"
		public Keyword getExistsExistsKeyword_1_0_0() { return cExistsExistsKeyword_1_0_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_1_0; }
		
		//var=VariableOrMethodName
		public Assignment getVarAssignment_1_2() { return cVarAssignment_1_2; }
		
		//VariableOrMethodName
		public RuleCall getVarVariableOrMethodNameParserRuleCall_1_2_0() { return cVarVariableOrMethodNameParserRuleCall_1_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
		
		//right=Relation
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }
		
		//Relation
		public RuleCall getRightRelationParserRuleCall_1_4_0() { return cRightRelationParserRuleCall_1_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cLowerLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cGreaterLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cEqualLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cLowerEqualLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cGreaterEqualLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Relation returns Expression:
		//    Implication ( ({Lower.left=current} "<" | {Greater.left=current} ">" | {Equal.left=current} "=" | {LowerEqual.left=current} "<=" | {GreaterEqual.left=current} ">=") right=Implication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Implication ( ({Lower.left=current} "<" | {Greater.left=current} ">" | {Equal.left=current} "=" | {LowerEqual.left=current} "<=" | {GreaterEqual.left=current} ">=") right=Implication)*
		public Group getGroup() { return cGroup; }
		
		//Implication
		public RuleCall getImplicationParserRuleCall_0() { return cImplicationParserRuleCall_0; }
		
		//( ({Lower.left=current} "<" | {Greater.left=current} ">" | {Equal.left=current} "=" | {LowerEqual.left=current} "<=" | {GreaterEqual.left=current} ">=") right=Implication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Lower.left=current} "<" | {Greater.left=current} ">" | {Equal.left=current} "=" | {LowerEqual.left=current} "<=" | {GreaterEqual.left=current} ">=")
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Lower.left=current} "<"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Lower.left=current}
		public Action getLowerLeftAction_1_0_0_0() { return cLowerLeftAction_1_0_0_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1_0_0_1() { return cLessThanSignKeyword_1_0_0_1; }
		
		//{Greater.left=current} ">"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Greater.left=current}
		public Action getGreaterLeftAction_1_0_1_0() { return cGreaterLeftAction_1_0_1_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_1_0_1_1() { return cGreaterThanSignKeyword_1_0_1_1; }
		
		//{Equal.left=current} "="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Equal.left=current}
		public Action getEqualLeftAction_1_0_2_0() { return cEqualLeftAction_1_0_2_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_2_1() { return cEqualsSignKeyword_1_0_2_1; }
		
		//{LowerEqual.left=current} "<="
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//{LowerEqual.left=current}
		public Action getLowerEqualLeftAction_1_0_3_0() { return cLowerEqualLeftAction_1_0_3_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_3_1() { return cLessThanSignEqualsSignKeyword_1_0_3_1; }
		
		//{GreaterEqual.left=current} ">="
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//{GreaterEqual.left=current}
		public Action getGreaterEqualLeftAction_1_0_4_0() { return cGreaterEqualLeftAction_1_0_4_0; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_4_1() { return cGreaterThanSignEqualsSignKeyword_1_0_4_1; }
		
		//right=Implication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Implication
		public RuleCall getRightImplicationParserRuleCall_1_1_0() { return cRightImplicationParserRuleCall_1_1_0; }
	}
	public class ImplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Implication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcatParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cImplLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightConcatParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Implication returns Expression:
		//    Concat (( {Impl.left=current} '->') right=Concat)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Concat (( {Impl.left=current} '->') right=Concat)*
		public Group getGroup() { return cGroup; }
		
		//Concat
		public RuleCall getConcatParserRuleCall_0() { return cConcatParserRuleCall_0; }
		
		//(( {Impl.left=current} '->') right=Concat)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {Impl.left=current} '->')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Impl.left=current}
		public Action getImplLeftAction_1_0_0() { return cImplLeftAction_1_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_1; }
		
		//right=Concat
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Concat
		public RuleCall getRightConcatParserRuleCall_1_1_0() { return cRightConcatParserRuleCall_1_1_0; }
	}
	public class ConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Concat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAndLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cOrLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Concat returns Expression:
		//    PrimaryExpression (({And.left=current} '&' | {Or.left=current} '|') right=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression (({And.left=current} '&' | {Or.left=current} '|') right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//(({And.left=current} '&' | {Or.left=current} '|') right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({And.left=current} '&' | {Or.left=current} '|')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{And.left=current} '&'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0_0_0() { return cAndLeftAction_1_0_0_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0_0_1() { return cAmpersandKeyword_1_0_0_1; }
		
		//{Or.left=current} '|'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0_1_0() { return cOrLeftAction_1_0_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0_1_1() { return cVerticalLineKeyword_1_0_1_1; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Keyword cFalseKeyword_0_1_0_0 = (Keyword)cAlternatives_0_1_0.eContents().get(0);
		private final Assignment cIsTrueAssignment_0_1_0_1 = (Assignment)cAlternatives_0_1_0.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_0_1_0_1_0 = (Keyword)cIsTrueAssignment_0_1_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFunctionCallAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cFuncAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFuncVariableOrMethodNameParserRuleCall_2_1_0 = (RuleCall)cFuncAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Assignment cArgsAssignment_2_2_1_0 = (Assignment)cGroup_2_2_1.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_2_1_0_0 = (RuleCall)cArgsAssignment_2_2_1_0.eContents().get(0);
		private final Group cGroup_2_2_1_1 = (Group)cGroup_2_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_1_0 = (Keyword)cGroup_2_2_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_2_1_1_1 = (Assignment)cGroup_2_2_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_2_1_1_1_0 = (RuleCall)cArgsAssignment_2_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//PrimaryExpression returns Expression:
		//    {Expression} => ('false' | isTrue?='true') |
		//    '(' Expression ')' |
		//    {FunctionCall} func=VariableOrMethodName ('(' (args+=Expression (',' args+=Expression)* )?')')? |
		//    {Expression} Number
		//     ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression} => ('false' | isTrue?='true') |
		//'(' Expression ')' |
		//{FunctionCall} func=VariableOrMethodName ('(' (args+=Expression (',' args+=Expression)* )?')')? |
		//{Expression} Number
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Expression} => ('false' | isTrue?='true')
		public Group getGroup_0() { return cGroup_0; }
		
		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }
		
		//=> ('false' | isTrue?='true')
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'false' | isTrue?='true'
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }
		
		//'false'
		public Keyword getFalseKeyword_0_1_0_0() { return cFalseKeyword_0_1_0_0; }
		
		//isTrue?='true'
		public Assignment getIsTrueAssignment_0_1_0_1() { return cIsTrueAssignment_0_1_0_1; }
		
		//'true'
		public Keyword getIsTrueTrueKeyword_0_1_0_1_0() { return cIsTrueTrueKeyword_0_1_0_1_0; }
		
		//'(' Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//{FunctionCall} func=VariableOrMethodName ('(' (args+=Expression (',' args+=Expression)* )?')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_2_0() { return cFunctionCallAction_2_0; }
		
		//func=VariableOrMethodName
		public Assignment getFuncAssignment_2_1() { return cFuncAssignment_2_1; }
		
		//VariableOrMethodName
		public RuleCall getFuncVariableOrMethodNameParserRuleCall_2_1_0() { return cFuncVariableOrMethodNameParserRuleCall_2_1_0; }
		
		//('(' (args+=Expression (',' args+=Expression)* )?')')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2_0() { return cLeftParenthesisKeyword_2_2_0; }
		
		//(args+=Expression (',' args+=Expression)* )?
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_2_1_0() { return cArgsAssignment_2_2_1_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_2_1_0_0() { return cArgsExpressionParserRuleCall_2_2_1_0_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_2_2_1_1() { return cGroup_2_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_2_1_1_0() { return cCommaKeyword_2_2_1_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_2_1_1_1() { return cArgsAssignment_2_2_1_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_2_1_1_1_0() { return cArgsExpressionParserRuleCall_2_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2_2() { return cRightParenthesisKeyword_2_2_2; }
		
		//{Expression} Number
		public Group getGroup_3() { return cGroup_3; }
		
		//{Expression}
		public Action getExpressionAction_3_0() { return cExpressionAction_3_0; }
		
		//Number
		public RuleCall getNumberParserRuleCall_3_1() { return cNumberParserRuleCall_3_1; }
	}
	
	
	private final CbCProblemElements pCbCProblem;
	private final CbCFormulaElements pCbCFormula;
	private final AbstractStatementElements pAbstractStatement;
	private final EStringElements pEString;
	private final CodeStringElements pCodeString;
	private final VariableStringElements pVariableString;
	private final OperationElements pOperation;
	private final AbstractStatement_ImplElements pAbstractStatement_Impl;
	private final MethodStatementElements pMethodStatement;
	private final ReturnStatementElements pReturnStatement;
	private final StrengthWeakStatementElements pStrengthWeakStatement;
	private final ConditionElements pCondition;
	private final SkipStatementElements pSkipStatement;
	private final CompositionStatementElements pCompositionStatement;
	private final JavaStatementElements pJavaStatement;
	private final JMLAnnotationElements pJMLAnnotation;
	private final InlineBlockStatementElements pInlineBlockStatement;
	private final BlockStatementElements pBlockStatement;
	private final SelectionStatementElements pSelectionStatement;
	private final SmallRepetitionStatementElements pSmallRepetitionStatement;
	private final EIntElements pEInt;
	private final VariantElements pVariant;
	private final JavaVariablesElements pJavaVariables;
	private final JavaVariableElements pJavaVariable;
	private final GlobalConditionsElements pGlobalConditions;
	private final RenamingElements pRenaming;
	private final RenameElements pRename;
	private final ExpressionElements pExpression;
	private final VariableOrMethodNameElements pVariableOrMethodName;
	private final ForeachElements pForeach;
	private final ExistsElements pExists;
	private final RelationElements pRelation;
	private final ImplicationElements pImplication;
	private final ConcatElements pConcat;
	private final PrimaryExpressionElements pPrimaryExpression;
	
	private final Grammar grammar;
	
	private final JbaseGrammarAccess gaJbase;
	
	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			JbaseGrammarAccess gaJbase,
			XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaJbase = gaJbase;
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pCbCProblem = new CbCProblemElements();
		this.pCbCFormula = new CbCFormulaElements();
		this.pAbstractStatement = new AbstractStatementElements();
		this.pEString = new EStringElements();
		this.pCodeString = new CodeStringElements();
		this.pVariableString = new VariableStringElements();
		this.pOperation = new OperationElements();
		this.pAbstractStatement_Impl = new AbstractStatement_ImplElements();
		this.pMethodStatement = new MethodStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pStrengthWeakStatement = new StrengthWeakStatementElements();
		this.pCondition = new ConditionElements();
		this.pSkipStatement = new SkipStatementElements();
		this.pCompositionStatement = new CompositionStatementElements();
		this.pJavaStatement = new JavaStatementElements();
		this.pJMLAnnotation = new JMLAnnotationElements();
		this.pInlineBlockStatement = new InlineBlockStatementElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pSelectionStatement = new SelectionStatementElements();
		this.pSmallRepetitionStatement = new SmallRepetitionStatementElements();
		this.pEInt = new EIntElements();
		this.pVariant = new VariantElements();
		this.pJavaVariables = new JavaVariablesElements();
		this.pJavaVariable = new JavaVariableElements();
		this.pGlobalConditions = new GlobalConditionsElements();
		this.pRenaming = new RenamingElements();
		this.pRename = new RenameElements();
		this.pExpression = new ExpressionElements();
		this.pVariableOrMethodName = new VariableOrMethodNameElements();
		this.pForeach = new ForeachElements();
		this.pExists = new ExistsElements();
		this.pRelation = new RelationElements();
		this.pImplication = new ImplicationElements();
		this.pConcat = new ConcatElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tu_bs.cs.isf.cbc.textual.tool.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public JbaseGrammarAccess getJbaseGrammarAccess() {
		return gaJbase;
	}
	
	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	////import "http://www.eclipse.org/xtext/xbase/Xbase"
	////import "http://www.eclipse.org/xtext/common/JavaVMTypes"
	//CbCProblem returns CbCProblem:
	//        (cbcformula=CbCFormula
	//        & (globalcondition=GlobalConditions)?
	//        & (javaVariable=JavaVariables)?
	//        & (renaming=Renaming)?)
	//        | BlockStatement
	//        ;
	public CbCProblemElements getCbCProblemAccess() {
		return pCbCProblem;
	}
	
	public ParserRule getCbCProblemRule() {
		return getCbCProblemAccess().getRule();
	}
	
	//CbCFormula returns CbCFormula:
	//    'Formula'
	//    name=EString
	//        'Pre:' '(' preCondition=Condition ')'
	//        '{' statement=AbstractStatement '}'
	//        'Post:' '(' postCondition=Condition ')'
	//    ;
	public CbCFormulaElements getCbCFormulaAccess() {
		return pCbCFormula;
	}
	
	public ParserRule getCbCFormulaRule() {
		return getCbCFormulaAccess().getRule();
	}
	
	//AbstractStatement returns AbstractStatement:
	//    AbstractStatement_Impl | InlineBlockStatement | CompositionStatement | SkipStatement | SelectionStatement | SmallRepetitionStatement | MethodStatement | ReturnStatement | StrengthWeakStatement;
	public AbstractStatementElements getAbstractStatementAccess() {
		return pAbstractStatement;
	}
	
	public ParserRule getAbstractStatementRule() {
		return getAbstractStatementAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//CodeString returns ecore::EString:
	//            (ID ('[' (ID | INT) ']')? '=' '('? (VariableString | '-'? INT) (Operation '('* ( VariableString | '-'? INT ) ')'*)* ';')+
	//        ;
	public CodeStringElements getCodeStringAccess() {
		return pCodeString;
	}
	
	public ParserRule getCodeStringRule() {
		return getCodeStringAccess().getRule();
	}
	
	////CodeString returns ecore::EString:
	////            (ID ('[' (ID | INT) ']')? '=' TermString ';')+
	////        ;
	////
	////TermString returns ecore::EString:
	////    '('? (VariableString | '-'? INT | TermString2) Operation TermString ')'?
	////;
	////
	////TermString2 returns ecore::EString:
	////    '('? (VariableString | '-'? INT | TermString) Operation TermString ')'?
	////;
	//VariableString returns ecore::EString:
	//    '-'? ID (
	//            ('(' ( (VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)? |
	//            ('[' (VariableString | '-'? INT)? ']') ('.' VariableString)? |
	//            ('.' VariableString)
	//        )?
	//;
	public VariableStringElements getVariableStringAccess() {
		return pVariableString;
	}
	
	public ParserRule getVariableStringRule() {
		return getVariableStringAccess().getRule();
	}
	
	//        //ID( ('[' | '(') ( (VariableString | INT) (',' (VariableString | INT))*)? (']' | ')'))?
	//Operation:
	//    '+' | '-' | '*' | '/' | '%';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//AbstractStatement_Impl returns AbstractStatement:
	//    {AbstractStatement}
	//        name=CodeString;
	public AbstractStatement_ImplElements getAbstractStatement_ImplAccess() {
		return pAbstractStatement_Impl;
	}
	
	public ParserRule getAbstractStatement_ImplRule() {
		return getAbstractStatement_ImplAccess().getRule();
	}
	
	//MethodStatement returns AbstractStatement:
	//    {MethodStatement}
	//        name=EString;
	public MethodStatementElements getMethodStatementAccess() {
		return pMethodStatement;
	}
	
	public ParserRule getMethodStatementRule() {
		return getMethodStatementAccess().getRule();
	}
	
	//ReturnStatement returns AbstractStatement:
	//    {ReturnStatement}
	//        'Return' name=CodeString;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//StrengthWeakStatement returns AbstractStatement:
	//    {StrengthWeakStatement}
	//    'Pre:' '(' weakPreCondition=Condition ')'
	//        '{' name=CodeString '}'
	//        'Post:' '(' strongPostCondition=Condition ')'
	//;
	public StrengthWeakStatementElements getStrengthWeakStatementAccess() {
		return pStrengthWeakStatement;
	}
	
	public ParserRule getStrengthWeakStatementRule() {
		return getStrengthWeakStatementAccess().getRule();
	}
	
	//Condition:
	//    {Condition} condition=Expression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//SkipStatement returns AbstractStatement:
	//         name=';'
	//    ;
	public SkipStatementElements getSkipStatementAccess() {
		return pSkipStatement;
	}
	
	public ParserRule getSkipStatementRule() {
		return getSkipStatementAccess().getRule();
	}
	
	//CompositionStatement returns AbstractStatement:
	//    {CompositionStatement}
	//        '{' firstStatement=AbstractStatement '}'
	//        'Intm:' '(' intermediateCondition=Condition ')'
	//        '{' secondStatement=AbstractStatement '}'
	//    ;
	public CompositionStatementElements getCompositionStatementAccess() {
		return pCompositionStatement;
	}
	
	public ParserRule getCompositionStatementRule() {
		return getCompositionStatementAccess().getRule();
	}
	
	//JavaStatement returns AbstractStatement:
	//    {JavaStatement}
	//    (statement+=XJStatementOrBlock)+
	//;
	public JavaStatementElements getJavaStatementAccess() {
		return pJavaStatement;
	}
	
	public ParserRule getJavaStatementRule() {
		return getJavaStatementAccess().getRule();
	}
	
	//JMLAnnotation returns JMLAnnotation:
	//    "Pre:" "(" requires=Condition ")" &
	//    "Post:" "(" ensures=Condition  ")"
	//;
	public JMLAnnotationElements getJMLAnnotationAccess() {
		return pJMLAnnotation;
	}
	
	public ParserRule getJMLAnnotationRule() {
		return getJMLAnnotationAccess().getRule();
	}
	
	//InlineBlockStatement returns AbstractStatement:
	//    {InlineBlockStatement}
	//    block=BlockStatement | {InlineBlockStatement} "Block" references=[BlockStatement]
	//;
	public InlineBlockStatementElements getInlineBlockStatementAccess() {
		return pInlineBlockStatement;
	}
	
	public ParserRule getInlineBlockStatementRule() {
		return getInlineBlockStatementAccess().getRule();
	}
	
	//BlockStatement returns AbstractStatement:
	//{BlockStatement}
	//        'Block' name=EString ':'
	//            (jmlAnnotation=JMLAnnotation)?
	//            '{' javaStatement=JavaStatement '}'
	//    ;
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}
	
	//SelectionStatement returns AbstractStatement:
	//    {SelectionStatement}
	//        'If' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}'
	//        ('Elseif' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}')* 'Fi'
	//    ;
	public SelectionStatementElements getSelectionStatementAccess() {
		return pSelectionStatement;
	}
	
	public ParserRule getSelectionStatementRule() {
		return getSelectionStatementAccess().getRule();
	}
	
	//SmallRepetitionStatement returns AbstractStatement:
	//    {SmallRepetitionStatement}
	//        'While' '(' guard=Condition ')' 'Do'
	//        'Inv:' '(' invariant=Condition ')'
	//        'Var:' '(' variant=Variant ')'
	//        '{' loopStatement=AbstractStatement '}' 'Od'
	//    ;
	public SmallRepetitionStatementElements getSmallRepetitionStatementAccess() {
		return pSmallRepetitionStatement;
	}
	
	public ParserRule getSmallRepetitionStatementRule() {
		return getSmallRepetitionStatementAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Variant returns Variant:
	//    {Variant}
	//    name=EString;
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}
	
	//JavaVariables returns JavaVariables:
	//    {JavaVariables}
	//    'JavaVariables'
	//    ('Variables' '[' variables+=JavaVariable ( "," variables+=JavaVariable)* ']')?;
	public JavaVariablesElements getJavaVariablesAccess() {
		return pJavaVariables;
	}
	
	public ParserRule getJavaVariablesRule() {
		return getJavaVariablesAccess().getRule();
	}
	
	//JavaVariable returns JavaVariable:
	//    {JavaVariable}
	//    type=JvmTypeReference var=VariableOrMethodName;
	public JavaVariableElements getJavaVariableAccess() {
		return pJavaVariable;
	}
	
	public ParserRule getJavaVariableRule() {
		return getJavaVariableAccess().getRule();
	}
	
	//GlobalConditions returns GlobalConditions:
	//    {GlobalConditions}
	//    'GlobalConditions'
	//    ('Conditions' '[' conditions+=Condition ( "," conditions+=Condition)* ']')?;
	public GlobalConditionsElements getGlobalConditionsAccess() {
		return pGlobalConditions;
	}
	
	public ParserRule getGlobalConditionsRule() {
		return getGlobalConditionsAccess().getRule();
	}
	
	//Renaming returns Renaming:
	//    {Renaming}
	//    'Renaming'
	//    ('Renames' '[' rename+=Rename (rename+=Rename)* ']')?;
	public RenamingElements getRenamingAccess() {
		return pRenaming;
	}
	
	public ParserRule getRenamingRule() {
		return getRenamingAccess().getRule();
	}
	
	//Rename returns Rename:
	//    {Rename}
	//    '{'
	//    'Type' type=EString
	//    'Function' function=EString
	//    'NewName' newName=EString
	//    '}'
	//    ;
	public RenameElements getRenameAccess() {
		return pRename;
	}
	
	public ParserRule getRenameRule() {
		return getRenameAccess().getRule();
	}
	
	//Expression:
	//    Foreach;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//VariableOrMethodName:
	//    name=ID;
	public VariableOrMethodNameElements getVariableOrMethodNameAccess() {
		return pVariableOrMethodName;
	}
	
	public ParserRule getVariableOrMethodNameRule() {
		return getVariableOrMethodNameAccess().getRule();
	}
	
	//Foreach returns Expression:
	//    Exists | (foreach="(\\foreach" type=JvmTypeReference var=VariableOrMethodName ";" right=Exists ")")
	//;
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}
	
	//Exists returns Expression:
	//    Relation | (exists="(\\exists" type=JvmTypeReference var=VariableOrMethodName ";" right=Relation ")")
	//;
	public ExistsElements getExistsAccess() {
		return pExists;
	}
	
	public ParserRule getExistsRule() {
		return getExistsAccess().getRule();
	}
	
	//Relation returns Expression:
	//    Implication ( ({Lower.left=current} "<" | {Greater.left=current} ">" | {Equal.left=current} "=" | {LowerEqual.left=current} "<=" | {GreaterEqual.left=current} ">=") right=Implication)*;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//Implication returns Expression:
	//    Concat (( {Impl.left=current} '->') right=Concat)*;
	public ImplicationElements getImplicationAccess() {
		return pImplication;
	}
	
	public ParserRule getImplicationRule() {
		return getImplicationAccess().getRule();
	}
	
	//Concat returns Expression:
	//    PrimaryExpression (({And.left=current} '&' | {Or.left=current} '|') right=PrimaryExpression)*;
	public ConcatElements getConcatAccess() {
		return pConcat;
	}
	
	public ParserRule getConcatRule() {
		return getConcatAccess().getRule();
	}
	
	//PrimaryExpression returns Expression:
	//    {Expression} => ('false' | isTrue?='true') |
	//    '(' Expression ')' |
	//    {FunctionCall} func=VariableOrMethodName ('(' (args+=Expression (',' args+=Expression)* )?')')? |
	//    {Expression} Number
	//     ;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	///**
	// * The syntactic predicate on XBlockExpression is required to avoid
	// * ambiguity with array literal.  However, XBlockExpression must come first, to
	// * be able to parse both while(...) {} and while(...) st; for example.
	// * If we put the predicate on single statement, then it does not seem to
	// * be possible to parse incomplete member feature call.
	// */
	//XJStatementOrBlock returns XExpression:
	////    XJArrayConstructorCall | not a valid statement
	//    =>XBlockExpression |
	//    XJSingleStatement
	//;
	public JbaseGrammarAccess.XJStatementOrBlockElements getXJStatementOrBlockAccess() {
		return gaJbase.getXJStatementOrBlockAccess();
	}
	
	public ParserRule getXJStatementOrBlockRule() {
		return getXJStatementOrBlockAccess().getRule();
	}
	
	///**
	// * Customize to reflect Java imports (e.g., no 'extension' keyword and mandatory ';' but many occurrences accepted)
	// */
	//@Override
	//XImportDeclaration returns xtype::XImportDeclaration:
	//    (=>'import' (
	//        (static?='static' importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[types::JvmDeclaredType|QualifiedName]
	//        | importedNamespace=QualifiedNameWithWildcard) ->';'*)
	//;
	public JbaseGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaJbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//@Override
	//JvmTypeReference returns types::JvmTypeReference:
	//    JvmParameterizedTypeReference =>({types::JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    // | XFunctionTypeRef;
	//;
	public JbaseGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaJbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//// customized with 'final' specification and varargs
	//@Override
	//FullJvmFormalParameter returns XJJvmFormalParameter:
	//    {XJJvmFormalParameter} final?='final'? parameterType=JvmTypeReference varArgs?='...'? name=ValidID;
	public JbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaJbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XJSingleStatement returns XExpression:
	//    XJSemicolonStatement |
	//    XSwitchExpression |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XJTryWithResourcesStatement |
	//    XTryCatchFinallyExpression |
	//    XSynchronizedExpression |
	//    XJEmptyStatement
	//;
	public JbaseGrammarAccess.XJSingleStatementElements getXJSingleStatementAccess() {
		return gaJbase.getXJSingleStatementAccess();
	}
	
	public ParserRule getXJSingleStatementRule() {
		return getXJSingleStatementAccess().getRule();
	}
	
	///*
	// * These are the Java statements that require a semicolon at the end.
	// *
	// * The final ; is optional in order to be able to parse incomplete
	// * expressions, provide nicer error messages and give better content assist.
	// * The presence of ';' is checked by the validator
	// */
	//XJSemicolonStatement returns XExpression:
	//    {XJSemicolonStatement}
	//    expression=
	//        (
	//            XJBranchingStatement |
	//            XExpressionOrVarDeclaration |
	//            XDoWhileExpression |
	//            XReturnExpression |
	//            XThrowExpression
	//        )
	//    ->semicolon=';'?
	//;
	public JbaseGrammarAccess.XJSemicolonStatementElements getXJSemicolonStatementAccess() {
		return gaJbase.getXJSemicolonStatementAccess();
	}
	
	public ParserRule getXJSemicolonStatementRule() {
		return getXJSemicolonStatementAccess().getRule();
	}
	
	//XJEmptyStatement returns XExpression:
	//    {XJSemicolonStatement} semicolon=';'
	//;
	public JbaseGrammarAccess.XJEmptyStatementElements getXJEmptyStatementAccess() {
		return gaJbase.getXJEmptyStatementAccess();
	}
	
	public ParserRule getXJEmptyStatementRule() {
		return getXJEmptyStatementAccess().getRule();
	}
	
	//XJBranchingStatement returns XExpression:
	//    {XJContinueStatement} "continue" |
	//    {XJBreakStatement} "break"
	//;
	public JbaseGrammarAccess.XJBranchingStatementElements getXJBranchingStatementAccess() {
		return gaJbase.getXJBranchingStatementAccess();
	}
	
	public ParserRule getXJBranchingStatementRule() {
		return getXJBranchingStatementAccess().getRule();
	}
	
	///*
	// * The semicolons ';' are handled by the XJSemicolonStatement rule
	// */
	//@Override
	//XBlockExpression returns XExpression:
	//    {XBlockExpression}
	//    '{'
	//        (expressions+=XJStatementOrBlock)*
	//    '}';
	public JbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaJbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//// Don't put the predicate in the rule for XExpressionOrVarDeclaration:
	//// it would break partial parsing:
	//// "int i =" would not be parsed as an incomplete variable declaration
	//// put the predicate in XVariableDeclaration rule directly
	////XExpressionOrVarDeclaration returns XExpression:
	////    =>XVariableDeclaration | XExpression;
	//// Use the predicate to avoid ambiguities with XExpression
	//@Override
	//XVariableDeclaration returns XVariableDeclaration:
	//    =>({XJVariableDeclaration}
	//    final?='final'?
	//    type=JvmTypeReference name=ValidID) ('=' right=XExpression)?
	//    (=>',' additionalVariables+=XJAdditionalXVariableDeclaration)*;
	public JbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaJbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//    // the second predicate is to avoid ambiguities with for loops
	//    // that already consider several variable declarations
	//    // in our case we always parse them as several variable declarations
	//    // since we allow them also as standard variable declarations as in Java
	//XJAdditionalXVariableDeclaration returns XVariableDeclaration:
	//    {XJAdditionalXVariableDeclaration}
	//    name=ValidID ('=' right=XExpression)?;
	public JbaseGrammarAccess.XJAdditionalXVariableDeclarationElements getXJAdditionalXVariableDeclarationAccess() {
		return gaJbase.getXJAdditionalXVariableDeclarationAccess();
	}
	
	public ParserRule getXJAdditionalXVariableDeclarationRule() {
		return getXJAdditionalXVariableDeclarationAccess().getRule();
	}
	
	//@Override
	//XAssignment returns XExpression :
	//    =>({XJAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
	//        '[' indexes+=XExpression ']'('[' indexes+=XExpression ']')*
	//        OpSingleAssign) value=XAssignment |
	//    =>({XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
	//        OpSingleAssign) value=XAssignment |
	//    XOrExpression (
	//        =>({XJConditionalExpression.if=current} '?') then=XExpression ':' else=XExpression
	//        |
	//        =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?;
	public JbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaJbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//@Override
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '&=' | '|=' | '^=' | // added in Jbase
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public JbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaJbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XJFeatureCallWithArrayAccess returns XExpression:
	//    XFeatureCall (
	//        =>({XJArrayAccessExpression.array=current}
	//            '[' indexes+=XExpression ']' (=>'[' indexes+=XExpression ']')*)
	//    )?
	//;
	public JbaseGrammarAccess.XJFeatureCallWithArrayAccessElements getXJFeatureCallWithArrayAccessAccess() {
		return gaJbase.getXJFeatureCallWithArrayAccessAccess();
	}
	
	public ParserRule getXJFeatureCallWithArrayAccessRule() {
		return getXJFeatureCallWithArrayAccessAccess().getRule();
	}
	
	//@Override
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')'
	//    )?;
	public JbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaJbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//// also record '<' to tell whether it's a diamond operator
	//@Override
	//XConstructorCall returns XExpression:
	//    {XJConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>explicitTypeArguments?='<' (typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)*)? '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?;
	public JbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaJbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//// dimensions and dimension expressions (feature indexes) are not associated during parsing,
	//// the association, i.e., knowing whether a dimension expression comes after
	//// an empty dimension (which is not legal), will be retrieved by
	//// JbaseModelUtil.arrayDimensionIndexAssociations(XJArrayConstructorCall)
	//// based on the offset of the [ and the array dimension XEpression
	//XJArrayConstructorCall returns XExpression:
	//    =>({XJArrayConstructorCall}
	//    'new'
	//    type=[types::JvmType|QualifiedName] dimensions+=XJArrayDimension)
	//    // getting here is enough to tell it's an array constructor call
	//    (indexes+=XExpression)? ']'
	//    (=>dimensions+=XJArrayDimension (indexes+=XExpression)? ']')*
	//    (=>arrayLiteral=XJArrayLiteral)?
	//;
	public JbaseGrammarAccess.XJArrayConstructorCallElements getXJArrayConstructorCallAccess() {
		return gaJbase.getXJArrayConstructorCallAccess();
	}
	
	public ParserRule getXJArrayConstructorCallRule() {
		return getXJArrayConstructorCallAccess().getRule();
	}
	
	//// We need an EObject instead of a simple String since we then
	//// need to find the corresponding node (and offset) with NodeModelUtils
	//// in order to associate dimensions with indexes
	//XJArrayDimension:
	//    {XJArrayDimension} '['
	//;
	public JbaseGrammarAccess.XJArrayDimensionElements getXJArrayDimensionAccess() {
		return gaJbase.getXJArrayDimensionAccess();
	}
	
	public ParserRule getXJArrayDimensionRule() {
		return getXJArrayDimensionAccess().getRule();
	}
	
	//@Override
	//XCastedExpression returns XExpression:
	//    =>({XCastedExpression} '(' type=JvmTypeReference ')' target=XExpression)
	//    |
	//    XPostfixOperation
	//;
	public JbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaJbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//@Override
	//XPostfixOperation returns XExpression:
	//    =>({XJPrefixOperation} feature=[types::JvmIdentifiableElement|OpPostfix]) operand=XMemberFeatureCall
	//    |
	//    XMemberFeatureCall
	//    (
	//        =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])
	//        |
	//        =>({XJArrayAccessExpression.array=current} '[' indexes+=XExpression ']'(=>'[' indexes+=XExpression ']')*)
	//    )?
	//;
	public JbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaJbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//@Override
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (
	//// we don't need this at the moment
	////        =>({XJAssignment.assignable=current} ('.'|explicitStatic?="::")
	////            feature=[types::JvmIdentifiableElement|FeatureCallID]
	////            '[' index=XExpression ']'
	////            OpSingleAssign) value=XAssignment
	////    |
	//        =>({XJClassObject.typeExpression=current} (arrayDimensions+=ArrayBrackets)* '.' 'class')
	//    |
	//        =>({XAssignment.assignable=current} '.'
	//            feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
	//                value=XAssignment
	//    |
	//        =>({XMemberFeatureCall.memberCallTarget=current} ".")
	//            feature=[types::JvmIdentifiableElement|IdOrSuper] (
	//                =>explicitOperationCall?='('
	//                    (
	//                        memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                    )?
	//                ')')?
	//    )*;
	public JbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaJbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//// in Java the type must be specified so we must use FullJvmFormalParameter instead of JvmFormalParameter
	//@Override
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=FullJvmFormalParameter ':') forExpression=XExpression ')'
	//        eachExpression=XJStatementOrBlock;
	public JbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaJbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//@Override
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=XJStatementOrBlock;
	public JbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaJbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//@Override
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')'
	//    then=XJStatementOrBlock
	//    (=>'else' else=XJStatementOrBlock)?;
	public JbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaJbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//@Override
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=XJStatementOrBlock;
	public JbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaJbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//@Override
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//   'do'
	//       body=XJStatementOrBlock
	//   'while' '(' predicate=XExpression ')';
	public JbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaJbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//@Override
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' '(' switch=XExpression ')' '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XJSwitchStatements )?
	//    '}';
	public JbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaJbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//@Override
	//XCasePart:
	//    {XCasePart}
	//    'case' case=XExpression
	//        ':' then=XJSwitchStatements;
	public JbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaJbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	///**
	// * Java switch's case expression does not require an explicit block { }
	// */
	//XJSwitchStatements returns XExpression:
	//    {XJSwitchStatements}
	//    (expressions+=XJStatementOrBlock)*
	//;
	public JbaseGrammarAccess.XJSwitchStatementsElements getXJSwitchStatementsAccess() {
		return gaJbase.getXJSwitchStatementsAccess();
	}
	
	public ParserRule getXJSwitchStatementsRule() {
		return getXJSwitchStatementsAccess().getRule();
	}
	
	///**
	// * Java 7 try-with-resources
	// */
	//XJTryWithResourcesStatement returns XExpression:
	//    =>({XJTryWithResourcesStatement} 'try' openParenthesis?='(')
	//    resources+=XJTryWithResourcesVariableDeclaration*
	//    ')'
	//    expression=XBlockExpression
	//    catchClauses+=XCatchClause*
	//    ('finally' finallyExpression=XBlockExpression)?
	//;
	public JbaseGrammarAccess.XJTryWithResourcesStatementElements getXJTryWithResourcesStatementAccess() {
		return gaJbase.getXJTryWithResourcesStatementAccess();
	}
	
	public ParserRule getXJTryWithResourcesStatementRule() {
		return getXJTryWithResourcesStatementAccess().getRule();
	}
	
	///*
	// * The final ; is optional in the last variable declaration in a
	// * try-with-resources
	// */
	//XJTryWithResourcesVariableDeclaration:
	//    {XJTryWithResourcesVariableDeclaration}
	//    final?='final'?
	//    type=JvmTypeReference name=ValidID '=' right=XExpression
	//    semicolon=';'?
	//;
	public JbaseGrammarAccess.XJTryWithResourcesVariableDeclarationElements getXJTryWithResourcesVariableDeclarationAccess() {
		return gaJbase.getXJTryWithResourcesVariableDeclarationAccess();
	}
	
	public ParserRule getXJTryWithResourcesVariableDeclarationRule() {
		return getXJTryWithResourcesVariableDeclarationAccess().getRule();
	}
	
	///**
	// * Java needs blocks for try, catch, finally
	// */
	//@Override
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try'
	//        expression=XBlockExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XBlockExpression)?
	//    |    'finally' finallyExpression=XBlockExpression
	//    );
	public JbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaJbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//// the explicit {XCatchClause} is required to make formatting work
	//@Override
	//XCatchClause :
	//    {XCatchClause} =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XBlockExpression;
	public JbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaJbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	///**
	// * Java needs block for synchronized
	// */
	//@Override
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XBlockExpression;
	public JbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaJbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//@Override
	//XPrimaryExpression returns XExpression:
	//    XJArrayConstructorCall |
	//    XConstructorCall |
	////    XBlockExpression |
	////    XSwitchExpression |
	////    XSynchronizedExpression |
	//    XJFeatureCallWithArrayAccess |
	//    XLiteral |
	////    XIfExpression |
	////    XForLoopExpression |
	////    XBasicForLoopExpression |
	////    XWhileExpression |
	////    XDoWhileExpression |
	////    XThrowExpression |
	////    XReturnExpression |
	////    XTryCatchFinallyExpression |
	//    XParenthesizedExpression;
	public JbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaJbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//@Override
	//XLiteral returns XExpression:
	////    XCollectionLiteral |
	////    XClosure |
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XCharLiteral |
	//    XStringLiteral |
	//    XJArrayLiteral
	////    XTypeLiteral
	//;
	public JbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaJbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//// it is a subclass of XListLiteral, so that we will reuse
	//// type computation and compiler from Xbase
	//XJArrayLiteral returns XJArrayLiteral:
	//    {XJArrayLiteral} '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public JbaseGrammarAccess.XJArrayLiteralElements getXJArrayLiteralAccess() {
		return gaJbase.getXJArrayLiteralAccess();
	}
	
	public ParserRule getXJArrayLiteralRule() {
		return getXJArrayLiteralAccess().getRule();
	}
	
	///*
	// * We want to tell between string and char literals since we'll treat them
	// * differently from the type computation point of view.
	// */
	//XCharLiteral returns XExpression:
	//    {XJCharLiteral} value=CHARACTER;
	public JbaseGrammarAccess.XCharLiteralElements getXCharLiteralAccess() {
		return gaJbase.getXCharLiteralAccess();
	}
	
	public ParserRule getXCharLiteralRule() {
		return getXCharLiteralAccess().getRule();
	}
	
	//@Override
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public JbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaJbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//@Override
	//terminal STRING:
	//            '"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'?;
	public TerminalRule getSTRINGRule() {
		return gaJbase.getSTRINGRule();
	}
	
	//terminal CHARACTER:
	//            "'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;
	public TerminalRule getCHARACTERRule() {
		return gaJbase.getCHARACTERRule();
	}
	
	//@Override
	//OpEquality:
	//    '==' | '!=' ;
	public JbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaJbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//// '**' is not valid in Java
	//@Override
	//OpMulti:
	//    '*' | '/' | '%';
	public JbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaJbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//// only valid Java operators
	//@Override
	//OpOther:
	//      '>' (=>('>' '>') | '>')
	//    | '<<';
	public JbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaJbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//// add bitwise operators with their precedence
	//@Override
	//XAndExpression returns XExpression:
	//    XBitwiseInclusiveOrExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XBitwiseInclusiveOrExpression)*;
	public JbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaJbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//XBitwiseInclusiveOrExpression returns XExpression:
	//    XBitwiseExclusiveOrExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpInclusiveOr]) rightOperand=XBitwiseExclusiveOrExpression)*;
	public JbaseGrammarAccess.XBitwiseInclusiveOrExpressionElements getXBitwiseInclusiveOrExpressionAccess() {
		return gaJbase.getXBitwiseInclusiveOrExpressionAccess();
	}
	
	public ParserRule getXBitwiseInclusiveOrExpressionRule() {
		return getXBitwiseInclusiveOrExpressionAccess().getRule();
	}
	
	//OpInclusiveOr:
	//    '|';
	public JbaseGrammarAccess.OpInclusiveOrElements getOpInclusiveOrAccess() {
		return gaJbase.getOpInclusiveOrAccess();
	}
	
	public ParserRule getOpInclusiveOrRule() {
		return getOpInclusiveOrAccess().getRule();
	}
	
	//XBitwiseExclusiveOrExpression returns XExpression:
	//    XBitwiseAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpExclusiveOr]) rightOperand=XBitwiseAndExpression)*;
	public JbaseGrammarAccess.XBitwiseExclusiveOrExpressionElements getXBitwiseExclusiveOrExpressionAccess() {
		return gaJbase.getXBitwiseExclusiveOrExpressionAccess();
	}
	
	public ParserRule getXBitwiseExclusiveOrExpressionRule() {
		return getXBitwiseExclusiveOrExpressionAccess().getRule();
	}
	
	//OpExclusiveOr:
	//    '^';
	public JbaseGrammarAccess.OpExclusiveOrElements getOpExclusiveOrAccess() {
		return gaJbase.getOpExclusiveOrAccess();
	}
	
	public ParserRule getOpExclusiveOrRule() {
		return getOpExclusiveOrAccess().getRule();
	}
	
	//XBitwiseAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpBitwiseAnd]) rightOperand=XEqualityExpression)*;
	public JbaseGrammarAccess.XBitwiseAndExpressionElements getXBitwiseAndExpressionAccess() {
		return gaJbase.getXBitwiseAndExpressionAccess();
	}
	
	public ParserRule getXBitwiseAndExpressionRule() {
		return getXBitwiseAndExpressionAccess().getRule();
	}
	
	//OpBitwiseAnd:
	//    '&';
	public JbaseGrammarAccess.OpBitwiseAndElements getOpBitwiseAndAccess() {
		return gaJbase.getOpBitwiseAndAccess();
	}
	
	public ParserRule getOpBitwiseAndRule() {
		return getOpBitwiseAndAccess().getRule();
	}
	
	//// add bitwise not ~
	//@Override
	//OpUnary:
	//    "!" | "-" | "+" | "~";
	public JbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaJbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//// customization of multiple values for annotations to use the Java array literal syntax
	//@Override
	//XAnnotationElementValueOrCommaList returns XExpression:
	//      =>({XJArrayLiteral} '{') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression )*)? '}'
	//    | XAnnotationOrExpression // in Java multiple values must be specified with an array literal
	//    // ({XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression )+)?
	//;
	public JbaseGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaJbase.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}
	
	//@Override
	//XAnnotationElementValue returns XExpression :
	//      =>({XJArrayLiteral} '{') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression )*)? '}'
	//    | XAnnotationOrExpression
	//;
	public JbaseGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaJbase.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}
	
	//XAnnotation :
	//    {XAnnotation}
	//    '@' annotationType=[types::JvmAnnotationType | QualifiedName] (=>'('
	//        (
	//            elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)*
	//        |    value=XAnnotationElementValueOrCommaList
	//        )?
	//    ')')?
	//;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}
	
	//XAnnotationElementValuePair :
	//    =>(element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue
	//;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}
	
	//XAnnotationOrExpression returns xbase::XExpression:
	//    XAnnotation |
	//    XExpression
	//;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper :
	//    FeatureCallID | 'super'
	//;
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9'|'_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
