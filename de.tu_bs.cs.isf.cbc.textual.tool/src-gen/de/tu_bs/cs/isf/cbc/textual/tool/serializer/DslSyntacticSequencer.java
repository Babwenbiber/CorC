/*
 * generated by Xtext 2.25.0
 */
package de.tu_bs.cs.isf.cbc.textual.tool.serializer;

import com.google.inject.Inject;
import de.tu_bs.cs.isf.cbc.textual.tool.services.DslGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Implication_LessThanSignKeyword_1_0_1_0_q;
	protected AbstractElementAlias match_JMLAnnotation_CommercialAtKeyword_1_0_0_p;
	protected AbstractElementAlias match_JMLAnnotation_CommercialAtKeyword_1_1_0_p;
	protected AbstractElementAlias match_JMLAnnotation_CommercialAtKeyword_2_a;
	protected AbstractElementAlias match_JMLPrimaryExpression_CHARACTERTerminalRuleCall_5_1_or_FalseKeyword_0_1_0_0_or_INTTerminalRuleCall_3_1_or_NullKeyword_6_1_or_STRINGTerminalRuleCall_4_1;
	protected AbstractElementAlias match_JMLPrimaryExpression_ExclamationMarkKeyword_2_1_q;
	protected AbstractElementAlias match_JMLPrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a;
	protected AbstractElementAlias match_JMLPrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p;
	protected AbstractElementAlias match_JMLPrimaryExpression___LeftParenthesisKeyword_2_3_0_0_RightParenthesisKeyword_2_3_0_2__a;
	protected AbstractElementAlias match_JMLPrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__a;
	protected AbstractElementAlias match_JMLPrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__p;
	protected AbstractElementAlias match_LoopInvariantAnnotation_CommercialAtKeyword_1_0_0_p;
	protected AbstractElementAlias match_LoopInvariantAnnotation_CommercialAtKeyword_1_1_0_p;
	protected AbstractElementAlias match_LoopInvariantAnnotation_CommercialAtKeyword_1_2_0_p;
	protected AbstractElementAlias match_LoopInvariantAnnotation_CommercialAtKeyword_2_a;
	protected AbstractElementAlias match_PrimaryExpression_CHARACTERTerminalRuleCall_5_1_or_FalseKeyword_0_1_0_0_or_INTTerminalRuleCall_3_1_or_NullKeyword_6_1_or_STRINGTerminalRuleCall_4_1;
	protected AbstractElementAlias match_PrimaryExpression_ExclamationMarkKeyword_2_1_q;
	protected AbstractElementAlias match_PrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a;
	protected AbstractElementAlias match_PrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p;
	protected AbstractElementAlias match_PrimaryExpression___LeftParenthesisKeyword_2_3_0_0_RightParenthesisKeyword_2_3_0_2__a;
	protected AbstractElementAlias match_PrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__a;
	protected AbstractElementAlias match_PrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__p;
	protected AbstractElementAlias match_VariableOrMethodName___LeftSquareBracketKeyword_0_1_0_AsteriskKeyword_0_1_1_RightSquareBracketKeyword_0_1_2__q;
	protected AbstractElementAlias match_VariableOrMethodName___LeftSquareBracketKeyword_1_1_1_0_AsteriskKeyword_1_1_1_1_RightSquareBracketKeyword_1_1_1_2__q;
	protected AbstractElementAlias match_XAnnotation___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q;
	protected AbstractElementAlias match_XExpressionInClosure_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q;
	protected AbstractElementAlias match_XImportDeclaration_SemicolonKeyword_2_a;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DslGrammarAccess) access;
		match_Implication_LessThanSignKeyword_1_0_1_0_q = new TokenAlias(false, true, grammarAccess.getImplicationAccess().getLessThanSignKeyword_1_0_1_0());
		match_JMLAnnotation_CommercialAtKeyword_1_0_0_p = new TokenAlias(true, false, grammarAccess.getJMLAnnotationAccess().getCommercialAtKeyword_1_0_0());
		match_JMLAnnotation_CommercialAtKeyword_1_1_0_p = new TokenAlias(true, false, grammarAccess.getJMLAnnotationAccess().getCommercialAtKeyword_1_1_0());
		match_JMLAnnotation_CommercialAtKeyword_2_a = new TokenAlias(true, true, grammarAccess.getJMLAnnotationAccess().getCommercialAtKeyword_2());
		match_JMLPrimaryExpression_CHARACTERTerminalRuleCall_5_1_or_FalseKeyword_0_1_0_0_or_INTTerminalRuleCall_3_1_or_NullKeyword_6_1_or_STRINGTerminalRuleCall_4_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getCHARACTERTerminalRuleCall_5_1()), new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getFalseKeyword_0_1_0_0()), new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getINTTerminalRuleCall_3_1()), new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getNullKeyword_6_1()), new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getSTRINGTerminalRuleCall_4_1()));
		match_JMLPrimaryExpression_ExclamationMarkKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getJMLPrimaryExpressionAccess().getExclamationMarkKeyword_2_1());
		match_JMLPrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getJMLPrimaryExpressionAccess().getExclamationMarkKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getLeftParenthesisKeyword_1_1()));
		match_JMLPrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getJMLPrimaryExpressionAccess().getExclamationMarkKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getLeftParenthesisKeyword_1_1()));
		match_JMLPrimaryExpression___LeftParenthesisKeyword_2_3_0_0_RightParenthesisKeyword_2_3_0_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getLeftParenthesisKeyword_2_3_0_0()), new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getRightParenthesisKeyword_2_3_0_2()));
		match_JMLPrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getRightParenthesisKeyword_2_3_0_2()), new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getLeftParenthesisKeyword_2_3_0_0()));
		match_JMLPrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getRightParenthesisKeyword_2_3_0_2()), new TokenAlias(false, false, grammarAccess.getJMLPrimaryExpressionAccess().getLeftParenthesisKeyword_2_3_0_0()));
		match_LoopInvariantAnnotation_CommercialAtKeyword_1_0_0_p = new TokenAlias(true, false, grammarAccess.getLoopInvariantAnnotationAccess().getCommercialAtKeyword_1_0_0());
		match_LoopInvariantAnnotation_CommercialAtKeyword_1_1_0_p = new TokenAlias(true, false, grammarAccess.getLoopInvariantAnnotationAccess().getCommercialAtKeyword_1_1_0());
		match_LoopInvariantAnnotation_CommercialAtKeyword_1_2_0_p = new TokenAlias(true, false, grammarAccess.getLoopInvariantAnnotationAccess().getCommercialAtKeyword_1_2_0());
		match_LoopInvariantAnnotation_CommercialAtKeyword_2_a = new TokenAlias(true, true, grammarAccess.getLoopInvariantAnnotationAccess().getCommercialAtKeyword_2());
		match_PrimaryExpression_CHARACTERTerminalRuleCall_5_1_or_FalseKeyword_0_1_0_0_or_INTTerminalRuleCall_3_1_or_NullKeyword_6_1_or_STRINGTerminalRuleCall_4_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getCHARACTERTerminalRuleCall_5_1()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getFalseKeyword_0_1_0_0()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getINTTerminalRuleCall_3_1()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getNullKeyword_6_1()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getSTRINGTerminalRuleCall_4_1()));
		match_PrimaryExpression_ExclamationMarkKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getPrimaryExpressionAccess().getExclamationMarkKeyword_2_1());
		match_PrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getPrimaryExpressionAccess().getExclamationMarkKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_1()));
		match_PrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getPrimaryExpressionAccess().getExclamationMarkKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_1()));
		match_PrimaryExpression___LeftParenthesisKeyword_2_3_0_0_RightParenthesisKeyword_2_3_0_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_3_0_0()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_3_0_2()));
		match_PrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_3_0_2()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_3_0_0()));
		match_PrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_3_0_2()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_3_0_0()));
		match_VariableOrMethodName___LeftSquareBracketKeyword_0_1_0_AsteriskKeyword_0_1_1_RightSquareBracketKeyword_0_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getVariableOrMethodNameAccess().getLeftSquareBracketKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getVariableOrMethodNameAccess().getAsteriskKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getVariableOrMethodNameAccess().getRightSquareBracketKeyword_0_1_2()));
		match_VariableOrMethodName___LeftSquareBracketKeyword_1_1_1_0_AsteriskKeyword_1_1_1_1_RightSquareBracketKeyword_1_1_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getVariableOrMethodNameAccess().getLeftSquareBracketKeyword_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getVariableOrMethodNameAccess().getAsteriskKeyword_1_1_1_1()), new TokenAlias(false, false, grammarAccess.getVariableOrMethodNameAccess().getRightSquareBracketKeyword_1_1_1_2()));
		match_XAnnotation___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getXAnnotationAccess().getLeftParenthesisKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getXAnnotationAccess().getRightParenthesisKeyword_3_2()));
		match_XExpressionInClosure_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
		match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2()));
		match_XImportDeclaration_SemicolonKeyword_2_a = new TokenAlias(true, true, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getArrayBracketsRule())
			return getArrayBracketsToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCHARACTERRule())
			return getCHARACTERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOpSingleAssignRule())
			return getOpSingleAssignToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ArrayBrackets :
	 * 	'[' ']'
	 * ;
	 */
	protected String getArrayBracketsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[ ]";
	}
	
	/**
	 * terminal CHARACTER: 
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"?;
	 */
	protected String getCHARACTERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\'";
	}
	
	/**
	 * terminal INT returns ecore::EInt:
	 * 	'0'..'9' ('0'..'9'|'_')*;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * OpSingleAssign:
	 * 	'='
	 * ;
	 */
	protected String getOpSingleAssignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * @Override 
	 * terminal STRING: 
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"'?;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Implication_LessThanSignKeyword_1_0_1_0_q.equals(syntax))
				emit_Implication_LessThanSignKeyword_1_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JMLAnnotation_CommercialAtKeyword_1_0_0_p.equals(syntax))
				emit_JMLAnnotation_CommercialAtKeyword_1_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JMLAnnotation_CommercialAtKeyword_1_1_0_p.equals(syntax))
				emit_JMLAnnotation_CommercialAtKeyword_1_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JMLAnnotation_CommercialAtKeyword_2_a.equals(syntax))
				emit_JMLAnnotation_CommercialAtKeyword_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JMLPrimaryExpression_CHARACTERTerminalRuleCall_5_1_or_FalseKeyword_0_1_0_0_or_INTTerminalRuleCall_3_1_or_NullKeyword_6_1_or_STRINGTerminalRuleCall_4_1.equals(syntax))
				emit_JMLPrimaryExpression_CHARACTERTerminalRuleCall_5_1_or_FalseKeyword_0_1_0_0_or_INTTerminalRuleCall_3_1_or_NullKeyword_6_1_or_STRINGTerminalRuleCall_4_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JMLPrimaryExpression_ExclamationMarkKeyword_2_1_q.equals(syntax))
				emit_JMLPrimaryExpression_ExclamationMarkKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JMLPrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a.equals(syntax))
				emit_JMLPrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JMLPrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p.equals(syntax))
				emit_JMLPrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JMLPrimaryExpression___LeftParenthesisKeyword_2_3_0_0_RightParenthesisKeyword_2_3_0_2__a.equals(syntax))
				emit_JMLPrimaryExpression___LeftParenthesisKeyword_2_3_0_0_RightParenthesisKeyword_2_3_0_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JMLPrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__a.equals(syntax))
				emit_JMLPrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_JMLPrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__p.equals(syntax))
				emit_JMLPrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LoopInvariantAnnotation_CommercialAtKeyword_1_0_0_p.equals(syntax))
				emit_LoopInvariantAnnotation_CommercialAtKeyword_1_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LoopInvariantAnnotation_CommercialAtKeyword_1_1_0_p.equals(syntax))
				emit_LoopInvariantAnnotation_CommercialAtKeyword_1_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LoopInvariantAnnotation_CommercialAtKeyword_1_2_0_p.equals(syntax))
				emit_LoopInvariantAnnotation_CommercialAtKeyword_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LoopInvariantAnnotation_CommercialAtKeyword_2_a.equals(syntax))
				emit_LoopInvariantAnnotation_CommercialAtKeyword_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_CHARACTERTerminalRuleCall_5_1_or_FalseKeyword_0_1_0_0_or_INTTerminalRuleCall_3_1_or_NullKeyword_6_1_or_STRINGTerminalRuleCall_4_1.equals(syntax))
				emit_PrimaryExpression_CHARACTERTerminalRuleCall_5_1_or_FalseKeyword_0_1_0_0_or_INTTerminalRuleCall_3_1_or_NullKeyword_6_1_or_STRINGTerminalRuleCall_4_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_ExclamationMarkKeyword_2_1_q.equals(syntax))
				emit_PrimaryExpression_ExclamationMarkKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a.equals(syntax))
				emit_PrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p.equals(syntax))
				emit_PrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression___LeftParenthesisKeyword_2_3_0_0_RightParenthesisKeyword_2_3_0_2__a.equals(syntax))
				emit_PrimaryExpression___LeftParenthesisKeyword_2_3_0_0_RightParenthesisKeyword_2_3_0_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__a.equals(syntax))
				emit_PrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__p.equals(syntax))
				emit_PrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VariableOrMethodName___LeftSquareBracketKeyword_0_1_0_AsteriskKeyword_0_1_1_RightSquareBracketKeyword_0_1_2__q.equals(syntax))
				emit_VariableOrMethodName___LeftSquareBracketKeyword_0_1_0_AsteriskKeyword_0_1_1_RightSquareBracketKeyword_0_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VariableOrMethodName___LeftSquareBracketKeyword_1_1_1_0_AsteriskKeyword_1_1_1_1_RightSquareBracketKeyword_1_1_1_2__q.equals(syntax))
				emit_VariableOrMethodName___LeftSquareBracketKeyword_1_1_1_0_AsteriskKeyword_1_1_1_1_RightSquareBracketKeyword_1_1_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XAnnotation___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q.equals(syntax))
				emit_XAnnotation___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XExpressionInClosure_SemicolonKeyword_1_1_q.equals(syntax))
				emit_XExpressionInClosure_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q.equals(syntax))
				emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XImportDeclaration_SemicolonKeyword_2_a.equals(syntax))
				emit_XImportDeclaration_SemicolonKeyword_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParenthesizedExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParenthesizedExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '<'?
	 *
	 * This ambiguous syntax occurs at:
	 *     {Impl.left=} (ambiguity) '->' right=Concat
	 */
	protected void emit_Implication_LessThanSignKeyword_1_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '/*' (ambiguity) 'requires' requires=JMLExpression
	 */
	protected void emit_JMLAnnotation_CommercialAtKeyword_1_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@'+
	 *
	 * This ambiguous syntax occurs at:
	 *     requires=JMLExpression ';' (ambiguity) 'ensures' ensures=JMLExpression
	 */
	protected void emit_JMLAnnotation_CommercialAtKeyword_1_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@'*
	 *
	 * This ambiguous syntax occurs at:
	 */
	protected void emit_JMLAnnotation_CommercialAtKeyword_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'false' | INT | STRING | CHARACTER | 'null'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('!'? '(')* (ambiguity) (rule start)
	 */
	protected void emit_JMLPrimaryExpression_CHARACTERTerminalRuleCall_5_1_or_FalseKeyword_0_1_0_0_or_INTTerminalRuleCall_3_1_or_NullKeyword_6_1_or_STRINGTerminalRuleCall_4_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('!'? '(')* (ambiguity) func=VariableOrMethodName
	 */
	protected void emit_JMLPrimaryExpression_ExclamationMarkKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('!'? '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!'? func=VariableOrMethodName
	 *     (rule start) (ambiguity) ('false' | INT | STRING | CHARACTER | 'null') (rule start)
	 *     (rule start) (ambiguity) exists='(\exists'
	 *     (rule start) (ambiguity) foreach='(\forall'
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) {JMLAddition.left=}
	 *     (rule start) (ambiguity) {JMLAnd.left=}
	 *     (rule start) (ambiguity) {JMLDivision.left=}
	 *     (rule start) (ambiguity) {JMLEqual.left=}
	 *     (rule start) (ambiguity) {JMLGreater.left=}
	 *     (rule start) (ambiguity) {JMLGreaterEqual.left=}
	 *     (rule start) (ambiguity) {JMLImpl.left=}
	 *     (rule start) (ambiguity) {JMLLower.left=}
	 *     (rule start) (ambiguity) {JMLLowerEqual.left=}
	 *     (rule start) (ambiguity) {JMLModulo.left=}
	 *     (rule start) (ambiguity) {JMLMultiplication.left=}
	 *     (rule start) (ambiguity) {JMLNotEqual.left=}
	 *     (rule start) (ambiguity) {JMLOr.left=}
	 *     (rule start) (ambiguity) {JMLQualifier.left=}
	 *     (rule start) (ambiguity) {JMLSubtraction.left=}
	 */
	protected void emit_JMLPrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('!'? '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) exists='(\exists'
	 *     (rule start) (ambiguity) foreach='(\forall'
	 *     (rule start) (ambiguity) {JMLAddition.left=}
	 *     (rule start) (ambiguity) {JMLAnd.left=}
	 *     (rule start) (ambiguity) {JMLDivision.left=}
	 *     (rule start) (ambiguity) {JMLEqual.left=}
	 *     (rule start) (ambiguity) {JMLGreater.left=}
	 *     (rule start) (ambiguity) {JMLGreaterEqual.left=}
	 *     (rule start) (ambiguity) {JMLImpl.left=}
	 *     (rule start) (ambiguity) {JMLLower.left=}
	 *     (rule start) (ambiguity) {JMLLowerEqual.left=}
	 *     (rule start) (ambiguity) {JMLModulo.left=}
	 *     (rule start) (ambiguity) {JMLMultiplication.left=}
	 *     (rule start) (ambiguity) {JMLNotEqual.left=}
	 *     (rule start) (ambiguity) {JMLOr.left=}
	 *     (rule start) (ambiguity) {JMLQualifier.left=}
	 *     (rule start) (ambiguity) {JMLSubtraction.left=}
	 */
	protected void emit_JMLPrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')*
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=JMLExpression ')' (ambiguity) '[' args+=JMLExpression
	 *     args+=JMLExpression ']' (ambiguity) '[' args+=JMLExpression
	 *     func=VariableOrMethodName (ambiguity) '[' args+=JMLExpression
	 */
	protected void emit_JMLPrimaryExpression___LeftParenthesisKeyword_2_3_0_0_RightParenthesisKeyword_2_3_0_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (')' '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=JMLExpression ']' '(' (ambiguity) args+=JMLExpression
	 *     func=VariableOrMethodName '(' (ambiguity) args+=JMLExpression
	 */
	protected void emit_JMLPrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (')' '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=JMLExpression (ambiguity) args+=JMLExpression
	 */
	protected void emit_JMLPrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '/*' (ambiguity) 'loop_invariant' loopInvariant=JMLExpression
	 */
	protected void emit_LoopInvariantAnnotation_CommercialAtKeyword_1_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@'+
	 *
	 * This ambiguous syntax occurs at:
	 *     loopInvariant=JMLExpression ';' (ambiguity) 'assignable' assignable+=VariableOrMethodName
	 */
	protected void emit_LoopInvariantAnnotation_CommercialAtKeyword_1_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@'+
	 *
	 * This ambiguous syntax occurs at:
	 *     assignable+=VariableOrMethodName ';' (ambiguity) 'decreasing' decreases=JMLExpression
	 *     loopInvariant=JMLExpression ';' (ambiguity) 'decreasing' decreases=JMLExpression
	 */
	protected void emit_LoopInvariantAnnotation_CommercialAtKeyword_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@'*
	 *
	 * This ambiguous syntax occurs at:
	 */
	protected void emit_LoopInvariantAnnotation_CommercialAtKeyword_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'false' | INT | STRING | CHARACTER | 'null'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('!'? '(')* (ambiguity) (rule start)
	 */
	protected void emit_PrimaryExpression_CHARACTERTerminalRuleCall_5_1_or_FalseKeyword_0_1_0_0_or_INTTerminalRuleCall_3_1_or_NullKeyword_6_1_or_STRINGTerminalRuleCall_4_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('!'? '(')* (ambiguity) func=VariableOrMethodName
	 */
	protected void emit_PrimaryExpression_ExclamationMarkKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('!'? '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!'? func=VariableOrMethodName
	 *     (rule start) (ambiguity) ('false' | INT | STRING | CHARACTER | 'null') (rule start)
	 *     (rule start) (ambiguity) exists='(\exists'
	 *     (rule start) (ambiguity) foreach='(\forall'
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) {Addition.left=}
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Division.left=}
	 *     (rule start) (ambiguity) {Equal.left=}
	 *     (rule start) (ambiguity) {Greater.left=}
	 *     (rule start) (ambiguity) {GreaterEqual.left=}
	 *     (rule start) (ambiguity) {Impl.left=}
	 *     (rule start) (ambiguity) {Lower.left=}
	 *     (rule start) (ambiguity) {LowerEqual.left=}
	 *     (rule start) (ambiguity) {Modulo.left=}
	 *     (rule start) (ambiguity) {Multiplication.left=}
	 *     (rule start) (ambiguity) {NotEqual.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {Qualifier.left=}
	 *     (rule start) (ambiguity) {Subtraction.left=}
	 */
	protected void emit_PrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('!'? '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) exists='(\exists'
	 *     (rule start) (ambiguity) foreach='(\forall'
	 *     (rule start) (ambiguity) {Addition.left=}
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Division.left=}
	 *     (rule start) (ambiguity) {Equal.left=}
	 *     (rule start) (ambiguity) {Greater.left=}
	 *     (rule start) (ambiguity) {GreaterEqual.left=}
	 *     (rule start) (ambiguity) {Impl.left=}
	 *     (rule start) (ambiguity) {Lower.left=}
	 *     (rule start) (ambiguity) {LowerEqual.left=}
	 *     (rule start) (ambiguity) {Modulo.left=}
	 *     (rule start) (ambiguity) {Multiplication.left=}
	 *     (rule start) (ambiguity) {NotEqual.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {Qualifier.left=}
	 *     (rule start) (ambiguity) {Subtraction.left=}
	 */
	protected void emit_PrimaryExpression___ExclamationMarkKeyword_1_0_q_LeftParenthesisKeyword_1_1__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')*
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=Expression ')' (ambiguity) '[' args+=Expression
	 *     args+=Expression ']' (ambiguity) '[' args+=Expression
	 *     func=VariableOrMethodName (ambiguity) '[' args+=Expression
	 */
	protected void emit_PrimaryExpression___LeftParenthesisKeyword_2_3_0_0_RightParenthesisKeyword_2_3_0_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (')' '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=Expression ']' '(' (ambiguity) args+=Expression
	 *     func=VariableOrMethodName '(' (ambiguity) args+=Expression
	 */
	protected void emit_PrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (')' '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=Expression (ambiguity) args+=Expression
	 */
	protected void emit_PrimaryExpression___RightParenthesisKeyword_2_3_0_2_LeftParenthesisKeyword_2_3_0_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' '*' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_VariableOrMethodName___LeftSquareBracketKeyword_0_1_0_AsteriskKeyword_0_1_1_RightSquareBracketKeyword_0_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' '*' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ')' (rule end)
	 */
	protected void emit_VariableOrMethodName___LeftSquareBracketKeyword_1_1_1_0_AsteriskKeyword_1_1_1_1_RightSquareBracketKeyword_1_1_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     annotationType=[JvmAnnotationType|QualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_XAnnotation___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 */
	protected void emit_XExpressionInClosure_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '=>' returnType=JvmTypeReference
	 */
	protected void emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     importedNamespace=QualifiedNameWithWildcard (ambiguity) (rule end)
	 *     importedType=[JvmDeclaredType|QualifiedName] (ambiguity) (rule end)
	 *     memberName=ValidID (ambiguity) (rule end)
	 *     wildcard?='*' (ambiguity) (rule end)
	 */
	protected void emit_XImportDeclaration_SemicolonKeyword_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' type=JvmTypeReference
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'new' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' elements+=XExpression
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpPostfix]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=CHARACTER
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XJArrayAccessExpression.array=}
	 *     (rule start) (ambiguity) {XJClassObject.typeExpression=}
	 *     (rule start) (ambiguity) {XJConditionalExpression.if=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' type=JvmTypeReference
	 *     (rule start) (ambiguity) 'false' ')' (rule start)
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'new' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'null' ')' (rule start)
	 *     (rule start) (ambiguity) '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '{' elements+=XExpression
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpPostfix]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=CHARACTER
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XJArrayAccessExpression.array=}
	 *     (rule start) (ambiguity) {XJClassObject.typeExpression=}
	 *     (rule start) (ambiguity) {XJConditionalExpression.if=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
