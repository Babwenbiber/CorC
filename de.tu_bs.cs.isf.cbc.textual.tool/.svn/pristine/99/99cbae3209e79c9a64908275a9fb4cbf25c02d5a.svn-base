package de.tu_bs.cs.isf.cbc.textual.tool.generator;

import org.eclipse.emf.common.util.URI;

import de.tu_bs.cs.isf.cbc.cbcmodel.AbstractStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.CbCFormula;
import de.tu_bs.cs.isf.cbc.cbcmodel.CbcmodelFactory;
import de.tu_bs.cs.isf.cbc.cbcmodel.CompositionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.Condition;
import de.tu_bs.cs.isf.cbc.cbcmodel.GlobalConditions;
import de.tu_bs.cs.isf.cbc.cbcmodel.JavaVariables;
import de.tu_bs.cs.isf.cbc.cbcmodel.Renaming;
import de.tu_bs.cs.isf.cbc.cbcmodel.SelectionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.SmallRepetitionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.AbstractStatementImpl;
import de.tu_bs.cs.isf.cbc.util.ConstructCodeBlock;
import de.tu_bs.cs.isf.cbc.util.ProveWithKey;

public class TraverseFormulaAndGenerate {
	
	private JavaVariables vars;
	private GlobalConditions conds;
	private Renaming renaming;
	private URI uri;
	private int numberFile;
	private CbcmodelFactory factory;

	TraverseFormulaAndGenerate(JavaVariables vars, GlobalConditions conds, Renaming renaming, URI uri) {
		this.vars = vars;
		this.conds = conds;
		this.renaming = renaming;
		this.uri = uri;
		this.numberFile = 0;
		this.factory = CbcmodelFactory.eINSTANCE;
	}
	
	public CbCFormula traverseFormulaAndGenerate(CbCFormula formula) {
		AbstractStatement statement = formula.getStatement();
		statement.setPreCondition(factory.createCondition());
		statement.getPreCondition().setName(formula.getPreCondition().getName());
		statement.setPostCondition(factory.createCondition());
		statement.getPostCondition().setName(formula.getPostCondition().getName());
		castStatementAndTraverse(statement);
		return formula;
	}

	private void castStatementAndTraverse(AbstractStatement statement) {
		if(statement.getClass().equals(AbstractStatementImpl.class)) {
			ProveWithKey.createProveStatementWithKey(statement, vars, conds, renaming, uri, numberFile++, false);
		} else if (statement instanceof SmallRepetitionStatement) {
			SmallRepetitionStatement repetitionStatement = (SmallRepetitionStatement) statement;
			traverseRepetitionStatement(repetitionStatement);
		} else if (statement instanceof SelectionStatement) {
			SelectionStatement selectionStatement = (SelectionStatement) statement;
			traverseSelectionStatement(selectionStatement);
		} else if (statement instanceof CompositionStatement) {
			CompositionStatement compositionStatement = (CompositionStatement) statement;
			traverseCompositionStatement(compositionStatement);
		}
	}

	private void traverseRepetitionStatement(SmallRepetitionStatement repetitionStatement) {
		AbstractStatement loopStatement = repetitionStatement.getLoopStatement();
		loopStatement.setPreCondition(factory.createCondition());
		loopStatement.getPreCondition().setName("(" + repetitionStatement.getInvariant().getName() + ") & (" + repetitionStatement.getGuard().getName() + ")");
		loopStatement.setPostCondition(factory.createCondition());
		loopStatement.getPostCondition().setName(repetitionStatement.getInvariant().getName());
		ProveWithKey.createProvePreWithKey(repetitionStatement.getInvariant(), repetitionStatement.getPreCondition(), vars, conds, renaming, uri, numberFile++, false);
		ProveWithKey.createProvePostWithKey(repetitionStatement.getInvariant(), repetitionStatement.getGuard(), repetitionStatement.getPostCondition(), vars, conds, renaming, uri, numberFile++, false);
		String code = ConstructCodeBlock.constructCodeBlockAndVerify2(repetitionStatement);
		ProveWithKey.createProveVariant2WithKey(code, repetitionStatement.getInvariant(), repetitionStatement.getGuard(), repetitionStatement.getVariant(), vars, conds, renaming, uri, numberFile++, false);
		
		castStatementAndTraverse(loopStatement);
	}
	
	private void traverseSelectionStatement(SelectionStatement selectionStatement) {
		ProveWithKey.createProvePreSelWithKey(selectionStatement.getGuards(), selectionStatement.getPreCondition(), vars, conds, renaming, uri, numberFile++, false);
		for (int i = 0; i < selectionStatement.getCommands().size(); i++) {
			AbstractStatement childStatement = selectionStatement.getCommands().get(i);
			Condition childGuard = selectionStatement.getGuards().get(i);
			
			childStatement.setPreCondition(factory.createCondition());
			childStatement.getPreCondition().setName("(" + selectionStatement.getPreCondition().getName() + ") & (" + childGuard.getName() + ")");
			childStatement.setPostCondition(factory.createCondition());
			childStatement.getPostCondition().setName(selectionStatement.getPostCondition().getName());
			castStatementAndTraverse(childStatement);
		}
	}
	
	private void traverseCompositionStatement(CompositionStatement compositionStatement) {
		AbstractStatement firstStatement = compositionStatement.getFirstStatement();
		AbstractStatement secondStatement = compositionStatement.getSecondStatement();
		
		firstStatement.setPreCondition(factory.createCondition());
		firstStatement.getPreCondition().setName(compositionStatement.getPreCondition().getName());
		firstStatement.setPostCondition(factory.createCondition());
		firstStatement.getPostCondition().setName(compositionStatement.getIntermediateCondition().getName());
		secondStatement.setPreCondition(factory.createCondition());
		secondStatement.getPreCondition().setName(compositionStatement.getIntermediateCondition().getName());
		secondStatement.setPostCondition(factory.createCondition());
		secondStatement.getPostCondition().setName(compositionStatement.getPostCondition().getName());
		castStatementAndTraverse(firstStatement);
		castStatementAndTraverse(secondStatement);
	}

	
}
