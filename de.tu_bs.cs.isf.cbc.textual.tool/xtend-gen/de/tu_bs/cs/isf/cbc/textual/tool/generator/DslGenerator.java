/**
 * generated by Xtext 2.10.0
 */
package de.tu_bs.cs.isf.cbc.textual.tool.generator;

import com.google.common.collect.Iterators;
import de.tu_bs.cs.isf.cbc.cbcmodel.CbCFormula;
import de.tu_bs.cs.isf.cbc.cbcmodel.CbCProblem;
import de.tu_bs.cs.isf.cbc.cbcmodel.GlobalConditions;
import de.tu_bs.cs.isf.cbc.cbcmodel.JavaVariables;
import de.tu_bs.cs.isf.cbc.cbcmodel.Renaming;
import de.tu_bs.cs.isf.cbc.textual.tool.generator.TraverseFormulaAndGenerate;
import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    JavaVariables vars = null;
    GlobalConditions conds = null;
    Renaming renaming = null;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<JavaVariables> _filter = Iterators.<JavaVariables>filter(_allContents, JavaVariables.class);
    boolean _hasNext = _filter.hasNext();
    if (_hasNext) {
      TreeIterator<EObject> _allContents_1 = resource.getAllContents();
      Iterator<JavaVariables> _filter_1 = Iterators.<JavaVariables>filter(_allContents_1, JavaVariables.class);
      JavaVariables _next = _filter_1.next();
      vars = _next;
    }
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterator<GlobalConditions> _filter_2 = Iterators.<GlobalConditions>filter(_allContents_2, GlobalConditions.class);
    boolean _hasNext_1 = _filter_2.hasNext();
    if (_hasNext_1) {
      TreeIterator<EObject> _allContents_3 = resource.getAllContents();
      Iterator<GlobalConditions> _filter_3 = Iterators.<GlobalConditions>filter(_allContents_3, GlobalConditions.class);
      GlobalConditions _next_1 = _filter_3.next();
      conds = _next_1;
    }
    TreeIterator<EObject> _allContents_4 = resource.getAllContents();
    Iterator<Renaming> _filter_4 = Iterators.<Renaming>filter(_allContents_4, Renaming.class);
    boolean _hasNext_2 = _filter_4.hasNext();
    if (_hasNext_2) {
      TreeIterator<EObject> _allContents_5 = resource.getAllContents();
      Iterator<Renaming> _filter_5 = Iterators.<Renaming>filter(_allContents_5, Renaming.class);
      Renaming _next_2 = _filter_5.next();
      renaming = _next_2;
    }
    TreeIterator<EObject> _allContents_6 = resource.getAllContents();
    Iterator<CbCFormula> _filter_6 = Iterators.<CbCFormula>filter(_allContents_6, CbCFormula.class);
    CbCFormula formula = _filter_6.next();
    URI _uRI = resource.getURI();
    final TraverseFormulaAndGenerate traverser = new TraverseFormulaAndGenerate(vars, conds, renaming, _uRI, formula, resource);
    CbCFormula _traverseFormulaAndGenerate = traverser.traverseFormulaAndGenerate();
    formula = _traverseFormulaAndGenerate;
    final ResourceSet rs = new ResourceSetImpl();
    IWorkspace _workspace = ResourcesPlugin.getWorkspace();
    IWorkspaceRoot _root = _workspace.getRoot();
    IPath _location = _root.getLocation();
    final String workspace = _location.toOSString();
    URI uri = resource.getURI();
    URI _trimFragment = uri.trimFragment();
    uri = _trimFragment;
    URI _trimFileExtension = uri.trimFileExtension();
    uri = _trimFileExtension;
    URI _appendFileExtension = uri.appendFileExtension("cbcmodel");
    uri = _appendFileExtension;
    String _platformString = uri.toPlatformString(true);
    String _plus = (workspace + _platformString);
    URI _createFileURI = URI.createFileURI(_plus);
    final Resource r = rs.createResource(_createFileURI);
    EList<EObject> _contents = r.getContents();
    EList<EObject> _contents_1 = resource.getContents();
    _contents.addAll(_contents_1);
    EList<EObject> _contents_2 = r.getContents();
    EObject _get = _contents_2.get(0);
    final CbCProblem problem = ((CbCProblem) _get);
    problem.setCbcformula(formula);
    try {
      r.save(Collections.EMPTY_MAP);
    } catch (final Throwable _t) {
      if (_t instanceof IOException) {
        final IOException e = (IOException)_t;
        e.printStackTrace();
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
}
