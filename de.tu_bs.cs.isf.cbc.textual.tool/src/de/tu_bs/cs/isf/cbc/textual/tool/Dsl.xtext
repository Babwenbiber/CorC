grammar de.tu_bs.cs.isf.cbc.textual.tool.Dsl with  jbase.Jbase hidden(WS, SL_COMMENT) // org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.example.org/cbcmodel"
import "http://www.eclipse.org/xtext/xbase/Xbase"

//import "http://www.eclipse.org/xtext/xbase/Xbase"
//import "http://www.eclipse.org/xtext/common/JavaVMTypes"
CbCProblem returns CbCProblem:
		(cbcformula=CbCFormula 
		& (globalcondition=GlobalConditions)? 
		& (javaVariable=JavaVariables)? 
		& (renaming=Renaming)?)
		| BlockStatement
		;

CbCFormula returns CbCFormula:
	'Formula'
	name=EString
		'Pre:' '(' preCondition=Condition ')'
		'{' statement=AbstractStatement '}'
		'Post:' '(' postCondition=Condition ')'
	;

AbstractStatement returns AbstractStatement:
	AbstractStatement_Impl | InlineBlockStatement | CompositionStatement | SkipStatement | 
	SelectionStatement | SmallRepetitionStatement | MethodStatement | ReturnStatement | StrengthWeakStatement;


EString returns ecore::EString:
	STRING | ID;
	
	
CodeString returns ecore::EString: 
			(VariableString (Operation VariableString)*'=' (("("? VariableString (Operation VariableString)* ")"?) | =>Boolean) ';')+
		;

VariableString returns ecore::EString:
	'-'? (INT | QualifiedName ( 
			('(' ( '-'?(QualifiedName |  INT) (',' '-'?(QualifiedName |  INT))*)? ')') |
			('[' '-'?(QualifiedName |  INT) (Operation '-'?(QualifiedName | INT))* ']')
		)?)
;

Boolean returns ecore::EString:
		'true'  | 'false'
;

Operation:
	'+' | '-' | '*' | '/' | '%';
	

AbstractStatement_Impl returns AbstractStatement:
	{AbstractStatement}
		name=CodeString;
		
MethodStatement returns AbstractStatement:
	{MethodStatement}
		name=EString;
		
ReturnStatement returns AbstractStatement:
	{ReturnStatement}
		'Return' name=CodeString;
		
StrengthWeakStatement returns AbstractStatement:
	{StrengthWeakStatement}
	'Pre:' '(' weakPreCondition=Condition ')'
		'{' name=CodeString '}'
		'Post:' '(' strongPostCondition=Condition ')'
;
		

Condition:
	{Condition} condition=Expression;

SkipStatement returns AbstractStatement:
		 name=';'
	;

CompositionStatement returns AbstractStatement:
	{CompositionStatement}
		'{' firstStatement=AbstractStatement '}'
		'Intm:' '(' intermediateCondition=Condition ')'
		'{' secondStatement=AbstractStatement '}'
	;

JavaStatement returns AbstractStatement:
	{JavaStatement}
	(statement+=XJStatementOrBlock)+
;

JMLWhileExpression returns XExpression:
	{JMLWhileExpression}
	(annotation=LoopInvariantAnnotationStatement
	 while=XWhileExpression);

@Override
XJSingleStatement returns XExpression:
//	XJArrayConstructorCall | not a valid statement
	XJSemicolonStatement |
	XSwitchExpression |
	XIfExpression |
	XForLoopExpression |
	XBasicForLoopExpression |
	JMLWhileExpression |
	XJTryWithResourcesStatement |
	XTryCatchFinallyExpression |
	XSynchronizedExpression |
	XJEmptyStatement |
	=> InlineJavaBlockStatement
;


@Override
terminal ML_COMMENT:
	"MyVeryOwnComment!"
;

JMLAnnotation returns JMLAnnotation:
	'/*'( 
	 (
	 	("@"+ "requires" requires=JMLExpression ";")
	    ("@"+ "ensures" ensures=JMLExpression  ";")
	    ) 
	    
	) '@'* '*/'
;

LoopInvariantAnnotation returns LoopInvariantAnnotation:
	'/*'( 
	 (
	 	("@"+ "loop_invariant" loopInvariant=JMLExpression ";") 
	    ("@"+ "assignable" (assignable+=VariableOrMethodName) ("," assignable+=VariableOrMethodName)* ";")?
	    ("@"+ "decreasing" decreases=JMLExpression  ";") 
	 )
	) '@'* '*/'
;


LoopInvariantAnnotationStatement returns XExpression:
	{LoopInvariantAnnotationStatement}
	jmlAnnotation=LoopInvariantAnnotation
;

InlineBlockStatement returns AbstractStatement:
	{InlineBlockStatement}
	"Block" references=[BlockStatement] ";"
;

BlockStatement returns AbstractStatement:
{BlockStatement}
		'Block' name=EString ':'
				(jmlAnnotation=JMLAnnotation)
			('{' (javaStatement=JavaStatement  | "CbC:" cbcStatement=AbstractStatement)'}')			
	;

InlineJavaBlockStatement returns XExpression:
{InlineJavaBlockStatement}
		(jmlAnnotation=JMLAnnotation)
		'Block' references=[BlockStatement] ';'			 
	;

SelectionStatement returns AbstractStatement:
	{SelectionStatement}
		'If' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}'
		('Elseif' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}')* 'Fi'
	;

SmallRepetitionStatement returns AbstractStatement:
	{SmallRepetitionStatement}
		'While' '(' guard=Condition ')' 'Do'
		'Inv:' '(' invariant=Condition ')'
		'Var:' '(' variant=Variant ')'
		'{' loopStatement=AbstractStatement '}' 'Od'
	;

EInt returns ecore::EInt:
	'-'? INT;

Variant returns Variant:
	{Variant}
	var=MultiMathOperation;

JavaVariables returns JavaVariables:
	{JavaVariables}
	'JavaVariables'
	('Variables' '[' variables+=JavaVariable ( "," variables+=JavaVariable)* ']')?;

JavaVariable returns JavaVariable:
	{JavaVariable}
	type=JvmTypeReference var=VariableOrMethodName;
	
GlobalConditions returns GlobalConditions:
	{GlobalConditions}
	'GlobalConditions'
	('Conditions' '[' conditions+=Condition ( "," conditions+=Condition)* ']')?;
	
Renaming returns Renaming:
	{Renaming}
	'Renaming'
	('Renames' '[' rename+=Rename (rename+=Rename)* ']')?;

Rename returns Rename:
	{Rename}
	'{'
	'Type' type=EString
	'Function' function=EString
	'NewName' newName=EString
	'}'
	;

Expression:
	Implication;
	
VariableOrMethodName:
	name=ID ("[" "*" "]")?;
	
Implication returns Expression:
	Concat (( {Impl.left=current} ('<'?'->')) right=Concat)*;

Concat returns Expression:
	Foreach (({And.left=current} '&' | {Or.left=current} '|') right=Foreach)*;
	
Foreach returns Expression:
	Exists | (foreach="(\\forall" type=JvmTypeReference var=VariableOrMethodName ";" right=Exists ")")
;

Exists returns Expression:
	Relation | (exists="(\\exists" type=JvmTypeReference var=VariableOrMethodName ";" right=Relation ")")
;

Relation returns Expression:
	MultiMathOperation( ({Lower.left=current} "<" | {Greater.left=current} ">" | {Equal.left=current} "=" | {NotEqual.left=current} "!=" |{LowerEqual.left=current} "<=" | {GreaterEqual.left=current} ">=") right=MultiMathOperation)*;
	
MultiMathOperation returns Expression:
	AddMathOperation (( {Multiplication.left=current} '*' | {Division.left=current} "/" | {Modulo.left=current} "%") right=AddMathOperation)*;

AddMathOperation returns Expression:
	QualifiedExpression (({Addition.left=current} '+' | {Subtraction.left=current} '-') right=QualifiedExpression)*;	

QualifiedExpression returns Expression:
	PrimaryExpression (=>({Qualifier.left=current} ".") right=PrimaryExpression)*;

PrimaryExpression returns Expression:
    {Expression} => ('false' | isTrue?='true') |
	'!' ? '(' Expression ')' |
	{FunctionCall} '!' ? func=VariableOrMethodName  (('(' (args+=Expression (',' args+=Expression)* )?')') | ('[' args+=Expression ']'))* |
	{Expression} INT |
	{Expression} STRING |
	{Expression} CHARACTER |
	{Expression} "null"
	 ;
	
	
JMLExpression:
	JMLImplication;
	
JMLImplication returns JMLExpression:
	JMLConcat (( {JMLImpl.left=current} '=>') right=JMLConcat)*;

JMLConcat returns JMLExpression:
	JMLForeach (({JMLAnd.left=current} '&&' | {JMLOr.left=current} '||') right=JMLForeach)*;
	
JMLForeach returns JMLExpression:
	JMLExists | (foreach="(\\forall" type=JvmTypeReference var=VariableOrMethodName ";" right=JMLExists ")")
;

JMLExists returns JMLExpression:
	JMLRelation | (exists="(\\exists" type=JvmTypeReference var=VariableOrMethodName ";" right=JMLRelation ")")
;

JMLRelation returns JMLExpression:
	JMLMultiMathOperation( ({JMLLower.left=current} "<" | {JMLGreater.left=current} ">" | {JMLEqual.left=current} "==" | 
		{JMLNotEqual.left=current} "!=" |{JMLLowerEqual.left=current} "<=" | {JMLGreaterEqual.left=current} ">="
	) right=JMLMultiMathOperation)*;
	
JMLMultiMathOperation returns JMLExpression:
	JMLAddMathOperation (( {JMLMultiplication.left=current} '*' | {JMLDivision.left=current} "/" | {JMLModulo.left=current} "%") right=JMLAddMathOperation)*;

JMLAddMathOperation returns JMLExpression:
	JMLQualifiedExpression (({JMLAddition.left=current} '+' | {JMLSubtraction.left=current} '-') right=JMLQualifiedExpression)*;	

JMLQualifiedExpression returns JMLExpression:
	JMLPrimaryExpression (=>({JMLQualifier.left=current} ".") right=JMLPrimaryExpression)*;

JMLPrimaryExpression returns JMLExpression:
    {JMLExpression} => ('false' | isTrue?='true') |
	'!' ? '(' JMLExpression ')' |
	{JMLFunctionCall} '!' ? func=VariableOrMethodName (('(' (args+=JMLExpression (',' args+=JMLExpression)* )?')') | ('[' args+=JMLExpression ']'))*  |
//	{JMLArrayElement} '!' ? array=VariableOrMethodName ('[' (element+=JMLExpression ']'('[' element+=JMLExpression ']')* )?) |	
	{JMLExpression} INT |
	{JMLExpression} STRING |
	{JMLExpression} CHARACTER |
	{JMLExpression} "null"
	 ;
