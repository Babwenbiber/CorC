grammar de.tu_bs.cs.isf.cbc.textual.tool.Dsl with  org.eclipse.xtext.xbase.Xbase// org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.example.org/cbcmodel"

CbCProblem returns CbCProblem:
		cbcformula=CbCFormula 
		& (globalcondition=GlobalConditions)? 
		& (javaVariable=JavaVariables)? 
		& (renaming=Renaming)?;

CbCFormula returns CbCFormula:
	'Formula'
	name=EString
		'pre:' '{' preCondition=Condition '}'
		'{' statement=AbstractStatement '}'
		'post:' '{' postCondition=Condition '}'
	;

AbstractStatement returns AbstractStatement:
	AbstractStatement_Impl | BlockStatement | CompositionStatement | SkipStatement | SelectionStatement | SmallRepetitionStatement | MethodStatement | ReturnStatement | StrengthWeakStatement;


EString returns ecore::EString:
	STRING | ID;
	
	
CodeString returns ecore::EString: 
			(ID ('[' (ID | INT) ']')? '=' '('? (VariableString | '-'? INT) (Operation '('* ( VariableString | '-'? INT ) ')'*)* ';')+
		;

//CodeString returns ecore::EString: 
//			(ID ('[' (ID | INT) ']')? '=' TermString ';')+
//		;		
//		
//TermString returns ecore::EString:
//	'('? (VariableString | '-'? INT | TermString2) Operation TermString ')'?
//;
//
//TermString2 returns ecore::EString:
//	'('? (VariableString | '-'? INT | TermString) Operation TermString ')'?
//;
		
VariableString returns ecore::EString:
	'-'? ID ( 
			('(' ( (VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)? |
			('[' (VariableString | '-'? INT)? ']') ('.' VariableString)? |
			('.' VariableString)
		)?
;
		//ID( ('[' | '(') ( (VariableString | INT) (',' (VariableString | INT))*)? (']' | ')'))?
Operation:
	'+' | '-' | '*' | '/' | '%';	

AbstractStatement_Impl returns AbstractStatement:
	{AbstractStatement}
		name=CodeString;
		
MethodStatement returns MethodStatement:
	{MethodStatement}
		name=EString;
		
ReturnStatement returns ReturnStatement:
	{ReturnStatement}
		'cbcReturn' name=CodeString;
		
StrengthWeakStatement returns StrengthWeakStatement:
	{StrengthWeakStatement}
	'pre:' '{' weakPreCondition=Condition '}'
		'{' name=CodeString '}'
		'post:' '{' strongPostCondition=Condition '}'
;
		

Condition returns Condition:
	{Condition}
	name=EString;

SkipStatement returns SkipStatement:
		 name=';'
	;

CompositionStatement returns CompositionStatement:
	{CompositionStatement}
		'{' firstStatement=AbstractStatement '}'
		'intm:' '[' intermediateCondition=Condition ']'
		'{' secondStatement=AbstractStatement '}'
	;

JavaStatement returns JavaStatement:
	name=EString
;

JMLAnnotation returns JMLAnnotation:
	"@1" requires=EString "$1"
	"@2" assignable=EString "$2"
	"@3" ensures=EString "$3"
;

BlockStatement returns BlockStatement:
		'Block' name=EString ':'
			(jmlAnnotation=JMLAnnotation)?
			'{' javaStatement=JavaStatement '}'
	;

SelectionStatement returns SelectionStatement:
	{SelectionStatement}
		'cbcIf' '(' guards+=Condition ')' 'then' '{' commands+=AbstractStatement '}'
		('cbcElseif' '(' guards+=Condition ')' 'then' '{' commands+=AbstractStatement '}')* 'fi'
	;

//RepetitionStatement returns RepetitionStatement:
//	{RepetitionStatement}
//		'{' startStatement=AbstractStatement '}'
//		'while' '(' guard=Condition ')' 'do'
//		'inv:' '[' invariant=Condition ']'
//		'var:' '[' variant=Variant ']'
//		'{' loopStatement=AbstractStatement '}' 'od'
//		'{' endStatement=AbstractStatement '}'
//	;

//Composition3Statement returns Composition3Statement:
//	{Composition3Statement}
//		'compo3' '{' firstStatement=AbstractStatement ')'
//		'intm1:' '[' firstIntermediateCondition=Condition ']'
//		'{' secondStatement=AbstractStatement ')'
//		'intm2:' '[' secondIntermediateCondition=Condition ']'
//		'{' thirdStatement=AbstractStatement ')' '3opmoc'
//	;

SmallRepetitionStatement returns SmallRepetitionStatement:
	{SmallRepetitionStatement}
		'cbcWhile' '(' guard=Condition ')' 'cbcDo'
		'cbcInv:' '[' invariant=Condition ']'
		'cbcVar:' '[' variant=Variant ']'
		'{' loopStatement=AbstractStatement '}' 'od'
	;

EInt returns ecore::EInt:
	'-'? INT;

Variant returns Variant:
	{Variant}
	name=EString;

	
JavaVariables returns JavaVariables:
	{JavaVariables}
	'JavaVariables'
	('variables' '{' variables+=JavaVariable ( "," variables+=JavaVariable)* '}')?;

JavaVariable returns JavaVariable:
	{JavaVariable}
	name=EString;
	
GlobalConditions returns GlobalConditions:
	{GlobalConditions}
	'GlobalConditions'
	('conditions' '{' conditions+=Condition ( "," conditions+=Condition)* '}')?;
	
Renaming returns Renaming:
	{Renaming}
	'Renaming'
	('renames' '{' rename+=Rename (rename+=Rename)* '}')?;

Rename returns Rename:
	{Rename}
	'{'
	'cbcType' type=EString
	'cbcFunction' function=EString
	'cbcNewName' newName=EString
	'}'
	;
