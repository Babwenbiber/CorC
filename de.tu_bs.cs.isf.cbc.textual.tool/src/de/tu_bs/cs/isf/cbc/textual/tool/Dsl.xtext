grammar de.tu_bs.cs.isf.cbc.textual.tool.Dsl with  jbase.Jbase//org.eclipse.xtext.xbase.Xbase// org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.example.org/cbcmodel"

CbCProblem returns CbCProblem:
		cbcformula=CbCFormula 
		& (globalcondition=GlobalConditions)? 
		& (javaVariable=JavaVariables)? 
		& (renaming=Renaming)?;

CbCFormula returns CbCFormula:
	'Formula'
	name=EString
		'Pre:' '(' preCondition=Condition ')'
		'{' statement=AbstractStatement '}'
		'Post:' '(' postCondition=Condition ')'
	;

AbstractStatement returns AbstractStatement:
	AbstractStatement_Impl | BlockStatement | CompositionStatement | SkipStatement | SelectionStatement | SmallRepetitionStatement | MethodStatement | ReturnStatement | StrengthWeakStatement;


EString returns ecore::EString:
	STRING | ID;
	
	
CodeString returns ecore::EString: 
			(ID ('[' (ID | INT) ']')? '=' '('? (VariableString | '-'? INT) (Operation '('* ( VariableString | '-'? INT ) ')'*)* ';')+
		;

//CodeString returns ecore::EString: 
//			(ID ('[' (ID | INT) ']')? '=' TermString ';')+
//		;		
//		
//TermString returns ecore::EString:
//	'('? (VariableString | '-'? INT | TermString2) Operation TermString ')'?
//;
//
//TermString2 returns ecore::EString:
//	'('? (VariableString | '-'? INT | TermString) Operation TermString ')'?
//;
		
VariableString returns ecore::EString:
	'-'? ID ( 
			('(' ( (VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)? |
			('[' (VariableString | '-'? INT)? ']') ('.' VariableString)? |
			('.' VariableString)
		)?
;
		//ID( ('[' | '(') ( (VariableString | INT) (',' (VariableString | INT))*)? (']' | ')'))?
Operation:
	'+' | '-' | '*' | '/' | '%';	

AbstractStatement_Impl returns AbstractStatement:
	{AbstractStatement}
		name=CodeString;
		
MethodStatement returns MethodStatement:
	{MethodStatement}
		name=EString;
		
ReturnStatement returns ReturnStatement:
	{ReturnStatement}
		'Return' name=CodeString;
		
StrengthWeakStatement returns StrengthWeakStatement:
	{StrengthWeakStatement}
	'Pre:' '(' weakPreCondition=Condition ')'
		'{' name=CodeString '}'
		'Post:' '(' strongPostCondition=Condition ')'
;
		

Condition:
	{Condition} condition=Expression;

SkipStatement returns SkipStatement:
		 name=';'
	;

CompositionStatement returns CompositionStatement:
	{CompositionStatement}
		'{' firstStatement=AbstractStatement '}'
		'Intm:' '(' intermediateCondition=Condition ')'
		'{' secondStatement=AbstractStatement '}'
	;

JavaStatement returns JavaStatement:
	(name+=XJStatementOrBlock)+
;

JMLAnnotation returns JMLAnnotation:
	"@requires" requires=Condition ";" &
	"@ensures" ensures=Condition ";"
;

BlockStatement returns BlockStatement:
		'Block' name=EString ':'
			(jmlAnnotation=JMLAnnotation)?
			'{' javaStatement=JavaStatement '}'
	;

SelectionStatement returns SelectionStatement:
	{SelectionStatement}
		'If' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}'
		('Elseif' '(' guards+=Condition ')' 'Then' '{' commands+=AbstractStatement '}')* 'Fi'
	;

SmallRepetitionStatement returns SmallRepetitionStatement:
	{SmallRepetitionStatement}
		'While' '(' guard=Condition ')' 'Do'
		'Inv:' '(' invariant=Condition ')'
		'Var:' '(' variant=Variant ')'
		'{' loopStatement=AbstractStatement '}' 'Od'
	;

EInt returns ecore::EInt:
	'-'? INT;

Variant returns Variant:
	{Variant}
	name=EString;

	
JavaVariables returns JavaVariables:
	{JavaVariables}
	'JavaVariables'
	('Variables' '[' variables+=JavaVariable ( "," variables+=JavaVariable)* ']')?;

JavaVariable returns JavaVariable:
	{JavaVariable}
	name=EString;
	
GlobalConditions returns GlobalConditions:
	{GlobalConditions}
	'GlobalConditions'
	('Conditions' '[' conditions+=Condition ( "," conditions+=Condition)* ']')?;
	
Renaming returns Renaming:
	{Renaming}
	'Renaming'
	('Renames' '[' rename+=Rename (rename+=Rename)* ']')?;

Rename returns Rename:
	{Rename}
	'{'
	'Type' type=EString
	'Function' function=EString
	'NewName' newName=EString
	'}'
	;

Expression:
	Foreach;
	
VariableOrMethodName:
	name=ID;
	
Foreach returns Expression:
	Exists | (foreach="(\\foreach" type=JvmTypeReference var=VariableOrMethodName ";" right=Exists ")")
;

Exists returns Expression:
	Relation | (exists="(\\exists" type=JvmTypeReference var=VariableOrMethodName ";" right=Relation ")")
;

Relation returns Expression:
	Implication ( ({Lower.left=current} "<" | {Greater.left=current} ">" | {Equal.left=current} "=" | {LowerEqual.left=current} "<=" | {GreaterEqual.left=current} ">=") right=Implication)*;

Implication returns Expression:
	Concat (( {Impl.left=current} '=>') right=Concat)*;

Concat returns Expression:
	PrimaryExpression (({And.left=current} '&' | {Or.left=current} '|') right=PrimaryExpression)*;

PrimaryExpression returns Expression:
    {Expression} => ('false' | isTrue?='true') |
	'(' Expression ')' |
	{FunctionCall} func=VariableOrMethodName ('(' (args+=Expression (',' args+=Expression)* )?')')? |
	{Expression} Number
	 ;