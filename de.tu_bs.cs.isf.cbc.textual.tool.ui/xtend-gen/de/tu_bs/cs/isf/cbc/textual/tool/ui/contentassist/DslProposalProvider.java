/**
 * generated by Xtext 2.10.0
 */
package de.tu_bs.cs.isf.cbc.textual.tool.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class DslProposalProvider extends AbstractDslProposalProvider {
  @Override
  public void complete_CompositionStatement(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_CompositionStatement(model, ruleCall, context, acceptor);
    final String proposal = (((("{\n" + "\t<statement>\n") + "} Intm: (\"<condition>\") {\n") + "\t<statement>\n") + "}");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_SmallRepetitionStatement(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_SmallRepetitionStatement(model, ruleCall, context, acceptor);
    final String proposal = (((("While (\"<guard>\") Do\n" + "\t\tInv: [\"<invariant>\"] Var: [\"<variant>\"]\n") + "\t\t{\n") + "\t\t\t<statement>\n") + "\t\t} Od");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_SelectionStatement(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_SelectionStatement(model, ruleCall, context, acceptor);
    final String proposal = ((("If (\"<guard>\") Then\n" + "\t\t{<statement>}\n") + "\t\tElseif (\"<guard>\") then\n") + "\t\t{<statement>} Fi");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_BlockStatement(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    int _offset = context.getOffset();
    String _plus = ("offset is " + Integer.valueOf(_offset));
    System.out.println(_plus);
    String _prefix = context.getPrefix();
    String _plus_1 = ("prefix is " + _prefix);
    System.out.println(_plus_1);
    super.complete_SelectionStatement(model, ruleCall, context, acceptor);
    final String proposal = (((((("Block \"<name>\":\n" + "@requires \"<precondition>\";\n") + "@ensure \"<postcondition>\";\n") + "@assignable \"<modifiable>\";\n") + "{\n") + "\t\t<statement>\n") + "}");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_CbCFormula(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_CbCFormula(model, ruleCall, context, acceptor);
    final String proposal = ((("Formula \"<formula>\"\n" + "\tPre: {\"<condition>\"}\n") + "\t{<statement>}\n") + "\tPost: {\"<condition>\"}");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_StrengthWeakStatement(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_StrengthWeakStatement(model, ruleCall, context, acceptor);
    final String proposal = (("Pre: {\"<condition>\"}\n" + "\t\t{<statement>}\n") + "\t\tPost: {\"<condition>\"}");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_JavaVariables(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_JavaVariables(model, ruleCall, context, acceptor);
    final String proposal = ("JavaVariables\n" + "\tVariables {\"<variable>\", \"<variable>\"}\n");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_GlobalConditions(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_GlobalConditions(model, ruleCall, context, acceptor);
    final String proposal = ("GlobalConditions\n" + "\tConditions {\"<condition>\", \"<condition>\"}\n");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_Renaming(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_Renaming(model, ruleCall, context, acceptor);
    final String proposal = ((((("Renaming\n" + "\tRenames {\n") + "\t\t{Type \"<type>\"") + " Function \"<functionName>\"") + " NewName \"<newName>\"}\n") + "\t}");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_Rename(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_Rename(model, ruleCall, context, acceptor);
    final String proposal = (("{Type \"<type>\"" + " Function \"<functionName>\"") + " NewName \"<newName>\"}");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
}
