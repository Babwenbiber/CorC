/*
 * generated by Xtext 2.10.0
 */
package de.tu_bs.cs.isf.cbc.textual.tool.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class DslProposalProvider extends AbstractDslProposalProvider {
	override void complete_CompositionStatement(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		super.complete_CompositionStatement(model, ruleCall, context, acceptor)
		// compute the plain proposal
			val String proposal = "{\n"
				+ "\t<statement>\n"
				+ "} Intm: (<condition>) {\n"
				+ "\t<statement>\n"
				+ "}";

		acceptor.accept(createCompletionProposal(proposal, "Composition", null, context))
    }
    
    override void complete_SmallRepetitionStatement(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		super.complete_SmallRepetitionStatement(model, ruleCall, context, acceptor)
		// compute the plain proposal
			val String proposal = "While (<guard>) Do\n" 
			+ "\t\tInv: (<invariant>) Var: (<variant>)\n"
			+ "\t\t{\n"
			+ "\t\t\t<statement>\n"
			+ "\t\t} Od";

		acceptor.accept(createCompletionProposal(proposal, "Repitition", null, context))
    }
    
    override void complete_SelectionStatement(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		super.complete_SelectionStatement(model, ruleCall, context, acceptor)
		// compute the plain proposal
			val String proposal = "If (<guard>) Then\n" 
			+ "\t\t{<statement>}\n"
			+ "\t\tElseif (<guard>) then\n" 
			+ "\t\t{<statement>} Fi";

		acceptor.accept(createCompletionProposal(proposal, "Selection", null, context))
    }
    
        override void complete_BlockStatement(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		System.out.println("offset is " + context.getOffset())
		System.out.println("prefix is " + context.getPrefix())
		super.complete_SelectionStatement(model, ruleCall, context, acceptor)
		// compute the plain proposal
			val String proposal = "Block \"<name>\":\n" 
			+ "Pre: (<precondition>);\n"
			+ "Post (<postcondition>);\n"
			+ "{\n"
			+ "\t\t<statement>\n"
			+ "}";
			

		acceptor.accept(createCompletionProposal(proposal, "Block", null, context))
    }
    
     override void complete_CbCFormula(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		super.complete_CbCFormula(model, ruleCall, context, acceptor)
		// compute the plain proposal
			val String proposal = "Formula \"<formula>\"\n"
			+ "\tPre: (<condition>)\n" 
			+ "\t{<statement>}\n"
			+ "\tPost: (<condition>)";

		acceptor.accept(createCompletionProposal(proposal, "Formula", null, context))
    }
    
    override void complete_StrengthWeakStatement(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		super.complete_StrengthWeakStatement(model, ruleCall, context, acceptor)
		// compute the plain proposal
			val String proposal = "Pre: (<condition>)\n" 
			+ "\t\t{<statement>}\n"
			+ "\t\tPost: (<condition>)";

		acceptor.accept(createCompletionProposal(proposal, "StrengthWeak", null, context))
    }
    
    override void complete_JavaVariables(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		super.complete_JavaVariables(model, ruleCall, context, acceptor)
		// compute the plain proposal
			val String proposal = "JavaVariables\n"
			+ "\tVariables [<variable>, <variable>]\n";

		acceptor.accept(createCompletionProposal(proposal, "JavaVariables", null, context))
    }
    
    override void complete_GlobalConditions(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		super.complete_GlobalConditions(model, ruleCall, context, acceptor)
		// compute the plain proposal
			val String proposal = "GlobalConditions\n"
			+ "\tConditions [<condition>, <condition>]\n";

		acceptor.accept(createCompletionProposal(proposal, "GlobalConditions", null, context))
    }
    
     override void complete_Renaming(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		super.complete_Renaming(model, ruleCall, context, acceptor)
		// compute the plain proposal
			val String proposal = "Renaming\n"
			+ "\tRenames {\n"
			+ "\t\t{Type \"<type>\""
			+ " Function \"<functionName>\""
			+ " NewName \"<newName>\"}\n"
			+ "\t}";

		acceptor.accept(createCompletionProposal(proposal, "Renames", null, context))
    }
    
    override void complete_Rename(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		super.complete_Rename(model, ruleCall, context, acceptor)
		// compute the plain proposal
			val String proposal = "{Type \"<type>\""
			+ " Function \"<functionName>\""
			+ " NewName \"<newName>\"}";

		acceptor.accept(createCompletionProposal(proposal, "Rename", null, context))
    }
}
