package de.tu_bs.cs.isf.cbc.tool.features;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.graphiti.features.IFeatureProvider;
import org.eclipse.graphiti.features.context.ICustomContext;

import de.tu_bs.cs.isf.cbc.cbcmodel.AbstractStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.CbCFormula;
import de.tu_bs.cs.isf.cbc.cbcmodel.CompositionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.RepetitionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.SelectionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.SkipStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.AbstractStatementImpl;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.CompositionStatementImpl;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.RepetitionStatementImpl;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.SelectionStatementImpl;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.SkipStatementImpl;
import de.tu_bs.cs.isf.cbc.tool.model.CbcModelUtil;
import de.tu_bs.cs.isf.taxonomy.graphiti.features.MyAbstractAsynchronousCustomFeature;

/**
 * Class that changes the abstract value of algorithms
 * @author Tobias
 *
 */
public class PrintFormulaFeature extends MyAbstractAsynchronousCustomFeature {
	 
    
    /**
     * Constructor of the class
     * @param fp	The FeatureProvider
     */
    public PrintFormulaFeature(IFeatureProvider fp) {
        super(fp);
    }
 
    @Override
    public String getName() {
        return "Print Formula";
    }
 
    @Override
    public String getDescription() {
        return "Generates the String representation of the Formula.";
    }
 
    @Override
    public boolean canExecute(ICustomContext context) {
        return true;
    }
 
    @Override
    public void execute(ICustomContext context, IProgressMonitor monitor) {
    	monitor.beginTask("Print Formula", IProgressMonitor.UNKNOWN);
    	URI uri = getDiagram().eResource().getURI();
		uri = uri.trimFragment();
		uri = uri.trimFileExtension();
		uri = uri.appendFileExtension("cbcmodel");
    	CbCFormula formula = CbcModelUtil.readFormula(uri);
        printFormula(formula);
		monitor.done();
    }
    
    private void printFormula(CbCFormula formula) {
    	StringBuffer buffer = new StringBuffer();
    	String tabs = "\t";
    	buffer.append("Formula: " + formula.getName() + "\n");
    	buffer.append("PreCondition: " + formula.getStatement().getPreCondition().getName() + "\n");
    	if (formula.getStatement().getRefinement() != null) {
    		chooseStatement(buffer, tabs, formula.getStatement());
    	} else {
    		buffer.append("Statement: " + formula.getStatement().getName() + "\n");
    	}
    	
    	buffer.append("PostCondition: " + formula.getStatement().getPostCondition().getName() + "\n");
    	System.out.println(buffer.toString());
    }
    
    private void printAbstractStatement(StringBuffer buffer, String tabs, AbstractStatement statement) {
    	if (statement.getRefinement() != null) {
    		chooseStatement(buffer, tabs + "\t", statement);
    	} else {
    		buffer.append(statement.getName() + "\n");
    	}
    }
    
    private void printRepetitionStatement(StringBuffer buffer, String tabs, RepetitionStatement statement) {
		buffer.append("RepetitionStatement" + "\n");
		buffer.append(tabs + "Invariant: " + statement.getInvariant().getName() + "\n");
		buffer.append(tabs + "Variant: " + statement.getVariant().getName() + "\n");
		if (statement.getStartStatement().getRefinement() != null) {
			buffer.append(tabs + "StartStatement: ");
			chooseStatement(buffer, tabs + "\t", statement.getStartStatement());
		} else {
			buffer.append(tabs + "StartStatement: " + statement.getStartStatement().getName() + "\n");
		}
		buffer.append(tabs + "Guard: " + statement.getGuard().getName() + "\n");
		if (statement.getLoopStatement().getRefinement() != null) {
			buffer.append(tabs + "LoopStatement: ");
			chooseStatement(buffer, tabs + "\t", statement.getLoopStatement());
		} else {
			buffer.append(tabs + "LoopStatement: " + statement.getLoopStatement().getName() + "\n");
		}
		if (statement.getEndStatement().getRefinement() != null) {
			buffer.append(tabs + "EndStatement: ");
			chooseStatement(buffer, tabs + "\t", statement.getEndStatement());
		} else {
			buffer.append(tabs + "EndStatement: " + statement.getEndStatement().getName() + "\n");
		}
		
    }
    
    private void printCompositionStatement(StringBuffer buffer, String tabs, CompositionStatement statement) {
    	buffer.append("CompositionStatement" + "\n");
    	if (statement.getFirstStatement().getRefinement() != null) {
    		buffer.append(tabs + "FirstStatement: ");
    		chooseStatement(buffer, tabs + "\t", statement.getFirstStatement());
    	} else {
    		buffer.append(tabs + "FirstStatement: " + statement.getFirstStatement().getName() + "\n");
    	}
    	buffer.append(tabs + "IntermediateCondition: " + statement.getIntermediateCondition().getName() + "\n");
    	if (statement.getSecondStatement().getRefinement() != null) {
    		buffer.append(tabs + "SecondStatement: ");
    		chooseStatement(buffer, tabs + "\t", statement.getSecondStatement());
    	} else {
    		buffer.append(tabs + "SecondStatement: " + statement.getSecondStatement().getName() + "\n");
    	}
    }
    
    private void printSelectionStatement(StringBuffer buffer, String tabs, SelectionStatement statement) {
    	buffer.append("SelectionStatement" + "\n");
    	for (int i = 0; i < statement.getGuards().size(); i++) {
    		buffer.append(tabs + "Guard " + i + ": " + statement.getGuards().get(i).getName() + "\n");
    		if (statement.getCommands().get(i).getRefinement() != null) {
    			buffer.append(tabs + "SelectionStatement " + i + ": ");
    			chooseStatement(buffer, tabs + "\t", statement.getCommands().get(i));
        	} else {
        		buffer.append(tabs + "SelectionStatement " + i + ": " + statement.getCommands().get(i).getName() + "\n");
        	}
    	}
    }
    
    private void printSkipStatement(StringBuffer buffer, String tabs, SkipStatement statement) {
    		buffer.append("Skip" + "\n");
    }
    
    
    private void chooseStatement(StringBuffer buffer, String tabs, AbstractStatement statement) {
    	statement = statement.getRefinement();
    	if (statement.getClass().equals(AbstractStatementImpl.class)) {
    		printAbstractStatement(buffer, tabs, statement);
    	} else if (statement.getClass().equals(SkipStatementImpl.class)) {
    		printSkipStatement(buffer, tabs, (SkipStatement) statement);
    	} else if (statement.getClass().equals(SelectionStatementImpl.class)) {
    		printSelectionStatement(buffer, tabs, (SelectionStatement) statement);
    	} else if (statement.getClass().equals(CompositionStatementImpl.class)) {
    		printCompositionStatement(buffer, tabs, (CompositionStatement) statement);
    	} else if (statement.getClass().equals(RepetitionStatementImpl.class)) {
    		printRepetitionStatement(buffer, tabs, (RepetitionStatement) statement);
    	}
    	
    }
}