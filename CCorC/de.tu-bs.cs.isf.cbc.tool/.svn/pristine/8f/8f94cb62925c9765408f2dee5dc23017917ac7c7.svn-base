package de.tu_bs.cs.isf.cbc.tool.patterns;

import org.eclipse.graphiti.features.IReason;
import org.eclipse.graphiti.features.context.IAddContext;
import org.eclipse.graphiti.features.context.ICreateContext;
import org.eclipse.graphiti.features.impl.Reason;
import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;
import org.eclipse.graphiti.mm.algorithms.MultiText;
import org.eclipse.graphiti.mm.algorithms.RoundedRectangle;
import org.eclipse.graphiti.mm.algorithms.styles.Orientation;
import org.eclipse.graphiti.mm.pictograms.ContainerShape;
import org.eclipse.graphiti.mm.pictograms.Diagram;
import org.eclipse.graphiti.mm.pictograms.PictogramElement;
import org.eclipse.graphiti.mm.pictograms.Shape;
import org.eclipse.graphiti.pattern.IPattern;
import org.eclipse.graphiti.pattern.id.IdLayoutContext;
import org.eclipse.graphiti.pattern.id.IdPattern;
import org.eclipse.graphiti.pattern.id.IdUpdateContext;
import org.eclipse.graphiti.services.Graphiti;
import org.eclipse.graphiti.services.IGaService;
import org.eclipse.graphiti.services.IPeCreateService;
import org.eclipse.graphiti.util.PredefinedColoredAreas;

import de.tu_bs.cs.isf.cbc.model.cbcmodel.AbstractStatement;
import de.tu_bs.cs.isf.cbc.model.cbcmodel.CbcmodelFactory;
import de.tu_bs.cs.isf.cbc.model.cbcmodel.CompositionStatement;
import de.tu_bs.cs.isf.cbc.model.cbcmodel.Condition;

/**
 * Class that creates the graphical representation of Conditions
 * @author Tobias
 *
 */
public class CompositionPattern extends IdPattern implements IPattern {

	private static final String ID_ST1_TEXT = "statement1NameText";
	private static final String ID_CONDITION_TEXT = "conditionText";
	private static final String ID_ST2_TEXT = "statement2NameText";
	private static final String ID_MAIN_RECTANGLE = "mainRectangle";
	private static final String ID_NAME_TEXT = "nameText";


	/**
	 * Constructor of the class
	 */
	public CompositionPattern() {
		super();
	}
	
	@Override
	public String getCreateName() {
		return "CompositionStatement";
	}
	
	@Override
	public String getCreateDescription() {
		return "Create a CompositionStatement.";
	}

	@Override
	public boolean isMainBusinessObjectApplicable(Object mainBusinessObject) {
		return mainBusinessObject instanceof CompositionStatement;
	}

	@Override
	public boolean canCreate(ICreateContext context) {
		return context.getTargetContainer() instanceof Diagram;
	}
	
	@Override
	public Object[] create(ICreateContext context) {
		CompositionStatement compoStatement = CbcmodelFactory.eINSTANCE.createCompositionStatement();
		compoStatement.setName("compositionStatement");
		AbstractStatement statement1 = CbcmodelFactory.eINSTANCE.createAbstractStatement();
		statement1.setName("statement1");
		compoStatement.setFirstStatement(statement1);
		Condition condition = CbcmodelFactory.eINSTANCE.createCondition();
		condition.setName("intermediateCond");
		compoStatement.setIntermediateCondition(condition);
		AbstractStatement statement2 = CbcmodelFactory.eINSTANCE.createAbstractStatement();
		statement2.setName("statement2");
		compoStatement.setSecondStatement(statement2);
		
		addGraphicalRepresentation(context, compoStatement);
		return new Object[] { compoStatement };
	}

	@Override
	public boolean canAdd(IAddContext context) {
		return super.canAdd(context) && context.getTargetContainer() instanceof Diagram;
	}

	@Override
	public PictogramElement doAdd(IAddContext context) {
		
		Diagram targetDiagram = (Diagram) context.getTargetContainer();
		CompositionStatement addedStatement = (CompositionStatement) context.getNewObject();
		IPeCreateService peCreateService = Graphiti.getPeCreateService();
		IGaService gaService = Graphiti.getGaService();

		int width = context.getWidth() <= 0 ? 300 : context.getWidth();
        int height = context.getHeight() <= 0 ? 100 : context.getHeight();
        
		// Main contents area
		ContainerShape outerContainerShape = peCreateService.createContainerShape(targetDiagram, true);
		RoundedRectangle mainRectangle = gaService.createRoundedRectangle(outerContainerShape, 20, 20);
		mainRectangle.setFilled(true);
		gaService.setRenderingStyle(mainRectangle, PredefinedColoredAreas.getBlueWhiteAdaptions());
		setId(mainRectangle, ID_MAIN_RECTANGLE);
		gaService.setLocationAndSize(mainRectangle,
	            context.getX(), context.getY(), width, height);

        // create link and wire it
        link(outerContainerShape, addedStatement);

		// Statement name
        Shape textShapeStatement1 = peCreateService.createShape(outerContainerShape, true);
		MultiText statement1Text = gaService.createMultiText(textShapeStatement1, "");
		setId(statement1Text, ID_ST1_TEXT);
		statement1Text.setValue(addedStatement.getFirstStatement().getName());
		statement1Text.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
		statement1Text.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
        
		Shape textShapeCondition = peCreateService.createShape(outerContainerShape, false);
		MultiText conditionText = gaService.createMultiText(textShapeCondition, "");
		setId(conditionText, ID_CONDITION_TEXT);
		conditionText.setValue(addedStatement.getIntermediateCondition().getName());
		conditionText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
		conditionText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
		
		Shape textShapeStatement2 = peCreateService.createShape(outerContainerShape, true);
		MultiText statement2Text = gaService.createMultiText(textShapeStatement2, "");
		setId(statement2Text, ID_ST2_TEXT);
		statement2Text.setValue(addedStatement.getSecondStatement().getName());
		statement2Text.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
		statement2Text.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
		
		Shape textShapeName = peCreateService.createShape(outerContainerShape, false);
		MultiText nameText = gaService.createMultiText(textShapeName, "CompositionStatement");
		setId(nameText, ID_NAME_TEXT);
		nameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
		nameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);

		peCreateService.createChopboxAnchor(textShapeStatement1);
		peCreateService.createChopboxAnchor(textShapeStatement2);
		peCreateService.createChopboxAnchor(outerContainerShape);

		link(outerContainerShape, addedStatement);
		link(textShapeCondition, addedStatement.getIntermediateCondition());
		link(textShapeStatement1, addedStatement.getFirstStatement());
		link(textShapeStatement2, addedStatement.getSecondStatement());
		

		return outerContainerShape;
	}

	@Override
	protected boolean layout(IdLayoutContext context, String id) {
		boolean changesDone = false;
		
		GraphicsAlgorithm mainRectangle = context.getRootPictogramElement().getGraphicsAlgorithm();
		GraphicsAlgorithm ga = context.getGraphicsAlgorithm();
		int third = mainRectangle.getWidth() / 3;
		int thirdHeight = mainRectangle.getHeight() / 3;
		
		if (id.equals(ID_NAME_TEXT)) {
			Graphiti.getGaService().setLocationAndSize(ga, 0, 0, mainRectangle.getWidth(), thirdHeight);
			changesDone = true;
		} else if (id.equals(ID_ST1_TEXT)) {
			Graphiti.getGaService().setLocationAndSize(ga, 0, thirdHeight, third, thirdHeight * 2);
			changesDone = true;
		} else if (id.equals(ID_CONDITION_TEXT)) {
			Graphiti.getGaService().setLocationAndSize(ga, third, thirdHeight, third, thirdHeight * 2);
			changesDone = true;
		} else if (id.equals(ID_ST2_TEXT)) {
			Graphiti.getGaService().setLocationAndSize(ga, third * 2, thirdHeight, third, thirdHeight * 2);
			changesDone = true;
		} 

		return changesDone;
	}
	
	@Override
	protected IReason updateNeeded(IdUpdateContext context, String id) {
//		CompositionStatement statement = (CompositionStatement) context.getDomainObject();
//		if (id.equals(ID_ST1_TEXT)) {
//			MultiText nameText = (MultiText) context.getGraphicsAlgorithm();
//			AbstractStatement domainObject = statement.getFirstStatement();
//			if (domainObject.getName() == null || !domainObject.getName().equals(nameText.getValue())) {
//				return Reason.createTrueReason("Name differs. Expected: '" + domainObject.getName() + "'");
//			}
//		} else if (id.equals(ID_CONDITION_TEXT)) {
//			MultiText nameText = (MultiText) context.getGraphicsAlgorithm();
//			Condition domainObject = statement.getIntermediateCondition();
//			if (domainObject.getName() == null || !domainObject.getName().equals(nameText.getValue())) {
//				return Reason.createTrueReason("Name differs. Expected: '" + domainObject.getName() + "'");
//			}
//		} else if (id.equals(ID_ST2_TEXT)) {
//			MultiText nameText = (MultiText) context.getGraphicsAlgorithm();
//			AbstractStatement domainObject = statement.getSecondStatement();
//			if (domainObject.getName() == null || !domainObject.getName().equals(nameText.getValue())) {
//				return Reason.createTrueReason("Name differs. Expected: '" + domainObject.getName() + "'");
//			}
//		}

		return Reason.createFalseReason();
	}

	@Override
	protected boolean update(IdUpdateContext context, String id) {
//		CompositionStatement statement = (CompositionStatement) context.getDomainObject();
//		if (id.equals(ID_ST1_TEXT)) {
//			MultiText nameText = (MultiText) context.getGraphicsAlgorithm();
//			AbstractStatement domainObject = statement.getFirstStatement();
//			nameText.setValue(domainObject.getName());
//			return true;
//		} else if (id.equals(ID_CONDITION_TEXT)) {
//			MultiText nameText = (MultiText) context.getGraphicsAlgorithm();
//			Condition domainObject = statement.getIntermediateCondition();
//			nameText.setValue(domainObject.getName());
//			return true;
//		} else if (id.equals(ID_ST2_TEXT)) {
//			MultiText nameText = (MultiText) context.getGraphicsAlgorithm();
//			AbstractStatement domainObject = statement.getSecondStatement();
//			nameText.setValue(domainObject.getName());
//			return true;
//		}
		return false;
	}
}

