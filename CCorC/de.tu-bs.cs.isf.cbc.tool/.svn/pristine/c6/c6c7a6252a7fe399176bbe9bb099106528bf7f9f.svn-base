package de.tu_bs.cs.isf.cbc.tool.features;

import org.eclipse.graphiti.features.IFeatureProvider;
import org.eclipse.graphiti.features.context.IDirectEditingContext;
import org.eclipse.graphiti.features.impl.AbstractDirectEditingFeature;
import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;
import org.eclipse.graphiti.mm.algorithms.Text;
import org.eclipse.graphiti.mm.pictograms.Shape;

import de.tu_bs.cs.isf.cbc.cbcmodel.JavaVariable;

/**
 * Class to edit the name of a DataStructure
 * @author Tobias
 *
 */
public class EditVariableFeature extends AbstractDirectEditingFeature {

	/**
	 * Constructor of the class
	 * @param fp	The FeatureProvider
	 */
	public EditVariableFeature(IFeatureProvider fp) {
	    super(fp);
	}
	
	@Override
	public int getEditingType() {
	    return TYPE_TEXT;
	}
	
	@Override
	public boolean canDirectEdit(IDirectEditingContext context) {
		Object domainObject = getBusinessObjectForPictogramElement(context.getPictogramElement());
		GraphicsAlgorithm ga = context.getGraphicsAlgorithm();
		if (domainObject instanceof JavaVariable && ga instanceof Text) {
			return true;
		}
		return false;
	}
	

	@Override
	public String getInitialValue(IDirectEditingContext context) {
		JavaVariable variable = (JavaVariable) getBusinessObjectForPictogramElement(context.getPictogramElement());
		return variable.getName();
	}

	@Override
	public String checkValueValid(String value, IDirectEditingContext context) {
		if (value == null || value.length() == 0) {
			return "Variable must not be empty";
		} else if (value.length() > 0 && !value.matches("[a-zA-Z]\\w*\\s[a-zA-Z]\\w*")) {
			return "Variable must contain a type and a name";
		}
		return null;
	}

	@Override
	public void setValue(String value, IDirectEditingContext context) {
		JavaVariable variable = (JavaVariable) getBusinessObjectForPictogramElement(context.getPictogramElement());
		variable.setName(value);
		updatePictogramElement(((Shape) context.getPictogramElement()));
	}
}
