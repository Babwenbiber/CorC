package de.tu_bs.cs.isf.cbc.util;

import de.tu_bs.cs.isf.cbc.cbcmodel.AbstractStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.Composition3Statement;
import de.tu_bs.cs.isf.cbc.cbcmodel.CompositionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.RepetitionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.SelectionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.SmallRepetitionStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.AbstractStatementImpl;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.Composition3StatementImpl;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.CompositionStatementImpl;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.RepetitionStatementImpl;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.SelectionStatementImpl;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.SkipStatementImpl;
import de.tu_bs.cs.isf.cbc.cbcmodel.impl.SmallRepetitionStatementImpl;

public class ConstructCodeBlock {

	private static boolean handleInnerLoops = true;
	
	public static String constructCodeBlockAndVerify(AbstractStatement statement) {
		handleInnerLoops = true;
		StringBuffer code = new StringBuffer();

    	if (statement instanceof RepetitionStatement) {
			code.append(constructRepetition((RepetitionStatement) statement));
		} else if (statement instanceof SmallRepetitionStatement) {
			code.append(constructSmallRepetition((SmallRepetitionStatement) statement));
		}
    	return code.toString();
	}
	
	public static String constructCodeBlockAndVerify2(AbstractStatement statement) {
		handleInnerLoops = true;
    	StringBuffer code = new StringBuffer();

    	if (statement instanceof RepetitionStatement) {
    		RepetitionStatement repStatement = (RepetitionStatement) statement;
			if (repStatement.getLoopStatement().getRefinement() != null) {
				code.append(constructCodeBlockOfChildStatement(repStatement.getLoopStatement().getRefinement()));
	    	} else {
	    		code.append(constructCodeBlockOfChildStatement(repStatement.getLoopStatement()));
	    	}
		} else if (statement instanceof SmallRepetitionStatement) {
			SmallRepetitionStatement repStatement = (SmallRepetitionStatement) statement;
			if (repStatement.getLoopStatement().getRefinement() != null) {
				code.append(constructCodeBlockOfChildStatement(repStatement.getLoopStatement().getRefinement()));
	    	} else {
	    		code.append(constructCodeBlockOfChildStatement(repStatement.getLoopStatement()));
	    	}
		}
    	return code.toString();
    }
	
	public static String constructCodeBlockAndVerify3(AbstractStatement statement) {
		handleInnerLoops = false;
    	StringBuffer code = new StringBuffer();

    	if (statement instanceof RepetitionStatement) {
    		RepetitionStatement repStatement = (RepetitionStatement) statement;
			if (repStatement.getLoopStatement().getRefinement() != null) {
				code.append(constructCodeBlockOfChildStatement(repStatement.getLoopStatement().getRefinement()));
	    	} else {
	    		code.append(constructCodeBlockOfChildStatement(repStatement.getLoopStatement()));
	    	}
		} else if (statement instanceof SmallRepetitionStatement) {
			SmallRepetitionStatement repStatement = (SmallRepetitionStatement) statement;
			if (repStatement.getLoopStatement().getRefinement() != null) {
				code.append(constructCodeBlockOfChildStatement(repStatement.getLoopStatement().getRefinement()));
	    	} else {
	    		code.append(constructCodeBlockOfChildStatement(repStatement.getLoopStatement()));
	    	}
		}
    	return code.toString();
    }
    
    private static String constructCodeBlockOfChildStatement(AbstractStatement refinement) {
    	if (refinement.getClass().equals(AbstractStatementImpl.class)) {
    		return refinement.getName()  + "\n";
    	} else if (refinement.getClass().equals(SkipStatementImpl.class)) {
    		return "; \n";
    	} else if (refinement.getClass().equals(SelectionStatementImpl.class)) {
    		return constructSelection((SelectionStatement) refinement);
    	} else if (refinement.getClass().equals(CompositionStatementImpl.class)) {
    		return constructComposition((CompositionStatement) refinement);
    	} else if (refinement.getClass().equals(Composition3StatementImpl.class)) {
    		return constructComposition3((Composition3Statement) refinement);
    	} else if (refinement.getClass().equals(RepetitionStatementImpl.class)) {
    		return constructRepetition((RepetitionStatement) refinement);
    	} else if (refinement.getClass().equals(SmallRepetitionStatementImpl.class)) {
    		return constructSmallRepetition((SmallRepetitionStatement) refinement);
    	}
		return null;
	}

    

	private static String constructSelection(SelectionStatement statement) {
		StringBuffer buffer = new StringBuffer();
		if (!statement.getCommands().isEmpty()) {
			String guard = statement.getGuards().get(0).getName();
			guard = guard.replaceAll("\\s=\\s", "==");
			buffer.append("if (" + guard +"){\n");
			if (statement.getCommands().get(0).getRefinement() != null) {
	    		buffer.append(constructCodeBlockOfChildStatement(statement.getCommands().get(0).getRefinement()) + "}");
	    	} else {
	    		buffer.append(constructCodeBlockOfChildStatement(statement.getCommands().get(0)) + "}");
	    	}
			
		}
		for (int i = 1; i < statement.getCommands().size(); i++) {
			String guard = statement.getGuards().get(i).getName();
			guard = guard.replaceAll("\\s=\\s", "==");
			buffer.append("else if (" + guard +"){\n");
			if (statement.getCommands().get(i).getRefinement() != null) {
	    		buffer.append(constructCodeBlockOfChildStatement(statement.getCommands().get(i).getRefinement()) + "}");
	    	} else {
	    		buffer.append(constructCodeBlockOfChildStatement(statement.getCommands().get(i)) + "}");
	    	}
		}
		return buffer.toString();
	}
	
	private static String constructComposition(CompositionStatement statement) {
		StringBuffer buffer = new StringBuffer();
		if (statement.getFirstStatement().getRefinement() != null) {
    		buffer.append(constructCodeBlockOfChildStatement(statement.getFirstStatement().getRefinement()));
    	} else {
    		buffer.append(constructCodeBlockOfChildStatement(statement.getFirstStatement()));
    	}
		if (statement.getSecondStatement().getRefinement() != null) {
    		buffer.append(constructCodeBlockOfChildStatement(statement.getSecondStatement().getRefinement()));
    	} else {
    		buffer.append(constructCodeBlockOfChildStatement(statement.getSecondStatement()));
    	}
		return buffer.toString();
	}
	
	private static String constructComposition3(Composition3Statement statement) {
		StringBuffer buffer = new StringBuffer();
		if (statement.getFirstStatement().getRefinement() != null) {
    		buffer.append(constructCodeBlockOfChildStatement(statement.getFirstStatement().getRefinement()));
    	} else {
    		buffer.append(constructCodeBlockOfChildStatement(statement.getFirstStatement()));
    	}
		if (statement.getSecondStatement().getRefinement() != null) {
    		buffer.append(constructCodeBlockOfChildStatement(statement.getSecondStatement().getRefinement()));
    	} else {
    		buffer.append(constructCodeBlockOfChildStatement(statement.getSecondStatement()));
    	}
		if (statement.getThirdStatement().getRefinement() != null) {
    		buffer.append(constructCodeBlockOfChildStatement(statement.getThirdStatement().getRefinement()));
    	} else {
    		buffer.append(constructCodeBlockOfChildStatement(statement.getThirdStatement()));
    	}
		return buffer.toString();
	}
	
	private static String constructRepetition(RepetitionStatement statement) {
		StringBuffer buffer = new StringBuffer();
		if (handleInnerLoops) {
			if (statement.getStartStatement().getRefinement() != null) {
				buffer.append(constructCodeBlockOfChildStatement(statement.getStartStatement().getRefinement()));
	    	} else {
	    		buffer.append(constructCodeBlockOfChildStatement(statement.getStartStatement()));
	    	}
			String guard = statement.getGuard().getName();
			guard = guard.replaceAll("\\s=\\s", "==");
			buffer.append("while(" + guard + "){\n");
			if (statement.getLoopStatement().getRefinement() != null) {
				buffer.append(constructCodeBlockOfChildStatement(statement.getLoopStatement().getRefinement()));
	    	} else {
	    		buffer.append(constructCodeBlockOfChildStatement(statement.getLoopStatement()));
	    	}
			buffer.append("\n}\n");
			if (statement.getEndStatement().getRefinement() != null) {
				buffer.append(constructCodeBlockOfChildStatement(statement.getEndStatement().getRefinement()));
	    	} else {
	    		buffer.append(constructCodeBlockOfChildStatement(statement.getEndStatement()));
	    	}
		}
		return buffer.toString();
    }  

	private static String constructSmallRepetition(SmallRepetitionStatement statement) {
		StringBuffer buffer = new StringBuffer();
		if (handleInnerLoops) {
			String guard = statement.getGuard().getName();
			guard = guard.replaceAll("\\s=\\s", "==");
			buffer.append("while(" + guard + "){\n");
			if (statement.getLoopStatement().getRefinement() != null) {
				buffer.append(constructCodeBlockOfChildStatement(statement.getLoopStatement().getRefinement()));
			} else {
				buffer.append(constructCodeBlockOfChildStatement(statement.getLoopStatement()));
			}
			buffer.append("\n}\n");
		}
		return buffer.toString();
    }
}
