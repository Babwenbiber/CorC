package de.tu_bs.cs.isf.cbc.tool.patterns;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.graphiti.features.IReason;
import org.eclipse.graphiti.features.context.IAddContext;
import org.eclipse.graphiti.features.context.ICreateContext;
import org.eclipse.graphiti.features.impl.Reason;
import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;
import org.eclipse.graphiti.mm.algorithms.MultiText;
import org.eclipse.graphiti.mm.algorithms.RoundedRectangle;
import org.eclipse.graphiti.mm.algorithms.styles.Orientation;
import org.eclipse.graphiti.mm.pictograms.ContainerShape;
import org.eclipse.graphiti.mm.pictograms.Diagram;
import org.eclipse.graphiti.mm.pictograms.PictogramElement;
import org.eclipse.graphiti.mm.pictograms.Shape;
import org.eclipse.graphiti.pattern.IPattern;
import org.eclipse.graphiti.pattern.id.IdLayoutContext;
import org.eclipse.graphiti.pattern.id.IdPattern;
import org.eclipse.graphiti.pattern.id.IdUpdateContext;
import org.eclipse.graphiti.services.Graphiti;
import org.eclipse.graphiti.services.IGaService;
import org.eclipse.graphiti.services.IPeCreateService;
import org.eclipse.graphiti.services.IPeService;
import org.eclipse.graphiti.util.ColorConstant;
import org.eclipse.graphiti.util.IColorConstant;

import de.tu_bs.cs.isf.cbc.cbcmodel.AbstractStatement;
import de.tu_bs.cs.isf.cbc.cbcmodel.CbcmodelFactory;
import de.tu_bs.cs.isf.cbc.cbcmodel.Condition;
import de.tu_bs.cs.isf.cbc.cbcmodel.SelectionStatement;

/**
 * Class that creates the graphical representation of Conditions
 * @author Tobias
 *
 */
public class SelectionPattern extends IdPattern implements IPattern {

	private static final String ID_STATEMENT_TEXT = "statementSelNameText";
	private static final String ID_CONDITION_TEXT = "conditionSelText";
	private static final String ID_MAIN_RECTANGLE = "mainRectangle";
	private static final String ID_NAME_TEXT = "nameText";
	private static final String ID_PRE_TEXT = "preText";
	private static final String ID_POST_TEXT = "postText";


	/**
	 * Constructor of the class
	 */
	public SelectionPattern() {
		super();
	}
	
	@Override
	public String getCreateName() {
		return "SelectionStatement";
	}
	
	@Override
	public String getCreateDescription() {
		return "Create a SelectionStatement.";
	}

	@Override
	public boolean isMainBusinessObjectApplicable(Object mainBusinessObject) {
		return mainBusinessObject instanceof SelectionStatement;
	}

	@Override
	public boolean canCreate(ICreateContext context) {
		return context.getTargetContainer() instanceof Diagram;
	}
	
	@Override
	public Object[] create(ICreateContext context) {
		SelectionStatement selectionStatement = CbcmodelFactory.eINSTANCE.createSelectionStatement();
		selectionStatement.setName("selectionStatement");
		AbstractStatement statement = CbcmodelFactory.eINSTANCE.createAbstractStatement();
		statement.setName("statement");
		selectionStatement.getCommands().add(statement);
		Condition condition = CbcmodelFactory.eINSTANCE.createCondition();
		condition.setName("guard");
		selectionStatement.getGuards().add(condition);
		Condition pre = CbcmodelFactory.eINSTANCE.createCondition();
		pre.setName("{}");
		statement.setPreCondition(pre);
		Condition post = CbcmodelFactory.eINSTANCE.createCondition();
		post.setName("{}");
		statement.setPostCondition(post);
		
		addGraphicalRepresentation(context, selectionStatement);
		return new Object[] { selectionStatement };
	}

	@Override
	public boolean canAdd(IAddContext context) {
		return super.canAdd(context) && context.getTargetContainer() instanceof Diagram;
	}

	@Override
	public PictogramElement doAdd(IAddContext context) {
		
		Diagram targetDiagram = (Diagram) context.getTargetContainer();
		SelectionStatement addedStatement = (SelectionStatement) context.getNewObject();
		IPeCreateService peCreateService = Graphiti.getPeCreateService();
		IGaService gaService = Graphiti.getGaService();

		int width = context.getWidth() <= 0 ? 200 : context.getWidth();
        int height = context.getHeight() <= 0 ? 200 : context.getHeight();
        
		// Main contents area
		ContainerShape outerContainerShape = peCreateService.createContainerShape(targetDiagram, true);
		RoundedRectangle mainRectangle = gaService.createRoundedRectangle(outerContainerShape, 20, 20);
		mainRectangle.setFilled(true);
		mainRectangle.setBackground(manageColor(new ColorConstant(255, 150, 150)));
		setId(mainRectangle, ID_MAIN_RECTANGLE);
		gaService.setLocationAndSize(mainRectangle,
	            context.getX(), context.getY(), width, height);

        // create link and wire it
        link(outerContainerShape, addedStatement);

		// Statement name
//        Shape textShapeStatement = peCreateService.createShape(outerContainerShape, true);
//		MultiText statementText = gaService.createMultiText(textShapeStatement, "");
//		setId(statementText, ID_STATEMENT_TEXT);
//		setIndex(statementText, 0);
//		statementText.setValue(addedStatement.getCommands().get(0).getName());
//		statementText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
//		statementText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
//        
//		Shape textShapeCondition = peCreateService.createShape(outerContainerShape, false);
//		MultiText conditionText = gaService.createMultiText(textShapeCondition, "");
//		setId(conditionText, ID_CONDITION_TEXT);
//		setIndex(conditionText, 0);
//		conditionText.setValue(addedStatement.getGuards().get(0).getName());
//		conditionText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
//		conditionText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
		
		Shape textShapeName = peCreateService.createShape(outerContainerShape, false);
		MultiText nameText = gaService.createMultiText(textShapeName, "SelectionStatement IF..FI");
		setId(nameText, ID_NAME_TEXT);
		nameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
		nameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
		
//		Shape preShape = peCreateService.createShape(outerContainerShape, false);
//		MultiText preNameText = gaService.createMultiText(preShape, addedStatement.getCommands().get(0).getPreCondition().getName());
//		setId(preNameText, ID_PRE_TEXT);
//		setIndex(preNameText, 0);
//		preNameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
//		preNameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
//		
//		Shape postShape = peCreateService.createShape(outerContainerShape, false);
//		MultiText postNameText = gaService.createMultiText(postShape, addedStatement.getCommands().get(0).getPostCondition().getName());
//		setId(postNameText, ID_POST_TEXT);
//		setIndex(postNameText, 0);
//		postNameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
//		postNameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);

//		peCreateService.createChopboxAnchor(textShapeStatement);
		peCreateService.createChopboxAnchor(outerContainerShape);

		link(outerContainerShape, addedStatement);
//		link(textShapeCondition, addedStatement.getGuards().get(0));
//		link(textShapeStatement, addedStatement.getCommands().get(0));

		return outerContainerShape;
	}

	@Override
	protected boolean layout(IdLayoutContext context, String id) {
		boolean changesDone = false;
		
		GraphicsAlgorithm mainRectangle = context.getRootPictogramElement().getGraphicsAlgorithm();
		SelectionStatement statement = (SelectionStatement) getBusinessObjectForPictogramElement(context.getRootPictogramElement());
		GraphicsAlgorithm ga = context.getGraphicsAlgorithm();
		int width = mainRectangle.getWidth();
		int fifthHeight = mainRectangle.getHeight() / 5;
		if (statement.getCommands().size() > 1) {
			width = width / statement.getCommands().size();
		}
		
		if (id.equals(ID_NAME_TEXT)) {
			Graphiti.getGaService().setLocationAndSize(ga, 0, 0, mainRectangle.getWidth(), fifthHeight);
			changesDone = true;
		} else if (id.equals(ID_CONDITION_TEXT)) {
			int index = getIndex(context.getGraphicsAlgorithm());
			Graphiti.getGaService().setLocationAndSize(ga, width * index, fifthHeight, width, fifthHeight);
			changesDone = true;
		} else if (id.equals(ID_STATEMENT_TEXT)) {
			int index = getIndex(context.getGraphicsAlgorithm());
			Graphiti.getGaService().setLocationAndSize(ga, width * index, fifthHeight * 3, width, fifthHeight);
			changesDone = true;
		} else if (id.equals(ID_PRE_TEXT)) {
			int index = getIndex(context.getGraphicsAlgorithm());
			Graphiti.getGaService().setLocationAndSize(ga, width * index, fifthHeight * 2, width, fifthHeight);
			changesDone = true;
		} else if (id.equals(ID_POST_TEXT) && getIndex(context.getGraphicsAlgorithm()) == 0) {
			Graphiti.getGaService().setLocationAndSize(ga, 0, fifthHeight * 4, mainRectangle.getWidth(), fifthHeight);
			changesDone = true;
		}

		return changesDone;
	}
	
	@Override
	protected IReason updateNeeded(IdUpdateContext context, String id) {
		if (id.equals(ID_MAIN_RECTANGLE)) {
			ContainerShape containerShape = (ContainerShape) context.getPictogramElement();
			SelectionStatement statement = (SelectionStatement) context.getDomainObject();
			if (containerShape.getChildren().size() - 1 != statement.getCommands().size() * 4) {
				return Reason.createTrueReason("Number of Commands and Guards differ. Expected: " + statement.getCommands().size() 
						+ " " + containerShape.getChildren().size());
			}
			RoundedRectangle rectangle = (RoundedRectangle) context.getGraphicsAlgorithm();
			if (checkIsProven(statement) &&
					((rectangle.getBackground() != null && !rectangle.getBackground().equals(manageColor(IColorConstant.LIGHT_GREEN))) 
							|| rectangle.getBackground() == null)) {
				return Reason.createTrueReason("Statement is proven. Expected green color.");
			} else if (!checkIsProven(statement) && 
					((rectangle.getBackground() != null && rectangle.getBackground().equals(manageColor(IColorConstant.LIGHT_GREEN))) 
							|| rectangle.getBackground() == null)) {
				return Reason.createTrueReason("Statement is not proven. Expected red color.");
			} 
		}
		return Reason.createFalseReason();
	}

	@Override
	protected boolean update(IdUpdateContext context, String id) {
		if (id.equals(ID_MAIN_RECTANGLE)) {
			ContainerShape containerShape = (ContainerShape) context.getPictogramElement();
			SelectionStatement statement = (SelectionStatement) context.getDomainObject();
			if (containerShape.getChildren().size() - 1 != statement.getCommands().size() * 4) {
				
				EList<AbstractStatement> childStatements = ((SelectionStatement) context.getDomainObject()).getCommands();
				int newIndex = childStatements.size() - 1;
				AbstractStatement childStatement = childStatements.get(newIndex);
				Shape shapeText = Graphiti.getPeCreateService().createShape((ContainerShape) context.getPictogramElement(), true);
				MultiText statementNameText = Graphiti.getGaService().createMultiText(shapeText, childStatement.getName());
				setId(statementNameText, ID_STATEMENT_TEXT);
				setIndex(statementNameText, newIndex);
				statementNameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
				statementNameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
				IPeCreateService peCreateService = Graphiti.getPeCreateService();
				peCreateService.createChopboxAnchor(shapeText);
				link(shapeText, childStatement);
				
				Shape shapeTextPre = Graphiti.getPeCreateService().createShape((ContainerShape) context.getPictogramElement(), false);
				MultiText preNameText = Graphiti.getGaService().createMultiText(shapeTextPre, childStatement.getPreCondition().getName());
				setId(preNameText, ID_PRE_TEXT);
				setIndex(preNameText, newIndex);
				preNameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
				preNameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
				link(shapeTextPre, childStatement.getPreCondition());
				
				Shape shapeTextPost = Graphiti.getPeCreateService().createShape((ContainerShape) context.getPictogramElement(), false);
				MultiText postNameText = Graphiti.getGaService().createMultiText(shapeTextPost, childStatement.getPostCondition().getName());
				setId(postNameText, ID_POST_TEXT);
				setIndex(postNameText, newIndex);
				postNameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
				postNameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
				link(shapeTextPost, childStatement.getPostCondition());
				
				EList<Condition> childConditions = ((SelectionStatement) context.getDomainObject()).getGuards();
				Condition childCondition = childConditions.get(newIndex);
				
				Shape shapeTextCond = Graphiti.getPeCreateService().createShape((ContainerShape) context.getPictogramElement(), false);
				MultiText conditionNameText = Graphiti.getGaService().createMultiText(shapeTextCond, childCondition.getName());
				setId(conditionNameText, ID_CONDITION_TEXT);
				setIndex(conditionNameText, newIndex);
				conditionNameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
				conditionNameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
				link(shapeTextCond, childCondition);
			}
			RoundedRectangle rectangle = (RoundedRectangle) context.getGraphicsAlgorithm();
			if (checkIsProven(statement)) {
				statement.setProven(true);
				rectangle.setBackground(manageColor(IColorConstant.LIGHT_GREEN));
				updateParent(statement);
			} else {
				statement.setProven(false);
				rectangle.setBackground(manageColor(new ColorConstant(255, 150, 150)));
				updateParent(statement);
			}
			return true;
		}
			return false;
	}
	
	private boolean checkIsProven(SelectionStatement statement) {
		boolean isProven = true;
		for (AbstractStatement childStatement : statement.getCommands()) {
			AbstractStatement statementToCheck = null;
			if (childStatement.getRefinement() != null) {
				statementToCheck = childStatement.getRefinement();
			} else {
				statementToCheck = childStatement;
			}
			if (!statementToCheck.isProven()) {
				isProven = false;
			}
		}
		return isProven;
		
	}
	
	private void updateParent(AbstractStatement statement) {
		if(statement.getParent()!= null) {
			IPeService pe = Graphiti.getPeService();
			EObject[] objArray = {statement.getParent()};
			Object[] obj =  pe.getLinkedPictogramElements(objArray, getDiagram());
			Shape pElement = (Shape) obj[0];
			if (pElement.getContainer() != null) updatePictogramElement(pElement.getContainer());
		}
	}
}

