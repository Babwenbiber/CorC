package de.tu_bs.cs.isf.cbc.tool.patterns;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.graphiti.features.IReason;
import org.eclipse.graphiti.features.context.IAddContext;
import org.eclipse.graphiti.features.context.ICreateContext;
import org.eclipse.graphiti.features.impl.Reason;
import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;
import org.eclipse.graphiti.mm.algorithms.MultiText;
import org.eclipse.graphiti.mm.algorithms.RoundedRectangle;
import org.eclipse.graphiti.mm.algorithms.styles.Orientation;
import org.eclipse.graphiti.mm.pictograms.ContainerShape;
import org.eclipse.graphiti.mm.pictograms.Diagram;
import org.eclipse.graphiti.mm.pictograms.PictogramElement;
import org.eclipse.graphiti.mm.pictograms.Shape;
import org.eclipse.graphiti.pattern.IPattern;
import org.eclipse.graphiti.pattern.id.IdLayoutContext;
import org.eclipse.graphiti.pattern.id.IdPattern;
import org.eclipse.graphiti.pattern.id.IdUpdateContext;
import org.eclipse.graphiti.services.Graphiti;
import org.eclipse.graphiti.services.IGaService;
import org.eclipse.graphiti.services.IPeCreateService;
import org.eclipse.graphiti.util.PredefinedColoredAreas;

import de.tu_bs.cs.isf.cbc.model.cbcmodel.AbstractStatement;
import de.tu_bs.cs.isf.cbc.model.cbcmodel.CbcmodelFactory;
import de.tu_bs.cs.isf.cbc.model.cbcmodel.Condition;
import de.tu_bs.cs.isf.cbc.model.cbcmodel.SelectionStatement;

/**
 * Class that creates the graphical representation of Conditions
 * @author Tobias
 *
 */
public class SelectionPattern extends IdPattern implements IPattern {

	private static final String ID_STATEMENT_TEXT = "statementSelNameText";
	private static final String ID_CONDITION_TEXT = "conditionSelText";
	private static final String ID_MAIN_RECTANGLE = "mainRectangle";
	private static final String ID_NAME_TEXT = "nameText";


	/**
	 * Constructor of the class
	 */
	public SelectionPattern() {
		super();
	}
	
	@Override
	public String getCreateName() {
		return "SelectionStatement";
	}
	
	@Override
	public String getCreateDescription() {
		return "Create a SelectionStatement.";
	}

	@Override
	public boolean isMainBusinessObjectApplicable(Object mainBusinessObject) {
		return mainBusinessObject instanceof SelectionStatement;
	}

	@Override
	public boolean canCreate(ICreateContext context) {
		return context.getTargetContainer() instanceof Diagram;
	}
	
	@Override
	public Object[] create(ICreateContext context) {
		SelectionStatement selectionStatement = CbcmodelFactory.eINSTANCE.createSelectionStatement();
		selectionStatement.setName("selectionStatement");
		AbstractStatement statement = CbcmodelFactory.eINSTANCE.createAbstractStatement();
		statement.setName("statement");
		selectionStatement.getCommands().add(statement);
		Condition condition = CbcmodelFactory.eINSTANCE.createCondition();
		condition.setName("guard");
		selectionStatement.getGuards().add(condition);
		
		addGraphicalRepresentation(context, selectionStatement);
		return new Object[] { selectionStatement };
	}

	@Override
	public boolean canAdd(IAddContext context) {
		return super.canAdd(context) && context.getTargetContainer() instanceof Diagram;
	}

	@Override
	public PictogramElement doAdd(IAddContext context) {
		
		Diagram targetDiagram = (Diagram) context.getTargetContainer();
		SelectionStatement addedStatement = (SelectionStatement) context.getNewObject();
		IPeCreateService peCreateService = Graphiti.getPeCreateService();
		IGaService gaService = Graphiti.getGaService();

		int width = context.getWidth() <= 0 ? 200 : context.getWidth();
        int height = context.getHeight() <= 0 ? 100 : context.getHeight();
        
		// Main contents area
		ContainerShape outerContainerShape = peCreateService.createContainerShape(targetDiagram, true);
		RoundedRectangle mainRectangle = gaService.createRoundedRectangle(outerContainerShape, 20, 20);
		mainRectangle.setFilled(true);
		gaService.setRenderingStyle(mainRectangle, PredefinedColoredAreas.getBlueWhiteAdaptions());
		setId(mainRectangle, ID_MAIN_RECTANGLE);
		gaService.setLocationAndSize(mainRectangle,
	            context.getX(), context.getY(), width, height);

        // create link and wire it
        link(outerContainerShape, addedStatement);

		// Statement name
        Shape textShapeStatement = peCreateService.createShape(outerContainerShape, true);
		MultiText statementText = gaService.createMultiText(textShapeStatement, "");
		setId(statementText, ID_STATEMENT_TEXT);
		statementText.setValue(addedStatement.getCommands().get(0).getName());
		statementText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
		statementText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
        
		Shape textShapeCondition = peCreateService.createShape(outerContainerShape, false);
		MultiText conditionText = gaService.createMultiText(textShapeCondition, "");
		setId(conditionText, ID_CONDITION_TEXT);
		conditionText.setValue(addedStatement.getGuards().get(0).getName());
		conditionText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
		conditionText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
		
		Shape textShapeName = peCreateService.createShape(outerContainerShape, false);
		MultiText nameText = gaService.createMultiText(textShapeName, "SelectionStatement IF..FI");
		setId(nameText, ID_NAME_TEXT);
		nameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
		nameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);

		peCreateService.createChopboxAnchor(textShapeStatement);
		peCreateService.createChopboxAnchor(outerContainerShape);

		link(outerContainerShape, addedStatement);
		link(textShapeCondition, addedStatement.getGuards().get(0));
		link(textShapeStatement, addedStatement.getCommands().get(0));

		return outerContainerShape;
	}

	@Override
	protected boolean layout(IdLayoutContext context, String id) {
		boolean changesDone = false;
		
		GraphicsAlgorithm mainRectangle = context.getRootPictogramElement().getGraphicsAlgorithm();
		SelectionStatement statement = (SelectionStatement) getBusinessObjectForPictogramElement(context.getRootPictogramElement());
		GraphicsAlgorithm ga = context.getGraphicsAlgorithm();
		int half = mainRectangle.getWidth() / 2;
		int thirdHeight = mainRectangle.getHeight() / 3;
		int height;
		if (statement.getCommands().size() > 0) {
			height = thirdHeight * 2 / statement.getCommands().size(); 
		} else {
			height = thirdHeight * 2;
		}
		
		if (id.equals(ID_NAME_TEXT)) {
			Graphiti.getGaService().setLocationAndSize(ga, 0, 0, mainRectangle.getWidth(), thirdHeight);
			changesDone = true;
		} else if (id.equals(ID_CONDITION_TEXT)) {
			int index = getIndex(context.getGraphicsAlgorithm());
			Graphiti.getGaService().setLocationAndSize(ga, 0, thirdHeight + index * height, half, height);
			changesDone = true;
		} else if (id.equals(ID_STATEMENT_TEXT)) {
			int index = getIndex(context.getGraphicsAlgorithm());
			Graphiti.getGaService().setLocationAndSize(ga, half, thirdHeight + index * height, half, height);
			changesDone = true;
		} 

		return changesDone;
	}
	
	@Override
	protected IReason updateNeeded(IdUpdateContext context, String id) {
		if (id.equals(ID_MAIN_RECTANGLE)) {
			ContainerShape containerShape = (ContainerShape) context.getPictogramElement();
			SelectionStatement statement = (SelectionStatement) context.getDomainObject();
			if (containerShape.getChildren().size() - 1 != statement.getCommands().size() * 2) {
				return Reason.createTrueReason("Number of Commands and Guards differ. Expected: " + statement.getCommands().size());
			}
		}
		return Reason.createFalseReason();
	}

	@Override
	protected boolean update(IdUpdateContext context, String id) {
		if (id.equals(ID_MAIN_RECTANGLE)) {
		EList<Shape> children = ((ContainerShape) context.getPictogramElement()).getChildren();
		Shape[] toDelete = children.toArray(new Shape[children.size()]);
		for (Shape shape : toDelete) {
			if (!getId(shape.getGraphicsAlgorithm()).equals(ID_NAME_TEXT)) {
				EcoreUtil.delete(shape, true);
			}
		}
		EList<AbstractStatement> childStatements = ((SelectionStatement) context.getDomainObject()).getCommands();
		int index = 0;
		for (AbstractStatement childStatement : childStatements) {
			Shape shapeText = Graphiti.getPeCreateService().createShape((ContainerShape) context.getPictogramElement(), true);
			MultiText statementNameText = Graphiti.getGaService().createMultiText(shapeText, childStatement.getName());
			setId(statementNameText, ID_STATEMENT_TEXT);
			setIndex(statementNameText, index);
			statementNameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
			statementNameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
			IPeCreateService peCreateService = Graphiti.getPeCreateService();
			peCreateService.createChopboxAnchor(shapeText);
			link(shapeText, childStatement);
			index++;
		}
		
		EList<Condition> childConditions = ((SelectionStatement) context.getDomainObject()).getGuards();
		index = 0;
		for (Condition childCondition : childConditions) {
			Shape shapeText = Graphiti.getPeCreateService().createShape((ContainerShape) context.getPictogramElement(), false);
			MultiText conditionNameText = Graphiti.getGaService().createMultiText(shapeText, childCondition.getName());
			setId(conditionNameText, ID_CONDITION_TEXT);
			setIndex(conditionNameText, index);
			conditionNameText.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);
			conditionNameText.setVerticalAlignment(Orientation.ALIGNMENT_CENTER);
			link(shapeText, childCondition);
			index++;
		}
		return true;
	}
		return false;
	}
}

